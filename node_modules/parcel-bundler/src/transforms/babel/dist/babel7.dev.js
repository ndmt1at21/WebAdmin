"use strict";

var localRequire = require('../../utils/localRequire');

function babel7(asset, options) {
  var config, babel, pkg, res;
  return regeneratorRuntime.async(function babel7$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          config = options.config; // If this is an internally generated config, use our internal @babel/core,
          // otherwise require a local version from the package we're compiling.

          if (!options.internal) {
            _context.next = 5;
            break;
          }

          _context.t0 = require('@babel/core');
          _context.next = 8;
          break;

        case 5:
          _context.next = 7;
          return regeneratorRuntime.awrap(localRequire('@babel/core', asset.name));

        case 7:
          _context.t0 = _context.sent;

        case 8:
          babel = _context.t0;
          _context.next = 11;
          return regeneratorRuntime.awrap(asset.getPackage());

        case 11:
          pkg = _context.sent;
          config.code = false;
          config.ast = true;
          config.filename = asset.name;
          config.cwd = pkg ? pkg.pkgdir : asset.options.rootDir;
          config.babelrc = false;
          config.configFile = false;
          config.parserOpts = Object.assign({}, config.parserOpts, {
            allowReturnOutsideFunction: true,
            strictMode: false,
            sourceType: 'module',
            plugins: ['dynamicImport']
          });

          if (asset.ast) {
            res = babel.transformFromAst(asset.ast, asset.contents, config);
          } else {
            res = babel.transformSync(asset.contents, config);
          }

          if (res.ast) {
            asset.ast = res.ast;
            asset.isAstDirty = true;
          }

        case 21:
        case "end":
          return _context.stop();
      }
    }
  });
}

module.exports = babel7;