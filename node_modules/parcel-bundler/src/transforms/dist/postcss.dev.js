"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var localRequire = require('../utils/localRequire');

var loadPlugins = require('../utils/loadPlugins');

var md5 = require('../utils/md5');

var postcss = require('postcss');

var FileSystemLoader = require('css-modules-loader-core/lib/file-system-loader');

var semver = require('semver');

var path = require('path');

var fs = require('@parcel/fs');

module.exports = function _callee(asset) {
  var config, res;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(getConfig(asset));

        case 2:
          config = _context.sent;

          if (config) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("return");

        case 5:
          _context.next = 7;
          return regeneratorRuntime.awrap(asset.parseIfNeeded());

        case 7:
          _context.next = 9;
          return regeneratorRuntime.awrap(postcss(config.plugins).process(asset.getCSSAst(), config));

        case 9:
          res = _context.sent;
          asset.ast.css = res.css;
          asset.ast.dirty = false;
          asset.sourceMap = res.map ? res.map.toJSON() : null;

        case 13:
        case "end":
          return _context.stop();
      }
    }
  });
};

function getConfig(asset) {
  var config, enableModules, postcssModulesConfig, postcssModules, cssnano, _ref, version;

  return regeneratorRuntime.async(function getConfig$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(asset.getConfig(['.postcssrc', '.postcssrc.json', '.postcssrc.js', 'postcss.config.js'], {
            packageKey: 'postcss'
          }));

        case 2:
          config = _context2.sent;
          enableModules = asset.options.rendition && asset.options.rendition.modules;

          if (!(!config && !asset.options.minify && !enableModules)) {
            _context2.next = 6;
            break;
          }

          return _context2.abrupt("return");

        case 6:
          config = config || {};

          if (asset.options.sourceMaps) {
            config.map = {
              inline: false,
              annotation: false,
              sourcesContent: true
            };
          }

          if (!(_typeof(config) !== 'object')) {
            _context2.next = 10;
            break;
          }

          throw new Error('PostCSS config should be an object.');

        case 10:
          postcssModulesConfig = {
            getJSON: function getJSON(filename, json) {
              return asset.cssModules = json;
            },
            Loader: createLoader(asset),
            generateScopedName: function generateScopedName(name, filename) {
              return "_".concat(name, "_").concat(md5(filename).substr(0, 5));
            }
          };

          if (config.plugins && config.plugins['postcss-modules']) {
            postcssModulesConfig = Object.assign(postcssModulesConfig, config.plugins['postcss-modules']);
            delete config.plugins['postcss-modules'];
          }

          _context2.next = 14;
          return regeneratorRuntime.awrap(loadPlugins(config.plugins, asset.name));

        case 14:
          config.plugins = _context2.sent;

          if (!(config.modules || enableModules)) {
            _context2.next = 20;
            break;
          }

          _context2.next = 18;
          return regeneratorRuntime.awrap(localRequire('postcss-modules', asset.name));

        case 18:
          postcssModules = _context2.sent;
          config.plugins.push(postcssModules(postcssModulesConfig));

        case 20:
          if (!asset.options.minify) {
            _context2.next = 38;
            break;
          }

          _context2.next = 23;
          return regeneratorRuntime.awrap(localRequire('cssnano', asset.name));

        case 23:
          cssnano = _context2.sent;
          _context2.next = 26;
          return regeneratorRuntime.awrap(localRequire('cssnano/package.json', asset.name));

        case 26:
          _ref = _context2.sent;
          version = _ref.version;
          _context2.t0 = config.plugins;
          _context2.t1 = cssnano;
          _context2.next = 32;
          return regeneratorRuntime.awrap(asset.getConfig(['cssnano.config.js']));

        case 32:
          _context2.t2 = _context2.sent;

          if (_context2.t2) {
            _context2.next = 35;
            break;
          }

          _context2.t2 = {
            // Only enable safe css transforms if cssnano < 4
            // See: https://github.com/parcel-bundler/parcel/issues/698
            // See: https://github.com/ben-eb/cssnano/releases/tag/v4.0.0-rc.0
            safe: semver.satisfies(version, '<4.0.0-rc')
          };

        case 35:
          _context2.t3 = _context2.t2;
          _context2.t4 = (0, _context2.t1)(_context2.t3);

          _context2.t0.push.call(_context2.t0, _context2.t4);

        case 38:
          config.from = asset.name;
          config.to = asset.name;
          return _context2.abrupt("return", config);

        case 41:
        case "end":
          return _context2.stop();
      }
    }
  });
}

var createLoader = function createLoader(asset) {
  return (
    /*#__PURE__*/
    function (_FileSystemLoader) {
      _inherits(ParcelFileSystemLoader, _FileSystemLoader);

      function ParcelFileSystemLoader() {
        _classCallCheck(this, ParcelFileSystemLoader);

        return _possibleConstructorReturn(this, _getPrototypeOf(ParcelFileSystemLoader).apply(this, arguments));
      }

      _createClass(ParcelFileSystemLoader, [{
        key: "fetch",
        value: function fetch(composesPath, relativeTo) {
          var importPath, _asset$resolveDepende, resolved, rootRelativePath, root, source, _ref2, exportTokens;

          return regeneratorRuntime.async(function fetch$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  importPath = composesPath.replace(/^["']|["']$/g, '');
                  _asset$resolveDepende = asset.resolveDependency(importPath, relativeTo), resolved = _asset$resolveDepende.resolved;
                  rootRelativePath = path.resolve(path.dirname(relativeTo), resolved);
                  root = path.resolve('/'); // fixes an issue on windows which is part of the css-modules-loader-core
                  // see https://github.com/css-modules/css-modules-loader-core/issues/230

                  if (rootRelativePath.startsWith(root)) {
                    rootRelativePath = rootRelativePath.substr(root.length);
                  }

                  _context3.next = 7;
                  return regeneratorRuntime.awrap(fs.readFile(resolved, 'utf-8'));

                case 7:
                  source = _context3.sent;
                  _context3.next = 10;
                  return regeneratorRuntime.awrap(this.core.load(source, rootRelativePath, undefined, this.fetch.bind(this)));

                case 10:
                  _ref2 = _context3.sent;
                  exportTokens = _ref2.exportTokens;
                  return _context3.abrupt("return", exportTokens);

                case 13:
                case "end":
                  return _context3.stop();
              }
            }
          }, null, this);
        }
      }, {
        key: "finalSource",
        get: function get() {
          return '';
        }
      }]);

      return ParcelFileSystemLoader;
    }(FileSystemLoader)
  );
};