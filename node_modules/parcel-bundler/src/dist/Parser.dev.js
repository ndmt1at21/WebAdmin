"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require('path');

var logger = require('@parcel/logger');

var RawAsset = require('./assets/RawAsset');

var GlobAsset = require('./assets/GlobAsset');

var _require = require('./utils/glob'),
    isGlob = _require.isGlob;

var Parser =
/*#__PURE__*/
function () {
  function Parser() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Parser);

    this.extensions = {};
    this.registerExtension('js', './assets/JSAsset');
    this.registerExtension('jsx', './assets/JSAsset');
    this.registerExtension('es6', './assets/JSAsset');
    this.registerExtension('jsm', './assets/JSAsset');
    this.registerExtension('mjs', './assets/JSAsset');
    this.registerExtension('ml', './assets/ReasonAsset');
    this.registerExtension('re', './assets/ReasonAsset');
    this.registerExtension('ts', './assets/TypeScriptAsset');
    this.registerExtension('tsx', './assets/TypeScriptAsset');
    this.registerExtension('coffee', './assets/CoffeeScriptAsset');
    this.registerExtension('elm', './assets/ElmAsset');
    this.registerExtension('vue', './assets/VueAsset');
    this.registerExtension('json', './assets/JSONAsset');
    this.registerExtension('json5', './assets/JSONAsset');
    this.registerExtension('jsonld', './assets/JSONLDAsset');
    this.registerExtension('yaml', './assets/YAMLAsset');
    this.registerExtension('yml', './assets/YAMLAsset');
    this.registerExtension('toml', './assets/TOMLAsset');
    this.registerExtension('gql', './assets/GraphqlAsset');
    this.registerExtension('graphql', './assets/GraphqlAsset');
    this.registerExtension('kt', './assets/KotlinAsset');
    this.registerExtension('css', './assets/CSSAsset');
    this.registerExtension('pcss', './assets/CSSAsset');
    this.registerExtension('postcss', './assets/CSSAsset');
    this.registerExtension('sss', './assets/SSSAsset');
    this.registerExtension('styl', './assets/StylusAsset');
    this.registerExtension('stylus', './assets/StylusAsset');
    this.registerExtension('less', './assets/LESSAsset');
    this.registerExtension('sass', './assets/SASSAsset');
    this.registerExtension('scss', './assets/SASSAsset');
    this.registerExtension('html', './assets/HTMLAsset');
    this.registerExtension('htm', './assets/HTMLAsset');
    this.registerExtension('rs', './assets/RustAsset');
    this.registerExtension('webmanifest', './assets/WebManifestAsset');
    this.registerExtension('glsl', './assets/GLSLAsset');
    this.registerExtension('vert', './assets/GLSLAsset');
    this.registerExtension('frag', './assets/GLSLAsset');
    this.registerExtension('jade', './assets/PugAsset');
    this.registerExtension('pug', './assets/PugAsset');
    this.registerExtension('md', './assets/MarkdownAsset');
    var extensions = options.extensions || {};

    for (var ext in extensions) {
      this.registerExtension(ext, extensions[ext]);
    }
  }

  _createClass(Parser, [{
    key: "registerExtension",
    value: function registerExtension(ext, parser) {
      if (!ext.startsWith('.')) {
        ext = '.' + ext;
      }

      this.extensions[ext.toLowerCase()] = parser;
    }
  }, {
    key: "findParser",
    value: function findParser(filename, fromPipeline) {
      if (!fromPipeline && isGlob(filename)) {
        return GlobAsset;
      }

      var extension = path.extname(filename).toLowerCase();
      var parser = this.extensions[extension] || RawAsset;

      if (typeof parser === 'string') {
        try {
          parser = this.extensions[extension] = require(parser);
        } catch (err) {
          var relFilename = path.relative(process.cwd(), filename);
          var relParserName = path.relative(process.cwd(), parser);

          if (relParserName.slice(0, 12) === 'node_modules') {
            relParserName = relParserName.slice(13);
          }

          logger.warn("Parser \"".concat(relParserName, "\" failed to initialize when processing ") + "asset \"".concat(relFilename, "\". Threw the following error:\n") + "".concat(err.stack || err.message || err, " falling back to RawAsset"));
          return RawAsset;
        }
      }

      return parser;
    }
  }, {
    key: "getAsset",
    value: function getAsset(filename) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var Asset = this.findParser(filename);
      options.parser = this;
      return new Asset(filename, options);
    }
  }]);

  return Parser;
}();

module.exports = Parser;