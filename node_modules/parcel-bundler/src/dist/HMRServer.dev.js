"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var http = require('http');

var https = require('https');

var WebSocket = require('ws');

var generateCertificate = require('./utils/generateCertificate');

var getCertificate = require('./utils/getCertificate');

var logger = require('@parcel/logger');

var HMRServer =
/*#__PURE__*/
function () {
  function HMRServer() {
    _classCallCheck(this, HMRServer);
  }

  _createClass(HMRServer, [{
    key: "start",
    value: function start() {
      var _this = this;

      var options,
          _args2 = arguments;
      return regeneratorRuntime.async(function start$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
              _context2.next = 3;
              return regeneratorRuntime.awrap(new Promise(function _callee(resolve) {
                var websocketOptions;
                return regeneratorRuntime.async(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (options.https) {
                          _context.next = 4;
                          break;
                        }

                        _this.server = http.createServer();
                        _context.next = 13;
                        break;

                      case 4:
                        if (!(typeof options.https === 'boolean')) {
                          _context.next = 8;
                          break;
                        }

                        _this.server = https.createServer(generateCertificate(options));
                        _context.next = 13;
                        break;

                      case 8:
                        _context.t0 = https;
                        _context.next = 11;
                        return regeneratorRuntime.awrap(getCertificate(options.https));

                      case 11:
                        _context.t1 = _context.sent;
                        _this.server = _context.t0.createServer.call(_context.t0, _context.t1);

                      case 13:
                        websocketOptions = {
                          server: _this.server
                        };

                        if (options.hmrHostname) {
                          websocketOptions.origin = "".concat(options.https ? 'https' : 'http', "://").concat(options.hmrHostname);
                        }

                        _this.wss = new WebSocket.Server(websocketOptions);

                        _this.server.listen(options.hmrPort, resolve);

                      case 17:
                      case "end":
                        return _context.stop();
                    }
                  }
                });
              }));

            case 3:
              this.wss.on('connection', function (ws) {
                ws.onerror = _this.handleSocketError;

                if (_this.unresolvedError) {
                  ws.send(JSON.stringify(_this.unresolvedError));
                }
              });
              this.wss.on('error', this.handleSocketError);
              return _context2.abrupt("return", this.wss._server.address().port);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.wss.close();
      this.server.close();
    }
  }, {
    key: "emitError",
    value: function emitError(err) {
      var _logger$formatError = logger.formatError(err),
          message = _logger$formatError.message,
          stack = _logger$formatError.stack; // store the most recent error so we can notify new connections
      // and so we can broadcast when the error is resolved


      this.unresolvedError = {
        type: 'error',
        error: {
          message: message,
          stack: stack
        }
      };
      this.broadcast(this.unresolvedError);
    }
  }, {
    key: "emitUpdate",
    value: function emitUpdate(assets) {
      var reload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (this.unresolvedError) {
        this.unresolvedError = null;
        this.broadcast({
          type: 'error-resolved'
        });
      }

      var shouldReload = reload || assets.some(function (asset) {
        return asset.hmrPageReload;
      });

      if (shouldReload) {
        this.broadcast({
          type: 'reload'
        });
      } else {
        this.broadcast({
          type: 'update',
          assets: assets.map(function (asset) {
            var deps = {};
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = asset.depAssets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = _slicedToArray(_step.value, 2),
                    dep = _step$value[0],
                    depAsset = _step$value[1];

                deps[dep.name] = depAsset.id;
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            return {
              id: asset.id,
              type: asset.type,
              generated: asset.generated,
              deps: deps
            };
          })
        });
      }
    }
  }, {
    key: "handleSocketError",
    value: function handleSocketError(err) {
      if (err.error.code === 'ECONNRESET') {
        // This gets triggered on page refresh, ignore this
        return;
      }

      logger.warn(err);
    }
  }, {
    key: "broadcast",
    value: function broadcast(msg) {
      var json = JSON.stringify(msg);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.wss.clients[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var ws = _step2.value;
          ws.send(json);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }]);

  return HMRServer;
}();

module.exports = HMRServer;