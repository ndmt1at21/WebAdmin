"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require('@parcel/fs');

var Resolver = require('./Resolver');

var Parser = require('./Parser');

var WorkerFarm = require('@parcel/workers');

var Path = require('path');

var Bundle = require('./Bundle');

var Watcher = require('@parcel/watcher');

var FSCache = require('./FSCache');

var HMRServer = require('./HMRServer');

var Server = require('./Server');

var _require = require('events'),
    EventEmitter = _require.EventEmitter;

var logger = require('@parcel/logger');

var PackagerRegistry = require('./packagers');

var localRequire = require('./utils/localRequire');

var config = require('./utils/config');

var loadEnv = require('./utils/env');

var PromiseQueue = require('./utils/PromiseQueue');

var installPackage = require('./utils/installPackage');

var bundleReport = require('./utils/bundleReport');

var prettifyTime = require('./utils/prettifyTime');

var getRootDir = require('./utils/getRootDir');

var _require2 = require('./utils/glob'),
    glob = _require2.glob,
    isGlob = _require2.isGlob;
/**
 * The Bundler is the main entry point. It resolves and loads assets,
 * creates the bundle tree, and manages the worker farm, cache, and file watcher.
 */


var Bundler =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Bundler, _EventEmitter);

  function Bundler(entryFiles) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Bundler);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Bundler).call(this));
    entryFiles = _this.normalizeEntries(entryFiles);
    _this.watchedGlobs = entryFiles.filter(function (entry) {
      return isGlob(entry);
    });
    _this.entryFiles = _this.findEntryFiles(entryFiles);
    _this.options = _this.normalizeOptions(options);
    _this.resolver = new Resolver(_this.options);
    _this.parser = new Parser(_this.options);
    _this.packagers = new PackagerRegistry(_this.options);
    _this.cache = _this.options.cache ? new FSCache(_this.options) : null;
    _this.delegate = options.delegate || {};
    _this.bundleLoaders = {};

    _this.addBundleLoader('wasm', {
      browser: require.resolve('./builtins/loaders/browser/wasm-loader'),
      node: require.resolve('./builtins/loaders/node/wasm-loader')
    });

    _this.addBundleLoader('css', {
      browser: require.resolve('./builtins/loaders/browser/css-loader'),
      node: require.resolve('./builtins/loaders/node/css-loader')
    });

    _this.addBundleLoader('js', {
      browser: require.resolve('./builtins/loaders/browser/js-loader'),
      node: require.resolve('./builtins/loaders/node/js-loader')
    });

    _this.addBundleLoader('html', {
      browser: require.resolve('./builtins/loaders/browser/html-loader'),
      node: require.resolve('./builtins/loaders/node/html-loader')
    });

    _this.pending = false;
    _this.loadedAssets = new Map();
    _this.watchedAssets = new Map();
    _this.farm = null;
    _this.watcher = null;
    _this.hmr = null;
    _this.bundleHashes = null;
    _this.error = null;
    _this.buildQueue = new PromiseQueue(_this.processAsset.bind(_assertThisInitialized(_this)));
    _this.rebuildTimeout = null;
    logger.setOptions(_this.options);
    return _this;
  }

  _createClass(Bundler, [{
    key: "normalizeEntries",
    value: function normalizeEntries(entryFiles) {
      // Support passing a single file
      if (entryFiles && !Array.isArray(entryFiles)) {
        entryFiles = [entryFiles];
      } // If no entry files provided, resolve the entry point from the current directory.


      if (!entryFiles || entryFiles.length === 0) {
        entryFiles = [process.cwd()];
      }

      return entryFiles;
    }
  }, {
    key: "findEntryFiles",
    value: function findEntryFiles(entryFiles) {
      // Match files as globs
      return entryFiles.reduce(function (p, m) {
        return p.concat(glob.sync(m));
      }, []).map(function (f) {
        return Path.resolve(f);
      });
    }
  }, {
    key: "normalizeOptions",
    value: function normalizeOptions(options) {
      var isProduction = options.production || process.env.NODE_ENV === 'production';
      var publicURL = options.publicUrl || options.publicURL || '/';
      var watch = typeof options.watch === 'boolean' ? options.watch : !isProduction;
      var target = options.target || 'browser';
      var hmr = target === 'node' ? false : typeof options.hmr === 'boolean' ? options.hmr : watch;
      var scopeHoist = options.scopeHoist !== undefined ? options.scopeHoist : false;
      return {
        production: isProduction,
        outDir: Path.resolve(options.outDir || 'dist'),
        outFile: options.outFile || '',
        publicURL: publicURL,
        watch: watch,
        cache: typeof options.cache === 'boolean' ? options.cache : true,
        cacheDir: Path.resolve(options.cacheDir || '.cache'),
        killWorkers: typeof options.killWorkers === 'boolean' ? options.killWorkers : true,
        minify: typeof options.minify === 'boolean' ? options.minify : isProduction,
        target: target,
        bundleNodeModules: typeof options.bundleNodeModules === 'boolean' ? options.bundleNodeModules : target === 'browser',
        hmr: hmr,
        https: options.https || false,
        logLevel: isNaN(options.logLevel) ? 3 : options.logLevel,
        entryFiles: this.entryFiles,
        hmrPort: options.hmrPort || 0,
        rootDir: getRootDir(this.entryFiles),
        sourceMaps: (typeof options.sourceMaps === 'boolean' ? options.sourceMaps : true) && !scopeHoist,
        hmrHostname: options.hmrHostname || options.host || (options.target === 'electron' ? 'localhost' : ''),
        detailedReport: options.detailedReport || false,
        global: options.global,
        autoinstall: typeof options.autoInstall === 'boolean' ? options.autoInstall : process.env.PARCEL_AUTOINSTALL === 'false' ? false : !isProduction,
        scopeHoist: scopeHoist,
        contentHash: typeof options.contentHash === 'boolean' ? options.contentHash : isProduction,
        throwErrors: typeof options.throwErrors === 'boolean' ? options.throwErrors : true
      };
    }
  }, {
    key: "addAssetType",
    value: function addAssetType(extension, path) {
      if (typeof path !== 'string') {
        throw new Error('Asset type should be a module path.');
      }

      if (this.farm) {
        throw new Error('Asset types must be added before bundling.');
      }

      this.parser.registerExtension(extension, path);
    }
  }, {
    key: "addPackager",
    value: function addPackager(type, packager) {
      if (this.farm) {
        throw new Error('Packagers must be added before bundling.');
      }

      this.packagers.add(type, packager);
    }
  }, {
    key: "addBundleLoader",
    value: function addBundleLoader(type, paths) {
      if (typeof paths === 'string') {
        paths = {
          node: paths,
          browser: paths
        };
      } else if (_typeof(paths) !== 'object') {
        throw new Error('Bundle loaders should be an object.');
      }

      for (var target in paths) {
        if (target !== 'node' && target !== 'browser') {
          throw new Error("Unknown bundle loader target \"".concat(target, "\"."));
        }

        if (typeof paths[target] !== 'string') {
          throw new Error('Bundle loader should be a string.');
        }
      }

      if (this.farm) {
        throw new Error('Bundle loaders must be added before bundling.');
      }

      this.bundleLoaders[type] = paths;
    }
  }, {
    key: "loadPlugins",
    value: function loadPlugins() {
      var relative, pkg, lastDep, deps, dep, pattern, plugin;
      return regeneratorRuntime.async(function loadPlugins$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              relative = Path.join(this.options.rootDir, 'index');
              _context.next = 3;
              return regeneratorRuntime.awrap(config.load(relative, ['package.json']));

            case 3:
              pkg = _context.sent;

              if (pkg) {
                _context.next = 6;
                break;
              }

              return _context.abrupt("return");

            case 6:
              _context.prev = 6;
              deps = Object.assign({}, pkg.dependencies, pkg.devDependencies);
              _context.t0 = regeneratorRuntime.keys(deps);

            case 9:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 21;
                break;
              }

              dep = _context.t1.value;
              lastDep = dep;
              pattern = /^(@.*\/)?parcel-plugin-.+/;

              if (!pattern.test(dep)) {
                _context.next = 19;
                break;
              }

              _context.next = 16;
              return regeneratorRuntime.awrap(localRequire(dep, relative));

            case 16:
              plugin = _context.sent;
              _context.next = 19;
              return regeneratorRuntime.awrap(plugin(this));

            case 19:
              _context.next = 9;
              break;

            case 21:
              _context.next = 26;
              break;

            case 23:
              _context.prev = 23;
              _context.t2 = _context["catch"](6);
              logger.warn("Plugin ".concat(lastDep, " failed to initialize: ").concat(_context.t2.stack || _context.t2.message || _context.t2));

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[6, 23]]);
    }
  }, {
    key: "bundle",
    value: function bundle() {
      var _this2 = this;

      var isInitialBundle, startTime, initialised, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry, asset, loadedAssets, changedAssets, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _asset, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _asset2, numBundles, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _asset3, bundlesChanged, buildTime, time;

      return regeneratorRuntime.async(function bundle$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.pending) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", new Promise(function (resolve, reject) {
                _this2.once('buildEnd', function () {
                  _this2.bundle().then(resolve, reject);
                });
              }));

            case 2:
              isInitialBundle = !this.entryAssets;
              startTime = Date.now();
              initialised = !isInitialBundle;
              this.pending = true;
              this.error = null;
              logger.clear();
              logger.progress('Building...');
              _context2.prev = 9;
              _context2.next = 12;
              return regeneratorRuntime.awrap(this.start());

            case 12:
              // Emit start event, after bundler is initialised
              this.emit('buildStart', this.entryFiles); // If this is the initial bundle, ensure the output directory exists, and resolve the main asset.

              if (!isInitialBundle) {
                _context2.next = 55;
                break;
              }

              _context2.next = 16;
              return regeneratorRuntime.awrap(fs.mkdirp(this.options.outDir));

            case 16:
              this.entryAssets = new Set();
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context2.prev = 20;
              _iterator = this.entryFiles[Symbol.iterator]();

            case 22:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context2.next = 38;
                break;
              }

              entry = _step.value;
              _context2.prev = 24;
              _context2.next = 27;
              return regeneratorRuntime.awrap(this.resolveAsset(entry));

            case 27:
              asset = _context2.sent;
              this.buildQueue.add(asset);
              this.entryAssets.add(asset);
              _context2.next = 35;
              break;

            case 32:
              _context2.prev = 32;
              _context2.t0 = _context2["catch"](24);
              throw new Error("Cannot resolve entry \"".concat(entry, "\" from \"").concat(this.options.rootDir, "\""));

            case 35:
              _iteratorNormalCompletion = true;
              _context2.next = 22;
              break;

            case 38:
              _context2.next = 44;
              break;

            case 40:
              _context2.prev = 40;
              _context2.t1 = _context2["catch"](20);
              _didIteratorError = true;
              _iteratorError = _context2.t1;

            case 44:
              _context2.prev = 44;
              _context2.prev = 45;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 47:
              _context2.prev = 47;

              if (!_didIteratorError) {
                _context2.next = 50;
                break;
              }

              throw _iteratorError;

            case 50:
              return _context2.finish(47);

            case 51:
              return _context2.finish(44);

            case 52:
              if (!(this.entryAssets.size === 0)) {
                _context2.next = 54;
                break;
              }

              throw new Error('No entries found.');

            case 54:
              initialised = true;

            case 55:
              _context2.next = 57;
              return regeneratorRuntime.awrap(this.buildQueue.run());

            case 57:
              loadedAssets = _context2.sent;
              // The changed assets are any that don't have a parent bundle yet
              // plus the ones that were in the build queue.
              changedAssets = [].concat(_toConsumableArray(this.findOrphanAssets()), _toConsumableArray(loadedAssets)); // Invalidate bundles

              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 62;

              for (_iterator2 = this.loadedAssets.values()[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                _asset = _step2.value;

                _asset.invalidateBundle();
              }

              _context2.next = 70;
              break;

            case 66:
              _context2.prev = 66;
              _context2.t2 = _context2["catch"](62);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t2;

            case 70:
              _context2.prev = 70;
              _context2.prev = 71;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 73:
              _context2.prev = 73;

              if (!_didIteratorError2) {
                _context2.next = 76;
                break;
              }

              throw _iteratorError2;

            case 76:
              return _context2.finish(73);

            case 77:
              return _context2.finish(70);

            case 78:
              logger.progress("Producing bundles..."); // Create a root bundle to hold all of the entry assets, and add them to the tree.

              this.mainBundle = new Bundle();
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context2.prev = 83;

              for (_iterator3 = this.entryAssets[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                _asset2 = _step3.value;
                this.createBundleTree(_asset2, this.mainBundle);
              } // If there is only one child bundle, replace the root with that bundle.


              _context2.next = 91;
              break;

            case 87:
              _context2.prev = 87;
              _context2.t3 = _context2["catch"](83);
              _didIteratorError3 = true;
              _iteratorError3 = _context2.t3;

            case 91:
              _context2.prev = 91;
              _context2.prev = 92;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 94:
              _context2.prev = 94;

              if (!_didIteratorError3) {
                _context2.next = 97;
                break;
              }

              throw _iteratorError3;

            case 97:
              return _context2.finish(94);

            case 98:
              return _context2.finish(91);

            case 99:
              if (this.mainBundle.childBundles.size === 1) {
                this.mainBundle = Array.from(this.mainBundle.childBundles)[0];
              } // Generate the final bundle names, and replace references in the built assets.


              numBundles = this.bundleNameMap ? this.bundleNameMap.size : 0;
              this.bundleNameMap = this.mainBundle.getBundleNameMap(this.options.contentHash);
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context2.prev = 105;

              for (_iterator4 = changedAssets[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                _asset3 = _step4.value;

                _asset3.replaceBundleNames(this.bundleNameMap);
              } // Emit an HMR update if this is not the initial bundle.


              _context2.next = 113;
              break;

            case 109:
              _context2.prev = 109;
              _context2.t4 = _context2["catch"](105);
              _didIteratorError4 = true;
              _iteratorError4 = _context2.t4;

            case 113:
              _context2.prev = 113;
              _context2.prev = 114;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 116:
              _context2.prev = 116;

              if (!_didIteratorError4) {
                _context2.next = 119;
                break;
              }

              throw _iteratorError4;

            case 119:
              return _context2.finish(116);

            case 120:
              return _context2.finish(113);

            case 121:
              bundlesChanged = numBundles !== this.bundleNameMap.size;

              if (this.hmr && !isInitialBundle) {
                this.hmr.emitUpdate(changedAssets, bundlesChanged);
              }

              logger.progress("Packaging..."); // Package everything up

              _context2.next = 126;
              return regeneratorRuntime.awrap(this.mainBundle["package"](this, bundlesChanged ? null : this.bundleHashes));

            case 126:
              this.bundleHashes = _context2.sent;
              // Unload any orphaned assets
              this.unloadOrphanedAssets();
              buildTime = Date.now() - startTime;
              time = prettifyTime(buildTime);
              logger.success("Built in ".concat(time, "."));

              if (!this.watcher) {
                bundleReport(this.mainBundle, this.options.detailedReport);
              }

              this.emit('bundled', this.mainBundle);
              return _context2.abrupt("return", this.mainBundle);

            case 136:
              _context2.prev = 136;
              _context2.t5 = _context2["catch"](9);
              this.error = _context2.t5;
              logger.error(_context2.t5);
              this.emit('buildError', _context2.t5);

              if (this.hmr) {
                this.hmr.emitError(_context2.t5);
              }

              if (!(this.options.throwErrors && !this.hmr)) {
                _context2.next = 146;
                break;
              }

              throw _context2.t5;

            case 146:
              if (!(!this.options.watch || !initialised)) {
                _context2.next = 150;
                break;
              }

              _context2.next = 149;
              return regeneratorRuntime.awrap(this.stop());

            case 149:
              process.exit(1);

            case 150:
              _context2.prev = 150;
              this.pending = false;
              this.emit('buildEnd'); // If not in watch mode, stop the worker farm so we don't keep the process running.

              if (!(!this.watcher && this.options.killWorkers)) {
                _context2.next = 156;
                break;
              }

              _context2.next = 156;
              return regeneratorRuntime.awrap(this.stop());

            case 156:
              return _context2.finish(150);

            case 157:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[9, 136, 150, 157], [20, 40, 44, 52], [24, 32], [45,, 47, 51], [62, 66, 70, 78], [71,, 73, 77], [83, 87, 91, 99], [92,, 94, 98], [105, 109, 113, 121], [114,, 116, 120]]);
    }
  }, {
    key: "start",
    value: function start() {
      var _this3 = this;

      return regeneratorRuntime.async(function start$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!this.farm) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return");

            case 2:
              _context3.next = 4;
              return regeneratorRuntime.awrap(this.loadPlugins());

            case 4:
              if (this.options.env) {
                _context3.next = 8;
                break;
              }

              _context3.next = 7;
              return regeneratorRuntime.awrap(loadEnv(Path.join(this.options.rootDir, 'index')));

            case 7:
              this.options.env = process.env;

            case 8:
              this.options.extensions = Object.assign({}, this.parser.extensions);
              this.options.bundleLoaders = this.bundleLoaders;

              if (!this.options.watch) {
                _context3.next = 19;
                break;
              }

              this.watcher = new Watcher(); // Wait for ready event for reliable testing on watcher

              if (!(process.env.NODE_ENV === 'test' && !this.watcher.ready)) {
                _context3.next = 15;
                break;
              }

              _context3.next = 15;
              return regeneratorRuntime.awrap(new Promise(function (resolve) {
                return _this3.watcher.once('ready', resolve);
              }));

            case 15:
              this.watchedGlobs.forEach(function (glob) {
                _this3.watcher.add(glob);
              });
              this.watcher.on('add', this.onAdd.bind(this));
              this.watcher.on('change', this.onChange.bind(this));
              this.watcher.on('unlink', this.onUnlink.bind(this));

            case 19:
              if (!this.options.hmr) {
                _context3.next = 24;
                break;
              }

              this.hmr = new HMRServer();
              _context3.next = 23;
              return regeneratorRuntime.awrap(this.hmr.start(this.options));

            case 23:
              this.options.hmrPort = _context3.sent;

            case 24:
              _context3.next = 26;
              return regeneratorRuntime.awrap(WorkerFarm.getShared(this.options, {
                workerPath: require.resolve('./worker.js')
              }));

            case 26:
              this.farm = _context3.sent;

            case 27:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "stop",
    value: function stop() {
      return regeneratorRuntime.async(function stop$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!this.watcher) {
                _context4.next = 3;
                break;
              }

              _context4.next = 3;
              return regeneratorRuntime.awrap(this.watcher.stop());

            case 3:
              if (this.hmr) {
                this.hmr.stop();
              } // Watcher and hmr can cause workerfarm calls
              // keep this as last to prevent unwanted errors


              if (!this.farm) {
                _context4.next = 7;
                break;
              }

              _context4.next = 7;
              return regeneratorRuntime.awrap(this.farm.end());

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getAsset",
    value: function getAsset(name, parent) {
      var asset;
      return regeneratorRuntime.async(function getAsset$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return regeneratorRuntime.awrap(this.resolveAsset(name, parent));

            case 2:
              asset = _context5.sent;
              this.buildQueue.add(asset);
              _context5.next = 6;
              return regeneratorRuntime.awrap(this.buildQueue.run());

            case 6:
              return _context5.abrupt("return", asset);

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "resolveAsset",
    value: function resolveAsset(name, parent) {
      var _ref, path;

      return regeneratorRuntime.async(function resolveAsset$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return regeneratorRuntime.awrap(this.resolver.resolve(name, parent));

            case 2:
              _ref = _context6.sent;
              path = _ref.path;
              return _context6.abrupt("return", this.getLoadedAsset(path));

            case 5:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getLoadedAsset",
    value: function getLoadedAsset(path) {
      if (this.loadedAssets.has(path)) {
        return this.loadedAssets.get(path);
      }

      var asset = this.parser.getAsset(path, this.options);
      this.loadedAssets.set(path, asset);
      this.watch(path, asset);
      return asset;
    }
  }, {
    key: "watch",
    value: function watch(path, asset) {
      return regeneratorRuntime.async(function watch$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (this.watcher) {
                _context7.next = 2;
                break;
              }

              return _context7.abrupt("return");

            case 2:
              _context7.next = 4;
              return regeneratorRuntime.awrap(fs.realpath(path));

            case 4:
              path = _context7.sent;

              if (!this.watchedAssets.has(path)) {
                this.watcher.watch(path);
                this.watchedAssets.set(path, new Set());
              }

              this.watchedAssets.get(path).add(asset);

            case 7:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "unwatch",
    value: function unwatch(path, asset) {
      var watched;
      return regeneratorRuntime.async(function unwatch$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return regeneratorRuntime.awrap(fs.realpath(path));

            case 2:
              path = _context8.sent;

              if (this.watchedAssets.has(path)) {
                _context8.next = 5;
                break;
              }

              return _context8.abrupt("return");

            case 5:
              watched = this.watchedAssets.get(path);
              watched["delete"](asset);

              if (watched.size === 0) {
                this.watchedAssets["delete"](path);
                this.watcher.unwatch(path);
              }

            case 8:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "resolveDep",
    value: function resolveDep(asset, dep) {
      var install,
          isLocalFile,
          fromNodeModules,
          absPath,
          _args9 = arguments;
      return regeneratorRuntime.async(function resolveDep$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              install = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : true;
              _context9.prev = 1;

              if (!dep.resolved) {
                _context9.next = 4;
                break;
              }

              return _context9.abrupt("return", this.getLoadedAsset(dep.resolved));

            case 4:
              _context9.next = 6;
              return regeneratorRuntime.awrap(this.resolveAsset(dep.name, asset.name));

            case 6:
              return _context9.abrupt("return", _context9.sent);

            case 9:
              _context9.prev = 9;
              _context9.t0 = _context9["catch"](1);

              if (!dep.optional) {
                _context9.next = 13;
                break;
              }

              return _context9.abrupt("return");

            case 13:
              if (!(_context9.t0.code === 'MODULE_NOT_FOUND')) {
                _context9.next = 22;
                break;
              }

              isLocalFile = /^[/~.]/.test(dep.name);
              fromNodeModules = asset.name.includes("".concat(Path.sep, "node_modules").concat(Path.sep));

              if (!(!isLocalFile && !fromNodeModules && this.options.autoinstall && install)) {
                _context9.next = 18;
                break;
              }

              return _context9.abrupt("return", this.installDep(asset, dep));

            case 18:
              _context9.t0.message = "Cannot resolve dependency '".concat(dep.name, "'");

              if (isLocalFile) {
                absPath = Path.resolve(Path.dirname(asset.name), dep.name);
                _context9.t0.message += " at '".concat(absPath, "'");
              }

              _context9.next = 22;
              return regeneratorRuntime.awrap(this.throwDepError(asset, dep, _context9.t0));

            case 22:
              throw _context9.t0;

            case 23:
            case "end":
              return _context9.stop();
          }
        }
      }, null, this, [[1, 9]]);
    }
  }, {
    key: "installDep",
    value: function installDep(asset, dep) {
      var resolved;
      return regeneratorRuntime.async(function installDep$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return regeneratorRuntime.awrap(this.resolver.resolveModule(dep.name, asset.name));

            case 2:
              resolved = _context10.sent;

              if (!(resolved.moduleName && !resolved.moduleDir)) {
                _context10.next = 13;
                break;
              }

              _context10.prev = 4;
              _context10.next = 7;
              return regeneratorRuntime.awrap(installPackage(resolved.moduleName, asset.name, {
                saveDev: false
              }));

            case 7:
              _context10.next = 13;
              break;

            case 9:
              _context10.prev = 9;
              _context10.t0 = _context10["catch"](4);
              _context10.next = 13;
              return regeneratorRuntime.awrap(this.throwDepError(asset, dep, _context10.t0));

            case 13:
              return _context10.abrupt("return", this.resolveDep(asset, dep, false));

            case 14:
            case "end":
              return _context10.stop();
          }
        }
      }, null, this, [[4, 9]]);
    }
  }, {
    key: "throwDepError",
    value: function throwDepError(asset, dep, err) {
      return regeneratorRuntime.async(function throwDepError$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              if (!dep.loc) {
                _context11.next = 5;
                break;
              }

              _context11.next = 3;
              return regeneratorRuntime.awrap(asset.loadIfNeeded());

            case 3:
              err.loc = dep.loc;
              err = asset.generateErrorMessage(err);

            case 5:
              err.fileName = asset.name;
              throw err;

            case 7:
            case "end":
              return _context11.stop();
          }
        }
      });
    }
  }, {
    key: "processAsset",
    value: function processAsset(asset, isRebuild) {
      return regeneratorRuntime.async(function processAsset$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              if (isRebuild) {
                asset.invalidate();

                if (this.cache) {
                  this.cache.invalidate(asset.name);
                }
              }

              _context12.next = 3;
              return regeneratorRuntime.awrap(this.loadAsset(asset));

            case 3:
            case "end":
              return _context12.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "loadAsset",
    value: function loadAsset(asset) {
      var _this4 = this;

      var processed, cacheMiss, dependencies, implicitDeps, assetDeps;
      return regeneratorRuntime.async(function loadAsset$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              if (!asset.processed) {
                _context14.next = 2;
                break;
              }

              return _context14.abrupt("return");

            case 2:
              if (!this.error) {
                logger.progress("Building ".concat(asset.basename, "..."));
              } // Mark the asset processed so we don't load it twice


              asset.processed = true; // First try the cache, otherwise load and compile in the background

              asset.startTime = Date.now();
              _context14.t0 = this.cache;

              if (!_context14.t0) {
                _context14.next = 10;
                break;
              }

              _context14.next = 9;
              return regeneratorRuntime.awrap(this.cache.read(asset.name));

            case 9:
              _context14.t0 = _context14.sent;

            case 10:
              processed = _context14.t0;
              cacheMiss = false;

              if (!(!processed || asset.shouldInvalidate(processed.cacheData))) {
                _context14.next = 17;
                break;
              }

              _context14.next = 15;
              return regeneratorRuntime.awrap(this.farm.run(asset.name));

            case 15:
              processed = _context14.sent;
              cacheMiss = true;

            case 17:
              asset.endTime = Date.now();
              asset.buildTime = asset.endTime - asset.startTime;
              asset.id = processed.id;
              asset.generated = processed.generated;
              asset.sourceMaps = processed.sourceMaps;
              asset.hash = processed.hash;
              asset.cacheData = processed.cacheData; // Call the delegate to get implicit dependencies

              dependencies = processed.dependencies;

              if (!this.delegate.getImplicitDependencies) {
                _context14.next = 30;
                break;
              }

              _context14.next = 28;
              return regeneratorRuntime.awrap(this.delegate.getImplicitDependencies(asset));

            case 28:
              implicitDeps = _context14.sent;

              if (implicitDeps) {
                dependencies = dependencies.concat(implicitDeps);
              }

            case 30:
              _context14.next = 32;
              return regeneratorRuntime.awrap(Promise.all(dependencies.map(function _callee(dep) {
                var assetDep;
                return regeneratorRuntime.async(function _callee$(_context13) {
                  while (1) {
                    switch (_context13.prev = _context13.next) {
                      case 0:
                        if (!dep.includedInParent) {
                          _context13.next = 4;
                          break;
                        }

                        // This dependency is already included in the parent's generated output,
                        // so no need to load it. We map the name back to the parent asset so
                        // that changing it triggers a recompile of the parent.
                        _this4.watch(dep.name, asset);

                        _context13.next = 12;
                        break;

                      case 4:
                        dep.parent = asset.name;
                        _context13.next = 7;
                        return regeneratorRuntime.awrap(_this4.resolveDep(asset, dep));

                      case 7:
                        assetDep = _context13.sent;

                        if (!assetDep) {
                          _context13.next = 11;
                          break;
                        }

                        _context13.next = 11;
                        return regeneratorRuntime.awrap(_this4.loadAsset(assetDep));

                      case 11:
                        return _context13.abrupt("return", assetDep);

                      case 12:
                      case "end":
                        return _context13.stop();
                    }
                  }
                });
              })));

            case 32:
              assetDeps = _context14.sent;

              if (!(processed.error !== null)) {
                _context14.next = 35;
                break;
              }

              throw processed.error;

            case 35:
              // Store resolved assets in their original order
              dependencies.forEach(function (dep, i) {
                asset.dependencies.set(dep.name, dep);
                var assetDep = assetDeps[i];

                if (assetDep) {
                  asset.depAssets.set(dep, assetDep);
                  dep.resolved = assetDep.name;
                }
              });
              logger.verbose("Built ".concat(asset.relativeName, "..."));

              if (this.cache && cacheMiss) {
                this.cache.write(asset.name, processed);
              }

            case 38:
            case "end":
              return _context14.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "createBundleTree",
    value: function createBundleTree(asset, bundle, dep) {
      var parentBundles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Set();

      if (dep) {
        asset.parentDeps.add(dep);
      }

      if (asset.parentBundle && !bundle.isolated) {
        // If the asset is already in a bundle, it is shared. Move it to the lowest common ancestor.
        if (asset.parentBundle !== bundle) {
          var commonBundle = bundle.findCommonAncestor(asset.parentBundle); // If the common bundle's type matches the asset's, move the asset to the common bundle.
          // Otherwise, proceed with adding the asset to the new bundle below.

          if (asset.parentBundle.type === commonBundle.type) {
            this.moveAssetToBundle(asset, commonBundle);
            return;
          }
        } else {
          return;
        } // Detect circular bundles


        if (parentBundles.has(asset.parentBundle)) {
          return;
        }
      } // Skip this asset if it's already in the bundle.
      // Happens when circular dependencies are placed in an isolated bundle (e.g. a worker).


      if (bundle.isolated && bundle.assets.has(asset)) {
        return;
      }

      var isEntryAsset = asset.parentBundle && asset.parentBundle.entryAsset === asset; // If the asset generated a representation for the parent bundle type, and this
      // is not an async import, add it to the current bundle

      if (bundle.type && asset.generated[bundle.type] != null && !dep.dynamic) {
        bundle.addAsset(asset);
      }

      if (dep && dep.dynamic || !bundle.type) {
        // If the asset is already the entry asset of a bundle, don't create a duplicate.
        if (isEntryAsset) {
          return;
        } // Create a new bundle for dynamic imports


        bundle = bundle.createChildBundle(asset, dep);
      } else if (asset.type && !this.packagers.get(asset.type).shouldAddAsset(bundle, asset)) {
        // If the asset is already the entry asset of a bundle, don't create a duplicate.
        if (isEntryAsset) {
          return;
        } // No packager is available for this asset type, or the packager doesn't support
        // combining this asset into the bundle. Create a new bundle with only this asset.


        bundle = bundle.createSiblingBundle(asset, dep);
      } else {
        // Add the asset to the common bundle of the asset's type
        bundle.getSiblingBundle(asset.type).addAsset(asset);
      } // Add the asset to sibling bundles for each generated type


      if (asset.type && asset.generated[asset.type]) {
        for (var t in asset.generated) {
          if (asset.generated[t]) {
            bundle.getSiblingBundle(t).addAsset(asset);
          }
        }
      }

      asset.parentBundle = bundle;
      parentBundles.add(bundle);
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = asset.depAssets[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              _dep = _step5$value[0],
              assetDep = _step5$value[1];

          this.createBundleTree(assetDep, bundle, _dep, parentBundles);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      parentBundles["delete"](bundle);
      return bundle;
    }
  }, {
    key: "moveAssetToBundle",
    value: function moveAssetToBundle(asset, commonBundle) {
      // Never move the entry asset of a bundle, as it was explicitly requested to be placed in a separate bundle.
      if (asset.parentBundle.entryAsset === asset || asset.parentBundle === commonBundle) {
        return;
      }

      for (var _i2 = 0, _Array$from = Array.from(asset.bundles); _i2 < _Array$from.length; _i2++) {
        var bundle = _Array$from[_i2];

        if (!bundle.isolated) {
          bundle.removeAsset(asset);
        }

        commonBundle.getSiblingBundle(bundle.type).addAsset(asset);
      }

      var oldBundle = asset.parentBundle;
      asset.parentBundle = commonBundle; // Move all dependencies as well

      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = asset.depAssets.values()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var child = _step6.value;

          if (child.parentBundle === oldBundle) {
            this.moveAssetToBundle(child, commonBundle);
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  }, {
    key: "findOrphanAssets",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function findOrphanAssets() {
      var _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, asset;

      return regeneratorRuntime.wrap(function findOrphanAssets$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _iteratorNormalCompletion7 = true;
              _didIteratorError7 = false;
              _iteratorError7 = undefined;
              _context15.prev = 3;
              _iterator7 = this.loadedAssets.values()[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
                _context15.next = 13;
                break;
              }

              asset = _step7.value;

              if (asset.parentBundle) {
                _context15.next = 10;
                break;
              }

              _context15.next = 10;
              return asset;

            case 10:
              _iteratorNormalCompletion7 = true;
              _context15.next = 5;
              break;

            case 13:
              _context15.next = 19;
              break;

            case 15:
              _context15.prev = 15;
              _context15.t0 = _context15["catch"](3);
              _didIteratorError7 = true;
              _iteratorError7 = _context15.t0;

            case 19:
              _context15.prev = 19;
              _context15.prev = 20;

              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }

            case 22:
              _context15.prev = 22;

              if (!_didIteratorError7) {
                _context15.next = 25;
                break;
              }

              throw _iteratorError7;

            case 25:
              return _context15.finish(22);

            case 26:
              return _context15.finish(19);

            case 27:
            case "end":
              return _context15.stop();
          }
        }
      }, findOrphanAssets, this, [[3, 15, 19, 27], [20,, 22, 26]]);
    })
  }, {
    key: "unloadOrphanedAssets",
    value: function unloadOrphanedAssets() {
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = this.findOrphanAssets()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var asset = _step8.value;
          this.unloadAsset(asset);
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }
    }
  }, {
    key: "unloadAsset",
    value: function unloadAsset(asset) {
      this.loadedAssets["delete"](asset.name);

      if (this.watcher) {
        this.unwatch(asset.name, asset); // Unwatch all included dependencies that map to this asset

        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = asset.dependencies.values()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var dep = _step9.value;

            if (dep.includedInParent) {
              this.unwatch(dep.name, asset);
            }
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
              _iterator9["return"]();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }
      }
    }
  }, {
    key: "onAdd",
    value: function onAdd(path) {
      var asset;
      return regeneratorRuntime.async(function onAdd$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              path = Path.join(process.cwd(), path);
              asset = this.parser.getAsset(path, this.options);
              this.loadedAssets.set(path, asset);
              this.entryAssets.add(asset);
              _context16.next = 6;
              return regeneratorRuntime.awrap(this.watch(path, asset));

            case 6:
              this.onChange(path);

            case 7:
            case "end":
              return _context16.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "onChange",
    value: function onChange(path) {
      var _this5 = this;

      var assets, _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, asset;

      return regeneratorRuntime.async(function onChange$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              // The path to the newly-added items are not absolute.
              if (!Path.isAbsolute(path)) {
                path = Path.resolve(process.cwd(), path);
              }

              assets = this.watchedAssets.get(path);

              if (!(!assets || !assets.size)) {
                _context18.next = 4;
                break;
              }

              return _context18.abrupt("return");

            case 4:
              logger.clear();
              logger.progress("Building ".concat(Path.basename(path), "...")); // Add the asset to the rebuild queue, and reset the timeout.

              _iteratorNormalCompletion10 = true;
              _didIteratorError10 = false;
              _iteratorError10 = undefined;
              _context18.prev = 9;

              for (_iterator10 = assets[Symbol.iterator](); !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                asset = _step10.value;
                this.buildQueue.add(asset, true);
              }

              _context18.next = 17;
              break;

            case 13:
              _context18.prev = 13;
              _context18.t0 = _context18["catch"](9);
              _didIteratorError10 = true;
              _iteratorError10 = _context18.t0;

            case 17:
              _context18.prev = 17;
              _context18.prev = 18;

              if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                _iterator10["return"]();
              }

            case 20:
              _context18.prev = 20;

              if (!_didIteratorError10) {
                _context18.next = 23;
                break;
              }

              throw _iteratorError10;

            case 23:
              return _context18.finish(20);

            case 24:
              return _context18.finish(17);

            case 25:
              clearTimeout(this.rebuildTimeout);
              this.rebuildTimeout = setTimeout(function _callee2() {
                return regeneratorRuntime.async(function _callee2$(_context17) {
                  while (1) {
                    switch (_context17.prev = _context17.next) {
                      case 0:
                        _context17.next = 2;
                        return regeneratorRuntime.awrap(_this5.bundle());

                      case 2:
                      case "end":
                        return _context17.stop();
                    }
                  }
                });
              }, 100);

            case 27:
            case "end":
              return _context18.stop();
          }
        }
      }, null, this, [[9, 13, 17, 25], [18,, 20, 24]]);
    }
  }, {
    key: "onUnlink",
    value: function onUnlink(path) {
      var asset;
      return regeneratorRuntime.async(function onUnlink$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              // The path to the newly-added items are not absolute.
              if (!Path.isAbsolute(path)) {
                path = Path.resolve(process.cwd(), path);
              }

              asset = this.getLoadedAsset(path);
              this.entryAssets["delete"](asset);
              this.unloadAsset(asset);
              this.bundle();

            case 5:
            case "end":
              return _context19.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "middleware",
    value: function middleware() {
      this.bundle();
      return Server.middleware(this);
    }
  }, {
    key: "serve",
    value: function serve() {
      var port,
          https,
          host,
          _args20 = arguments;
      return regeneratorRuntime.async(function serve$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              port = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : 1234;
              https = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : false;
              host = _args20.length > 2 ? _args20[2] : undefined;
              _context20.next = 5;
              return regeneratorRuntime.awrap(Server.serve(this, port, host, https));

            case 5:
              this.server = _context20.sent;
              _context20.prev = 6;
              _context20.next = 9;
              return regeneratorRuntime.awrap(this.bundle());

            case 9:
              _context20.next = 13;
              break;

            case 11:
              _context20.prev = 11;
              _context20.t0 = _context20["catch"](6);

            case 13:
              return _context20.abrupt("return", this.server);

            case 14:
            case "end":
              return _context20.stop();
          }
        }
      }, null, this, [[6, 11]]);
    }
  }]);

  return Bundler;
}(EventEmitter);

module.exports = Bundler;
Bundler.Asset = require('./Asset');
Bundler.Packager = require('./packagers/Packager');