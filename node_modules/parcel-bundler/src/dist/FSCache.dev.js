"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('@parcel/fs');

var path = require('path');

var md5 = require('./utils/md5');

var objectHash = require('./utils/objectHash');

var pkg = require('../package.json');

var logger = require('@parcel/logger');

var _require = require('./utils/glob'),
    isGlob = _require.isGlob,
    glob = _require.glob; // These keys can affect the output, so if they differ, the cache should not match


var OPTION_KEYS = ['publicURL', 'minify', 'hmr', 'target', 'scopeHoist', 'sourceMaps'];

var FSCache =
/*#__PURE__*/
function () {
  function FSCache(options) {
    _classCallCheck(this, FSCache);

    this.dir = path.resolve(options.cacheDir || '.cache');
    this.dirExists = false;
    this.invalidated = new Set();
    this.optionsHash = objectHash(OPTION_KEYS.reduce(function (p, k) {
      return p[k] = options[k], p;
    }, {
      version: pkg.version
    }));
  }

  _createClass(FSCache, [{
    key: "ensureDirExists",
    value: function ensureDirExists() {
      var i;
      return regeneratorRuntime.async(function ensureDirExists$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.dirExists) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              _context.next = 4;
              return regeneratorRuntime.awrap(fs.mkdirp(this.dir));

            case 4:
              i = 0;

            case 5:
              if (!(i < 256)) {
                _context.next = 11;
                break;
              }

              _context.next = 8;
              return regeneratorRuntime.awrap(fs.mkdirp(path.join(this.dir, ('00' + i.toString(16)).slice(-2))));

            case 8:
              i++;
              _context.next = 5;
              break;

            case 11:
              this.dirExists = true;

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getCacheFile",
    value: function getCacheFile(filename) {
      var hash = md5(this.optionsHash + filename);
      return path.join(this.dir, hash.slice(0, 2), hash.slice(2) + '.json');
    }
  }, {
    key: "getLastModified",
    value: function getLastModified(filename) {
      var files;
      return regeneratorRuntime.async(function getLastModified$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!isGlob(filename)) {
                _context2.next = 8;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(glob(filename, {
                onlyFiles: true
              }));

            case 3:
              files = _context2.sent;
              _context2.next = 6;
              return regeneratorRuntime.awrap(Promise.all(files.map(function (file) {
                return fs.stat(file).then(function (_ref) {
                  var mtime = _ref.mtime;
                  return mtime.getTime();
                });
              })));

            case 6:
              _context2.t0 = function (a, b) {
                return Math.max(a, b);
              };

              return _context2.abrupt("return", _context2.sent.reduce(_context2.t0, 0));

            case 8:
              _context2.next = 10;
              return regeneratorRuntime.awrap(fs.stat(filename));

            case 10:
              return _context2.abrupt("return", _context2.sent.mtime.getTime());

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      });
    }
  }, {
    key: "writeDepMtimes",
    value: function writeDepMtimes(data) {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, dep;

      return regeneratorRuntime.async(function writeDepMtimes$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              // Write mtimes for each dependent file that is already compiled into this asset
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context3.prev = 3;
              _iterator = data.dependencies[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context3.next = 14;
                break;
              }

              dep = _step.value;

              if (!dep.includedInParent) {
                _context3.next = 11;
                break;
              }

              _context3.next = 10;
              return regeneratorRuntime.awrap(this.getLastModified(dep.name));

            case 10:
              dep.mtime = _context3.sent;

            case 11:
              _iteratorNormalCompletion = true;
              _context3.next = 5;
              break;

            case 14:
              _context3.next = 20;
              break;

            case 16:
              _context3.prev = 16;
              _context3.t0 = _context3["catch"](3);
              _didIteratorError = true;
              _iteratorError = _context3.t0;

            case 20:
              _context3.prev = 20;
              _context3.prev = 21;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 23:
              _context3.prev = 23;

              if (!_didIteratorError) {
                _context3.next = 26;
                break;
              }

              throw _iteratorError;

            case 26:
              return _context3.finish(23);

            case 27:
              return _context3.finish(20);

            case 28:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, [[3, 16, 20, 28], [21,, 23, 27]]);
    }
  }, {
    key: "write",
    value: function write(filename, data) {
      return regeneratorRuntime.async(function write$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              _context4.next = 3;
              return regeneratorRuntime.awrap(this.ensureDirExists());

            case 3:
              _context4.next = 5;
              return regeneratorRuntime.awrap(this.writeDepMtimes(data));

            case 5:
              _context4.next = 7;
              return regeneratorRuntime.awrap(fs.writeFile(this.getCacheFile(filename), JSON.stringify(data)));

            case 7:
              this.invalidated["delete"](filename);
              _context4.next = 13;
              break;

            case 10:
              _context4.prev = 10;
              _context4.t0 = _context4["catch"](0);
              logger.error("Error writing to cache: ".concat(_context4.t0.message));

            case 13:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[0, 10]]);
    }
  }, {
    key: "checkDepMtimes",
    value: function checkDepMtimes(data) {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, dep;

      return regeneratorRuntime.async(function checkDepMtimes$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              // Check mtimes for files that are already compiled into this asset
              // If any of them changed, invalidate.
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context5.prev = 3;
              _iterator2 = data.dependencies[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context5.next = 17;
                break;
              }

              dep = _step2.value;

              if (!dep.includedInParent) {
                _context5.next = 14;
                break;
              }

              _context5.next = 10;
              return regeneratorRuntime.awrap(this.getLastModified(dep.name));

            case 10:
              _context5.t0 = _context5.sent;
              _context5.t1 = dep.mtime;

              if (!(_context5.t0 > _context5.t1)) {
                _context5.next = 14;
                break;
              }

              return _context5.abrupt("return", false);

            case 14:
              _iteratorNormalCompletion2 = true;
              _context5.next = 5;
              break;

            case 17:
              _context5.next = 23;
              break;

            case 19:
              _context5.prev = 19;
              _context5.t2 = _context5["catch"](3);
              _didIteratorError2 = true;
              _iteratorError2 = _context5.t2;

            case 23:
              _context5.prev = 23;
              _context5.prev = 24;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 26:
              _context5.prev = 26;

              if (!_didIteratorError2) {
                _context5.next = 29;
                break;
              }

              throw _iteratorError2;

            case 29:
              return _context5.finish(26);

            case 30:
              return _context5.finish(23);

            case 31:
              return _context5.abrupt("return", true);

            case 32:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, [[3, 19, 23, 31], [24,, 26, 30]]);
    }
  }, {
    key: "read",
    value: function read(filename) {
      var cacheFile, stats, cacheStats, json, data;
      return regeneratorRuntime.async(function read$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              if (!this.invalidated.has(filename)) {
                _context6.next = 2;
                break;
              }

              return _context6.abrupt("return", null);

            case 2:
              cacheFile = this.getCacheFile(filename);
              _context6.prev = 3;
              _context6.next = 6;
              return regeneratorRuntime.awrap(fs.stat(filename));

            case 6:
              stats = _context6.sent;
              _context6.next = 9;
              return regeneratorRuntime.awrap(fs.stat(cacheFile));

            case 9:
              cacheStats = _context6.sent;

              if (!(stats.mtime > cacheStats.mtime)) {
                _context6.next = 12;
                break;
              }

              return _context6.abrupt("return", null);

            case 12:
              _context6.next = 14;
              return regeneratorRuntime.awrap(fs.readFile(cacheFile));

            case 14:
              json = _context6.sent;
              data = JSON.parse(json);
              _context6.next = 18;
              return regeneratorRuntime.awrap(this.checkDepMtimes(data));

            case 18:
              if (_context6.sent) {
                _context6.next = 20;
                break;
              }

              return _context6.abrupt("return", null);

            case 20:
              return _context6.abrupt("return", data);

            case 23:
              _context6.prev = 23;
              _context6.t0 = _context6["catch"](3);
              return _context6.abrupt("return", null);

            case 26:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this, [[3, 23]]);
    }
  }, {
    key: "invalidate",
    value: function invalidate(filename) {
      this.invalidated.add(filename);
    }
  }, {
    key: "delete",
    value: function _delete(filename) {
      return regeneratorRuntime.async(function _delete$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;
              _context7.next = 3;
              return regeneratorRuntime.awrap(fs.unlink(this.getCacheFile(filename)));

            case 3:
              this.invalidated["delete"](filename);
              _context7.next = 8;
              break;

            case 6:
              _context7.prev = 6;
              _context7.t0 = _context7["catch"](0);

            case 8:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this, [[0, 6]]);
    }
  }]);

  return FSCache;
}();

module.exports = FSCache;