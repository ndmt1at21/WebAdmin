"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Packager = require('./Packager');

var path = require('path');

var fs = require('@parcel/fs');

var RawPackager =
/*#__PURE__*/
function (_Packager) {
  _inherits(RawPackager, _Packager);

  function RawPackager() {
    _classCallCheck(this, RawPackager);

    return _possibleConstructorReturn(this, _getPrototypeOf(RawPackager).apply(this, arguments));
  }

  _createClass(RawPackager, [{
    key: "setup",
    // Override so we don't create a file for this bundle.
    // Each asset will be emitted as a separate file instead.
    value: function setup() {}
  }, {
    key: "addAsset",
    value: function addAsset(asset) {
      var contents;
      return regeneratorRuntime.async(function addAsset$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              contents = asset.generated[this.bundle.type];

              if (!(!contents || contents && contents.path)) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return regeneratorRuntime.awrap(fs.readFile(contents ? contents.path : asset.name));

            case 4:
              contents = _context.sent;

            case 5:
              if (!this.bundle.name.includes(path.sep)) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return regeneratorRuntime.awrap(fs.mkdirp(path.dirname(this.bundle.name)));

            case 8:
              this.size = contents.length;
              _context.next = 11;
              return regeneratorRuntime.awrap(fs.writeFile(this.bundle.name, contents));

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "getSize",
    value: function getSize() {
      return this.size || 0;
    }
  }, {
    key: "end",
    value: function end() {}
  }], [{
    key: "shouldAddAsset",
    value: function shouldAddAsset() {
      // We cannot combine multiple raw assets together - they should be written as separate bundles.
      return false;
    }
  }]);

  return RawPackager;
}(Packager);

module.exports = RawPackager;