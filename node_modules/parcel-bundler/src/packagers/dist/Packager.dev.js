"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('fs');

var _require = require('@parcel/utils'),
    promisify = _require.promisify;

var path = require('path');

var _require2 = require('@parcel/fs'),
    mkdirp = _require2.mkdirp;

var Packager =
/*#__PURE__*/
function () {
  function Packager(bundle, bundler) {
    _classCallCheck(this, Packager);

    this.bundle = bundle;
    this.bundler = bundler;
    this.options = bundler.options;
  }

  _createClass(Packager, [{
    key: "setup",
    value: function setup() {
      return regeneratorRuntime.async(function setup$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!this.bundle.name.includes(path.sep)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return regeneratorRuntime.awrap(mkdirp(path.dirname(this.bundle.name)));

            case 3:
              this.dest = fs.createWriteStream(this.bundle.name);
              this.dest.write = promisify(this.dest.write.bind(this.dest));
              this.dest.end = promisify(this.dest.end.bind(this.dest));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "write",
    value: function write(string) {
      return regeneratorRuntime.async(function write$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(this.dest.write(string));

            case 2:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "start",
    value: function start() {
      return regeneratorRuntime.async(function start$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
            case "end":
              return _context3.stop();
          }
        }
      });
    } // eslint-disable-next-line no-unused-vars

  }, {
    key: "addAsset",
    value: function addAsset(asset) {
      return regeneratorRuntime.async(function addAsset$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              throw new Error('Must be implemented by subclasses');

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      });
    }
  }, {
    key: "getSize",
    value: function getSize() {
      return this.dest.bytesWritten;
    }
  }, {
    key: "end",
    value: function end() {
      return regeneratorRuntime.async(function end$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return regeneratorRuntime.awrap(this.dest.end());

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    }
  }], [{
    key: "shouldAddAsset",
    value: function shouldAddAsset() {
      return true;
    }
  }]);

  return Packager;
}();

module.exports = Packager;