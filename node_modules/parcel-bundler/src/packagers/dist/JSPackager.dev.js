"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var path = require('path');

var Packager = require('./Packager');

var getExisting = require('../utils/getExisting');

var urlJoin = require('../utils/urlJoin');

var lineCounter = require('../utils/lineCounter');

var objectHash = require('../utils/objectHash');

var prelude = getExisting(path.join(__dirname, '../builtins/prelude.min.js'), path.join(__dirname, '../builtins/prelude.js'));

var JSPackager =
/*#__PURE__*/
function (_Packager) {
  _inherits(JSPackager, _Packager);

  function JSPackager() {
    _classCallCheck(this, JSPackager);

    return _possibleConstructorReturn(this, _getPrototypeOf(JSPackager).apply(this, arguments));
  }

  _createClass(JSPackager, [{
    key: "start",
    value: function start() {
      var preludeCode;
      return regeneratorRuntime.async(function start$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.first = true;
              this.dedupe = new Map();
              this.bundleLoaders = new Set();
              this.externalModules = new Set();
              preludeCode = this.options.minify ? prelude.minified : prelude.source;

              if (this.options.target === 'electron') {
                preludeCode = "process.env.HMR_PORT=".concat(this.options.hmrPort, ";process.env.HMR_HOSTNAME=").concat(JSON.stringify(this.options.hmrHostname), ";") + preludeCode;
              }

              _context.next = 8;
              return regeneratorRuntime.awrap(this.write(preludeCode + '({'));

            case 8:
              this.lineOffset = lineCounter(preludeCode);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "addAsset",
    value: function addAsset(asset) {
      var _this = this;

      var isExposed, key, deps, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, dep, mod, bundles, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, child;

      return regeneratorRuntime.async(function addAsset$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              // If this module is referenced by another JS bundle, it needs to be exposed externally.
              // In that case, don't dedupe the asset as it would affect the module ids that are referenced by other bundles.
              isExposed = !Array.from(asset.parentDeps).every(function (dep) {
                var depAsset = _this.bundler.loadedAssets.get(dep.parent);

                return _this.bundle.assets.has(depAsset) || depAsset.type !== 'js';
              });

              if (isExposed) {
                _context2.next = 6;
                break;
              }

              key = this.dedupeKey(asset);

              if (!this.dedupe.has(key)) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt("return");

            case 5:
              // Don't dedupe when HMR is turned on since it messes with the asset ids
              if (!this.options.hmr) {
                this.dedupe.set(key, asset.id);
              }

            case 6:
              deps = {};
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context2.prev = 10;
              _iterator = asset.depAssets[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context2.next = 45;
                break;
              }

              _step$value = _slicedToArray(_step.value, 2), dep = _step$value[0], mod = _step$value[1];

              if (!dep.dynamic) {
                _context2.next = 40;
                break;
              }

              bundles = [this.getBundleSpecifier(mod.parentBundle)];
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 19;

              for (_iterator2 = mod.parentBundle.siblingBundles[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                child = _step2.value;

                if (!child.isEmpty) {
                  bundles.push(this.getBundleSpecifier(child));
                  this.bundleLoaders.add(child.type);
                }
              }

              _context2.next = 27;
              break;

            case 23:
              _context2.prev = 23;
              _context2.t0 = _context2["catch"](19);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t0;

            case 27:
              _context2.prev = 27;
              _context2.prev = 28;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 30:
              _context2.prev = 30;

              if (!_didIteratorError2) {
                _context2.next = 33;
                break;
              }

              throw _iteratorError2;

            case 33:
              return _context2.finish(30);

            case 34:
              return _context2.finish(27);

            case 35:
              bundles.push(mod.id);
              deps[dep.name] = bundles;
              this.bundleLoaders.add(mod.type);
              _context2.next = 42;
              break;

            case 40:
              deps[dep.name] = this.dedupe.get(this.dedupeKey(mod)) || mod.id; // If the dep isn't in this bundle, add it to the list of external modules to preload.
              // Only do this if this is the root JS bundle, otherwise they will have already been
              // loaded in parallel with this bundle as part of a dynamic import.

              if (!this.bundle.assets.has(mod)) {
                this.externalModules.add(mod);

                if (!this.bundle.parentBundle || this.bundle.isolated || this.bundle.parentBundle.type !== 'js') {
                  this.bundleLoaders.add(mod.type);
                }
              }

            case 42:
              _iteratorNormalCompletion = true;
              _context2.next = 12;
              break;

            case 45:
              _context2.next = 51;
              break;

            case 47:
              _context2.prev = 47;
              _context2.t1 = _context2["catch"](10);
              _didIteratorError = true;
              _iteratorError = _context2.t1;

            case 51:
              _context2.prev = 51;
              _context2.prev = 52;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 54:
              _context2.prev = 54;

              if (!_didIteratorError) {
                _context2.next = 57;
                break;
              }

              throw _iteratorError;

            case 57:
              return _context2.finish(54);

            case 58:
              return _context2.finish(51);

            case 59:
              this.bundle.addOffset(asset, this.lineOffset);
              _context2.next = 62;
              return regeneratorRuntime.awrap(this.writeModule(asset.id, asset.generated.js, deps, asset.generated.map));

            case 62:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[10, 47, 51, 59], [19, 23, 27, 35], [28,, 30, 34], [52,, 54, 58]]);
    }
  }, {
    key: "getBundleSpecifier",
    value: function getBundleSpecifier(bundle) {
      var name = path.relative(path.dirname(this.bundle.name), bundle.name);

      if (bundle.entryAsset) {
        return [name, bundle.entryAsset.id];
      }

      return name;
    }
  }, {
    key: "dedupeKey",
    value: function dedupeKey(asset) {
      // cannot rely *only* on generated JS for deduplication because paths like
      // `../` can cause 2 identical JS files to behave differently depending on
      // where they are located on the filesystem
      var deps = Array.from(asset.depAssets.values(), function (dep) {
        return dep.name;
      }).sort();
      return objectHash([asset.generated.js, deps]);
    }
  }, {
    key: "writeModule",
    value: function writeModule(id, code) {
      var deps,
          map,
          wrapped,
          lineCount,
          _args3 = arguments;
      return regeneratorRuntime.async(function writeModule$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              deps = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
              map = _args3.length > 3 ? _args3[3] : undefined;
              wrapped = this.first ? '' : ',';
              wrapped += JSON.stringify(id) + ':[function(require,module,exports) {\n' + (code || '') + '\n},';
              wrapped += JSON.stringify(deps);
              wrapped += ']';
              this.first = false;
              _context3.next = 9;
              return regeneratorRuntime.awrap(this.write(wrapped));

            case 9:
              // Use the pre-computed line count from the source map if possible
              lineCount = map && map.lineCount ? map.lineCount : lineCounter(code);
              this.lineOffset += 1 + lineCount;

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "addAssetToBundle",
    value: function addAssetToBundle(asset) {
      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, child;

      return regeneratorRuntime.async(function addAssetToBundle$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!this.bundle.assets.has(asset)) {
                _context4.next = 2;
                break;
              }

              return _context4.abrupt("return");

            case 2:
              this.bundle.addAsset(asset);

              if (!asset.parentBundle) {
                asset.parentBundle = this.bundle;
              } // Add all dependencies as well


              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context4.prev = 7;
              _iterator3 = asset.depAssets.values()[Symbol.iterator]();

            case 9:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context4.next = 16;
                break;
              }

              child = _step3.value;
              _context4.next = 13;
              return regeneratorRuntime.awrap(this.addAssetToBundle(child));

            case 13:
              _iteratorNormalCompletion3 = true;
              _context4.next = 9;
              break;

            case 16:
              _context4.next = 22;
              break;

            case 18:
              _context4.prev = 18;
              _context4.t0 = _context4["catch"](7);
              _didIteratorError3 = true;
              _iteratorError3 = _context4.t0;

            case 22:
              _context4.prev = 22;
              _context4.prev = 23;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 25:
              _context4.prev = 25;

              if (!_didIteratorError3) {
                _context4.next = 28;
                break;
              }

              throw _iteratorError3;

            case 28:
              return _context4.finish(25);

            case 29:
              return _context4.finish(22);

            case 30:
              _context4.next = 32;
              return regeneratorRuntime.awrap(this.addAsset(asset));

            case 32:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
    }
  }, {
    key: "writeBundleLoaders",
    value: function writeBundleLoaders() {
      var bundleLoader, loads, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, bundleType, loader, target, asset, preload, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _loop, _iterator5, _step5;

      return regeneratorRuntime.async(function writeBundleLoaders$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!(this.bundleLoaders.size === 0)) {
                _context5.next = 2;
                break;
              }

              return _context5.abrupt("return", false);

            case 2:
              bundleLoader = this.bundler.loadedAssets.get(require.resolve('../builtins/bundle-loader'));

              if (!(this.externalModules.size > 0 && !bundleLoader)) {
                _context5.next = 7;
                break;
              }

              _context5.next = 6;
              return regeneratorRuntime.awrap(this.bundler.getAsset('_bundle_loader'));

            case 6:
              bundleLoader = _context5.sent;

            case 7:
              if (!bundleLoader) {
                _context5.next = 12;
                break;
              }

              _context5.next = 10;
              return regeneratorRuntime.awrap(this.addAssetToBundle(bundleLoader));

            case 10:
              _context5.next = 13;
              break;

            case 12:
              return _context5.abrupt("return");

            case 13:
              // Generate a module to register the bundle loaders that are needed
              loads = 'var b=require(' + JSON.stringify(bundleLoader.id) + ');';
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context5.prev = 17;
              _iterator4 = this.bundleLoaders[Symbol.iterator]();

            case 19:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context5.next = 33;
                break;
              }

              bundleType = _step4.value;
              loader = this.options.bundleLoaders[bundleType];

              if (!loader) {
                _context5.next = 30;
                break;
              }

              target = this.options.target === 'node' ? 'node' : 'browser';
              _context5.next = 26;
              return regeneratorRuntime.awrap(this.bundler.getAsset(loader[target]));

            case 26:
              asset = _context5.sent;
              _context5.next = 29;
              return regeneratorRuntime.awrap(this.addAssetToBundle(asset));

            case 29:
              loads += 'b.register(' + JSON.stringify(bundleType) + ',require(' + JSON.stringify(asset.id) + '));';

            case 30:
              _iteratorNormalCompletion4 = true;
              _context5.next = 19;
              break;

            case 33:
              _context5.next = 39;
              break;

            case 35:
              _context5.prev = 35;
              _context5.t0 = _context5["catch"](17);
              _didIteratorError4 = true;
              _iteratorError4 = _context5.t0;

            case 39:
              _context5.prev = 39;
              _context5.prev = 40;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 42:
              _context5.prev = 42;

              if (!_didIteratorError4) {
                _context5.next = 45;
                break;
              }

              throw _iteratorError4;

            case 45:
              return _context5.finish(42);

            case 46:
              return _context5.finish(39);

            case 47:
              if (!(this.externalModules.size > 0)) {
                _context5.next = 72;
                break;
              }

              preload = [];
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context5.prev = 52;

              _loop = function _loop() {
                var mod = _step5.value;
                // Find the bundle that has the module as its entry point
                var bundle = Array.from(mod.bundles).find(function (b) {
                  return b.entryAsset === mod;
                });

                if (bundle) {
                  preload.push([path.basename(bundle.name), mod.id]);
                }
              };

              for (_iterator5 = this.externalModules[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                _loop();
              }

              _context5.next = 61;
              break;

            case 57:
              _context5.prev = 57;
              _context5.t1 = _context5["catch"](52);
              _didIteratorError5 = true;
              _iteratorError5 = _context5.t1;

            case 61:
              _context5.prev = 61;
              _context5.prev = 62;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 64:
              _context5.prev = 64;

              if (!_didIteratorError5) {
                _context5.next = 67;
                break;
              }

              throw _iteratorError5;

            case 67:
              return _context5.finish(64);

            case 68:
              return _context5.finish(61);

            case 69:
              loads += 'b.load(' + JSON.stringify(preload) + ')';

              if (this.bundle.entryAsset) {
                loads += ".then(function(){require(".concat(JSON.stringify(this.bundle.entryAsset.id), ");})");
              }

              loads += ';';

            case 72:
              _context5.next = 74;
              return regeneratorRuntime.awrap(this.writeModule(0, loads, {}));

            case 74:
              return _context5.abrupt("return", true);

            case 75:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, [[17, 35, 39, 47], [40,, 42, 46], [52, 57, 61, 69], [62,, 64, 68]]);
    }
  }, {
    key: "end",
    value: function end() {
      var entry, asset, mapBundle, mapUrl;
      return regeneratorRuntime.async(function end$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              entry = []; // Add the HMR runtime if needed.

              if (!this.options.hmr) {
                _context6.next = 8;
                break;
              }

              _context6.next = 4;
              return regeneratorRuntime.awrap(this.bundler.getAsset(require.resolve('../builtins/hmr-runtime')));

            case 4:
              asset = _context6.sent;
              _context6.next = 7;
              return regeneratorRuntime.awrap(this.addAssetToBundle(asset));

            case 7:
              entry.push(asset.id);

            case 8:
              _context6.next = 10;
              return regeneratorRuntime.awrap(this.writeBundleLoaders());

            case 10:
              if (!_context6.sent) {
                _context6.next = 12;
                break;
              }

              entry.push(0);

            case 12:
              if (this.bundle.entryAsset && this.externalModules.size === 0) {
                entry.push(this.bundle.entryAsset.id);
              }

              _context6.next = 15;
              return regeneratorRuntime.awrap(this.write('},{},' + JSON.stringify(entry) + ', ' + JSON.stringify(this.options.global || null) + ')'));

            case 15:
              if (!this.options.sourceMaps) {
                _context6.next = 21;
                break;
              }

              // Add source map url if a map bundle exists
              mapBundle = this.bundle.siblingBundlesMap.get('map');

              if (!mapBundle) {
                _context6.next = 21;
                break;
              }

              mapUrl = urlJoin(this.options.publicURL, path.relative(this.options.outDir, mapBundle.name));
              _context6.next = 21;
              return regeneratorRuntime.awrap(this.write("\n//# sourceMappingURL=".concat(mapUrl)));

            case 21:
              _context6.next = 23;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(JSPackager.prototype), "end", this).call(this));

            case 23:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    }
  }]);

  return JSPackager;
}(Packager);

module.exports = JSPackager;