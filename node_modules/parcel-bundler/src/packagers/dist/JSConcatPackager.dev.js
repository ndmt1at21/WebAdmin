"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Packager = require('./Packager');

var path = require('path');

var concat = require('../scope-hoisting/concat');

var urlJoin = require('../utils/urlJoin');

var getExisting = require('../utils/getExisting');

var walk = require('babylon-walk');

var babylon = require('@babel/parser');

var t = require('@babel/types');

var _require = require('../scope-hoisting/utils'),
    getName = _require.getName,
    getIdentifier = _require.getIdentifier;

var prelude = getExisting(path.join(__dirname, '../builtins/prelude2.min.js'), path.join(__dirname, '../builtins/prelude2.js'));
var helpers = getExisting(path.join(__dirname, '../builtins/helpers.min.js'), path.join(__dirname, '../builtins/helpers.js'));

var JSConcatPackager =
/*#__PURE__*/
function (_Packager) {
  _inherits(JSConcatPackager, _Packager);

  function JSConcatPackager() {
    _classCallCheck(this, JSConcatPackager);

    return _possibleConstructorReturn(this, _getPrototypeOf(JSConcatPackager).apply(this, arguments));
  }

  _createClass(JSConcatPackager, [{
    key: "start",
    value: function start() {
      var _this = this;

      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, asset, isExposed, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, mod;

      return regeneratorRuntime.async(function start$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.addedAssets = new Set();
              this.assets = new Map();
              this.exposedModules = new Set();
              this.externalModules = new Set();
              this.size = 0;
              this.needsPrelude = false;
              this.statements = [];
              this.assetPostludes = new Map();
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 11;
              _iterator = this.bundle.assets[Symbol.iterator]();

            case 13:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 48;
                break;
              }

              asset = _step.value;
              // If this module is referenced by another JS bundle, it needs to be exposed externally.
              isExposed = !Array.from(asset.parentDeps).every(function (dep) {
                var depAsset = _this.bundler.loadedAssets.get(dep.parent);

                return _this.bundle.assets.has(depAsset) || depAsset.type !== 'js';
              });

              if (isExposed || this.bundle.entryAsset === asset && this.bundle.parentBundle && this.bundle.parentBundle.childBundles.size !== 1) {
                this.exposedModules.add(asset);
                this.needsPrelude = true;
              }

              this.assets.set(asset.id, asset);
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 21;
              _iterator2 = asset.depAssets.values()[Symbol.iterator]();

            case 23:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 31;
                break;
              }

              mod = _step2.value;

              if (!(!this.bundle.assets.has(mod) && this.options.bundleLoaders[asset.type])) {
                _context.next = 28;
                break;
              }

              this.needsPrelude = true;
              return _context.abrupt("break", 31);

            case 28:
              _iteratorNormalCompletion2 = true;
              _context.next = 23;
              break;

            case 31:
              _context.next = 37;
              break;

            case 33:
              _context.prev = 33;
              _context.t0 = _context["catch"](21);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 37:
              _context.prev = 37;
              _context.prev = 38;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 40:
              _context.prev = 40;

              if (!_didIteratorError2) {
                _context.next = 43;
                break;
              }

              throw _iteratorError2;

            case 43:
              return _context.finish(40);

            case 44:
              return _context.finish(37);

            case 45:
              _iteratorNormalCompletion = true;
              _context.next = 13;
              break;

            case 48:
              _context.next = 54;
              break;

            case 50:
              _context.prev = 50;
              _context.t1 = _context["catch"](11);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 54:
              _context.prev = 54;
              _context.prev = 55;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 57:
              _context.prev = 57;

              if (!_didIteratorError) {
                _context.next = 60;
                break;
              }

              throw _iteratorError;

            case 60:
              return _context.finish(57);

            case 61:
              return _context.finish(54);

            case 62:
              if (this.bundle.entryAsset) {
                this.markUsedExports(this.bundle.entryAsset);
              }

              if (this.needsPrelude) {
                if (this.bundle.entryAsset && this.options.bundleLoaders[this.bundle.entryAsset.type]) {
                  this.exposedModules.add(this.bundle.entryAsset);
                }
              }

              this.write(helpers.minified);

            case 65:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[11, 50, 54, 62], [21, 33, 37, 45], [38,, 40, 44], [55,, 57, 61]]);
    }
  }, {
    key: "write",
    value: function write(string) {
      var _this$statements;

      (_this$statements = this.statements).push.apply(_this$statements, _toConsumableArray(this.parse(string)));
    }
  }, {
    key: "getSize",
    value: function getSize() {
      return this.size;
    }
  }, {
    key: "markUsedExports",
    value: function markUsedExports(asset) {
      if (asset.usedExports) {
        return;
      }

      asset.usedExports = new Set();

      for (var identifier in asset.cacheData.imports) {
        var _asset$cacheData$impo = _slicedToArray(asset.cacheData.imports[identifier], 2),
            source = _asset$cacheData$impo[0],
            name = _asset$cacheData$impo[1];

        var dep = asset.depAssets.get(asset.dependencies.get(source));

        if (dep) {
          if (name === '*') {
            this.markUsedExports(dep);
          }

          this.markUsed(dep, name);
        }
      }
    }
  }, {
    key: "markUsed",
    value: function markUsed(mod, name) {
      var _this$findExportModul = this.findExportModule(mod.id, name),
          id = _this$findExportModul.id;

      mod = this.assets.get(id);

      if (!mod) {
        return;
      }

      var exp = mod.cacheData.exports[name];

      if (Array.isArray(exp)) {
        var depMod = mod.depAssets.get(mod.dependencies.get(exp[0]));
        return this.markUsed(depMod, exp[1]);
      }

      this.markUsedExports(mod);
      mod.usedExports.add(name);
    }
  }, {
    key: "getExportIdentifier",
    value: function getExportIdentifier(asset) {
      var id = getName(asset, 'exports');

      if (this.shouldWrap(asset)) {
        return "(".concat(getName(asset, 'init'), "(), ").concat(id, ")");
      }

      return id;
    }
  }, {
    key: "addAsset",
    value: function addAsset(asset) {
      var js, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _step3$value, dep, mod, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, child;

      return regeneratorRuntime.async(function addAsset$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.addedAssets.has(asset)) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              this.addedAssets.add(asset);
              js = asset.generated.js; // If the asset has no side effects according to the its package's sideEffects flag,
              // and there are no used exports marked, exclude the asset from the bundle.

              if (!(asset.cacheData.sideEffects === false && (!asset.usedExports || asset.usedExports.size === 0))) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt("return");

            case 6:
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context2.prev = 9;
              _iterator3 = asset.depAssets[Symbol.iterator]();

            case 11:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context2.next = 52;
                break;
              }

              _step3$value = _slicedToArray(_step3.value, 2), dep = _step3$value[0], mod = _step3$value[1];

              if (!dep.dynamic) {
                _context2.next = 45;
                break;
              }

              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context2.prev = 17;
              _iterator4 = mod.parentBundle.siblingBundles[Symbol.iterator]();

            case 19:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context2.next = 27;
                break;
              }

              child = _step4.value;

              if (child.isEmpty) {
                _context2.next = 24;
                break;
              }

              _context2.next = 24;
              return regeneratorRuntime.awrap(this.addBundleLoader(child.type, asset));

            case 24:
              _iteratorNormalCompletion4 = true;
              _context2.next = 19;
              break;

            case 27:
              _context2.next = 33;
              break;

            case 29:
              _context2.prev = 29;
              _context2.t0 = _context2["catch"](17);
              _didIteratorError4 = true;
              _iteratorError4 = _context2.t0;

            case 33:
              _context2.prev = 33;
              _context2.prev = 34;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 36:
              _context2.prev = 36;

              if (!_didIteratorError4) {
                _context2.next = 39;
                break;
              }

              throw _iteratorError4;

            case 39:
              return _context2.finish(36);

            case 40:
              return _context2.finish(33);

            case 41:
              _context2.next = 43;
              return regeneratorRuntime.awrap(this.addBundleLoader(mod.type, asset, true));

            case 43:
              _context2.next = 49;
              break;

            case 45:
              if (!(!this.bundle.assets.has(mod) && (!this.bundle.parentBundle || this.bundle.parentBundle.type !== 'js') && this.options.bundleLoaders[mod.type])) {
                _context2.next = 49;
                break;
              }

              this.externalModules.add(mod);
              _context2.next = 49;
              return regeneratorRuntime.awrap(this.addBundleLoader(mod.type, asset));

            case 49:
              _iteratorNormalCompletion3 = true;
              _context2.next = 11;
              break;

            case 52:
              _context2.next = 58;
              break;

            case 54:
              _context2.prev = 54;
              _context2.t1 = _context2["catch"](9);
              _didIteratorError3 = true;
              _iteratorError3 = _context2.t1;

            case 58:
              _context2.prev = 58;
              _context2.prev = 59;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 61:
              _context2.prev = 61;

              if (!_didIteratorError3) {
                _context2.next = 64;
                break;
              }

              throw _iteratorError3;

            case 64:
              return _context2.finish(61);

            case 65:
              return _context2.finish(58);

            case 66:
              // if (this.bundle.entryAsset === asset && this.externalModules.size > 0) {
              //   js = `
              //     function $parcel$entry() {
              //       ${js.trim()}
              //     }
              //   `;
              // }
              // js = js.trim() + '\n';
              this.size += js.length;

            case 67:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[9, 54, 58, 66], [17, 29, 33, 41], [34,, 36, 40], [59,, 61, 65]]);
    }
  }, {
    key: "shouldWrap",
    value: function shouldWrap(asset) {
      var _this2 = this;

      if (!asset) {
        return false;
      }

      if (asset.cacheData.shouldWrap != null) {
        return asset.cacheData.shouldWrap;
      } // Set to false initially so circular deps work


      asset.cacheData.shouldWrap = false; // We need to wrap if any of the deps are marked by the hoister, e.g.
      // when the dep is required inside a function or conditional.
      // We also need to wrap if any of the parents are wrapped - transitive requires
      // shouldn't be evaluated until their parents are.

      var shouldWrap = _toConsumableArray(asset.parentDeps).some(function (dep) {
        return dep.shouldWrap || _this2.shouldWrap(_this2.bundler.loadedAssets.get(dep.parent));
      });

      asset.cacheData.shouldWrap = shouldWrap;
      return shouldWrap;
    }
  }, {
    key: "addDeps",
    value: function addDeps(asset, included) {
      if (!this.bundle.assets.has(asset) || included.has(asset)) {
        return [];
      }

      included.add(asset);
      var depAsts = new Map();
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = asset.depAssets.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _depAsset = _step5.value;

          if (!depAsts.has(_depAsset)) {
            var depAst = this.addDeps(_depAsset, included);
            depAsts.set(_depAsset, depAst);
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      var statements;

      if (asset.cacheData.sideEffects === false && (!asset.usedExports || asset.usedExports.size === 0)) {
        statements = [];
      } else {
        statements = this.parse(asset.generated.js, asset.name);
      }

      if (this.shouldWrap(asset)) {
        statements = this.wrapModule(asset, statements);
      }

      if (statements[0]) {
        if (!statements[0].leadingComments) {
          statements[0].leadingComments = [];
        }

        statements[0].leadingComments.push({
          type: 'CommentLine',
          value: " ASSET: ".concat(path.relative(this.options.rootDir, asset.name))
        });
      }

      var statementIndices = new Map();

      for (var i = 0; i < statements.length; i++) {
        var statement = statements[i];

        if (t.isExpressionStatement(statement)) {
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = this.findRequires(asset, statement)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var depAsset = _step6.value;

              if (!statementIndices.has(depAsset)) {
                statementIndices.set(depAsset, i);
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        }
      }

      var reverseDeps = _toConsumableArray(asset.depAssets.values()).reverse();

      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = reverseDeps[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var _statements2;

          var dep = _step7.value;
          var index = statementIndices.has(dep) ? statementIndices.get(dep) : 0;

          (_statements2 = statements).splice.apply(_statements2, [index, 0].concat(_toConsumableArray(depAsts.get(dep))));
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      if (this.assetPostludes.has(asset)) {
        var _statements;

        (_statements = statements).push.apply(_statements, _toConsumableArray(this.parse(this.assetPostludes.get(asset))));
      }

      return statements;
    }
  }, {
    key: "wrapModule",
    value: function wrapModule(asset, statements) {
      var body = [];
      var decls = [];
      var fns = [];
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = statements[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var node = _step8.value;

          // Hoist all declarations out of the function wrapper
          // so that they can be referenced by other modules directly.
          if (t.isVariableDeclaration(node)) {
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
              for (var _iterator9 = node.declarations[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                var decl = _step9.value;

                if (t.isObjectPattern(decl.id) || t.isArrayPattern(decl.id)) {
                  for (var _i2 = 0, _Object$values = Object.values(t.getBindingIdentifiers(decl.id)); _i2 < _Object$values.length; _i2++) {
                    var prop = _Object$values[_i2];
                    decls.push(t.variableDeclarator(prop));
                  }

                  if (decl.init) {
                    body.push(t.expressionStatement(t.assignmentExpression('=', decl.id, decl.init)));
                  }
                } else {
                  decls.push(t.variableDeclarator(decl.id));

                  if (decl.init) {
                    body.push(t.expressionStatement(t.assignmentExpression('=', t.identifier(decl.id.name), decl.init)));
                  }
                }
              }
            } catch (err) {
              _didIteratorError9 = true;
              _iteratorError9 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                  _iterator9["return"]();
                }
              } finally {
                if (_didIteratorError9) {
                  throw _iteratorError9;
                }
              }
            }
          } else if (t.isFunctionDeclaration(node)) {
            // Function declarations can be hoisted out of the module initialization function
            fns.push(node);
          } else if (t.isClassDeclaration(node)) {
            // Class declarations are not hoisted. We declare a variable outside the
            // function convert to a class expression assignment.
            decls.push(t.variableDeclarator(t.identifier(node.id.name)));
            body.push(t.expressionStatement(t.assignmentExpression('=', t.identifier(node.id.name), t.toExpression(node))));
          } else {
            body.push(node);
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      var executed = getName(asset, 'executed');
      decls.push(t.variableDeclarator(t.identifier(executed), t.booleanLiteral(false)));
      var init = t.functionDeclaration(getIdentifier(asset, 'init'), [], t.blockStatement([t.ifStatement(t.identifier(executed), t.returnStatement()), t.expressionStatement(t.assignmentExpression('=', t.identifier(executed), t.booleanLiteral(true)))].concat(body)));
      return [t.variableDeclaration('var', decls)].concat(fns, [init]);
    }
  }, {
    key: "parse",
    value: function parse(code, filename) {
      var ast = babylon.parse(code, {
        sourceFilename: filename,
        allowReturnOutsideFunction: true
      });
      return ast.program.body;
    }
  }, {
    key: "findRequires",
    value: function findRequires(asset, ast) {
      var result = [];
      walk.simple(ast, {
        CallExpression: function CallExpression(node) {
          var args = node.arguments,
              callee = node.callee;

          if (!t.isIdentifier(callee)) {
            return;
          }

          if (callee.name === '$parcel$require') {
            result.push(asset.depAssets.get(asset.dependencies.get(args[1].value)));
          }
        }
      });
      return result;
    }
  }, {
    key: "getBundleSpecifier",
    value: function getBundleSpecifier(bundle) {
      var name = path.relative(path.dirname(this.bundle.name), bundle.name);

      if (bundle.entryAsset) {
        return [name, bundle.entryAsset.id];
      }

      return name;
    }
  }, {
    key: "addAssetToBundle",
    value: function addAssetToBundle(asset) {
      var _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, child;

      return regeneratorRuntime.async(function addAssetToBundle$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!this.bundle.assets.has(asset)) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return");

            case 2:
              this.assets.set(asset.id, asset);
              this.bundle.addAsset(asset);

              if (!asset.parentBundle) {
                asset.parentBundle = this.bundle;
              } // Add all dependencies as well


              _iteratorNormalCompletion10 = true;
              _didIteratorError10 = false;
              _iteratorError10 = undefined;
              _context3.prev = 8;
              _iterator10 = asset.depAssets.values()[Symbol.iterator]();

            case 10:
              if (_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done) {
                _context3.next = 17;
                break;
              }

              child = _step10.value;
              _context3.next = 14;
              return regeneratorRuntime.awrap(this.addAssetToBundle(child, this.bundle));

            case 14:
              _iteratorNormalCompletion10 = true;
              _context3.next = 10;
              break;

            case 17:
              _context3.next = 23;
              break;

            case 19:
              _context3.prev = 19;
              _context3.t0 = _context3["catch"](8);
              _didIteratorError10 = true;
              _iteratorError10 = _context3.t0;

            case 23:
              _context3.prev = 23;
              _context3.prev = 24;

              if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                _iterator10["return"]();
              }

            case 26:
              _context3.prev = 26;

              if (!_didIteratorError10) {
                _context3.next = 29;
                break;
              }

              throw _iteratorError10;

            case 29:
              return _context3.finish(26);

            case 30:
              return _context3.finish(23);

            case 31:
              _context3.next = 33;
              return regeneratorRuntime.awrap(this.addAsset(asset));

            case 33:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, [[8, 19, 23, 31], [24,, 26, 30]]);
    }
  }, {
    key: "addBundleLoader",
    value: function addBundleLoader(bundleType, parentAsset, dynamic) {
      var loader, bundleLoader, target, asset, dep;
      return regeneratorRuntime.async(function addBundleLoader$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              loader = this.options.bundleLoaders[bundleType];

              if (loader) {
                _context4.next = 3;
                break;
              }

              return _context4.abrupt("return");

            case 3:
              bundleLoader = this.bundler.loadedAssets.get(require.resolve('../builtins/bundle-loader'));

              if (!(!bundleLoader && !dynamic)) {
                _context4.next = 8;
                break;
              }

              _context4.next = 7;
              return regeneratorRuntime.awrap(this.bundler.getAsset('_bundle_loader'));

            case 7:
              bundleLoader = _context4.sent;

            case 8:
              if (!bundleLoader) {
                _context4.next = 13;
                break;
              }

              _context4.next = 11;
              return regeneratorRuntime.awrap(this.addAssetToBundle(bundleLoader));

            case 11:
              _context4.next = 14;
              break;

            case 13:
              return _context4.abrupt("return");

            case 14:
              target = this.options.target === 'node' ? 'node' : 'browser';
              _context4.next = 17;
              return regeneratorRuntime.awrap(this.bundler.getAsset(loader[target]));

            case 17:
              asset = _context4.sent;

              if (this.bundle.assets.has(asset)) {
                _context4.next = 26;
                break;
              }

              dep = {
                name: asset.name
              };
              asset.parentDeps.add(dep);
              parentAsset.dependencies.set(dep.name, dep);
              parentAsset.depAssets.set(dep, asset);
              this.assetPostludes.set(asset, "".concat(this.getExportIdentifier(bundleLoader), ".register(").concat(JSON.stringify(bundleType), ",").concat(this.getExportIdentifier(asset), ");\n"));
              _context4.next = 26;
              return regeneratorRuntime.awrap(this.addAssetToBundle(asset));

            case 26:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "end",
    value: function end() {
      var included, _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, _this$statements2, asset, bundleLoader, preload, _iteratorNormalCompletion12, _didIteratorError12, _iteratorError12, _loop, _iterator12, _step12, loads, entryExports, exposed, prepareModule, _iteratorNormalCompletion13, _didIteratorError13, _iteratorError13, _iterator13, _step13, m, ast, _concat, output, preludeCode, sourceMaps, mapBundle, mapUrl;

      return regeneratorRuntime.async(function end$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              included = new Set();
              _iteratorNormalCompletion11 = true;
              _didIteratorError11 = false;
              _iteratorError11 = undefined;
              _context5.prev = 4;

              for (_iterator11 = this.bundle.assets[Symbol.iterator](); !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                asset = _step11.value;

                (_this$statements2 = this.statements).push.apply(_this$statements2, _toConsumableArray(this.addDeps(asset, included)));
              } // Preload external modules before running entry point if needed


              _context5.next = 12;
              break;

            case 8:
              _context5.prev = 8;
              _context5.t0 = _context5["catch"](4);
              _didIteratorError11 = true;
              _iteratorError11 = _context5.t0;

            case 12:
              _context5.prev = 12;
              _context5.prev = 13;

              if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                _iterator11["return"]();
              }

            case 15:
              _context5.prev = 15;

              if (!_didIteratorError11) {
                _context5.next = 18;
                break;
              }

              throw _iteratorError11;

            case 18:
              return _context5.finish(15);

            case 19:
              return _context5.finish(12);

            case 20:
              if (!(this.externalModules.size > 0)) {
                _context5.next = 47;
                break;
              }

              bundleLoader = this.bundler.loadedAssets.get(require.resolve('../builtins/bundle-loader'));
              preload = [];
              _iteratorNormalCompletion12 = true;
              _didIteratorError12 = false;
              _iteratorError12 = undefined;
              _context5.prev = 26;

              _loop = function _loop() {
                var mod = _step12.value;
                // Find the bundle that has the module as its entry point
                var bundle = Array.from(mod.bundles).find(function (b) {
                  return b.entryAsset === mod;
                });

                if (bundle) {
                  preload.push([path.basename(bundle.name), mod.id]);
                }
              };

              for (_iterator12 = this.externalModules[Symbol.iterator](); !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                _loop();
              }

              _context5.next = 35;
              break;

            case 31:
              _context5.prev = 31;
              _context5.t1 = _context5["catch"](26);
              _didIteratorError12 = true;
              _iteratorError12 = _context5.t1;

            case 35:
              _context5.prev = 35;
              _context5.prev = 36;

              if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                _iterator12["return"]();
              }

            case 38:
              _context5.prev = 38;

              if (!_didIteratorError12) {
                _context5.next = 41;
                break;
              }

              throw _iteratorError12;

            case 41:
              return _context5.finish(38);

            case 42:
              return _context5.finish(35);

            case 43:
              loads = "".concat(this.getExportIdentifier(bundleLoader), ".load(").concat(JSON.stringify(preload), ")");

              if (this.bundle.entryAsset) {
                loads += '.then($parcel$entry)';
              }

              loads += ';';
              this.write(loads);

            case 47:
              entryExports = this.bundle.entryAsset && this.getExportIdentifier(this.bundle.entryAsset);

              if (entryExports && this.bundle.entryAsset.generated.js.includes(entryExports)) {
                this.write("\n        if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n          // CommonJS\n          module.exports = ".concat(entryExports, ";\n        } else if (typeof define === \"function\" && define.amd) {\n          // RequireJS\n          define(function () {\n            return ").concat(entryExports, ";\n          });\n        } ").concat(this.options.global ? "else {\n          // <script>\n          this[".concat(JSON.stringify(this.options.global), "] = ").concat(entryExports, ";\n        }") : '', "\n      "));
              }

              if (!this.needsPrelude) {
                _context5.next = 72;
                break;
              }

              exposed = [];
              prepareModule = [];
              _iteratorNormalCompletion13 = true;
              _didIteratorError13 = false;
              _iteratorError13 = undefined;
              _context5.prev = 55;

              for (_iterator13 = this.exposedModules[Symbol.iterator](); !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                m = _step13.value;

                if (m.cacheData.isES6Module) {
                  prepareModule.push("".concat(this.getExportIdentifier(m), ".__esModule = true;"));
                }

                exposed.push("\"".concat(m.id, "\": ").concat(this.getExportIdentifier(m)));
              }

              _context5.next = 63;
              break;

            case 59:
              _context5.prev = 59;
              _context5.t2 = _context5["catch"](55);
              _didIteratorError13 = true;
              _iteratorError13 = _context5.t2;

            case 63:
              _context5.prev = 63;
              _context5.prev = 64;

              if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                _iterator13["return"]();
              }

            case 66:
              _context5.prev = 66;

              if (!_didIteratorError13) {
                _context5.next = 69;
                break;
              }

              throw _iteratorError13;

            case 69:
              return _context5.finish(66);

            case 70:
              return _context5.finish(63);

            case 71:
              this.write("\n        ".concat(prepareModule.join('\n'), "\n        return {").concat(exposed.join(', '), "};\n      "));

            case 72:
              _context5.prev = 72;
              ast = t.file(t.program(this.statements));
              _concat = concat(this, ast), output = _concat.code;

              if (!this.options.minify) {
                output = '\n' + output + '\n';
              }

              preludeCode = this.options.minify ? prelude.minified : prelude.source;

              if (this.needsPrelude) {
                output = preludeCode + '(function (require) {' + output + '});';
              } else {
                output = '(function () {' + output + '})();';
              }

              this.size = output.length;
              sourceMaps = this.options.sourceMaps;

              if (sourceMaps) {
                // Add source map url if a map bundle exists
                mapBundle = this.bundle.siblingBundlesMap.get('map');

                if (mapBundle) {
                  mapUrl = urlJoin(this.options.publicURL, path.basename(mapBundle.name));
                  output += "\n//# sourceMappingURL=".concat(mapUrl);
                }
              }

              _context5.next = 83;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(JSConcatPackager.prototype), "write", this).call(this, output));

            case 83:
              _context5.next = 88;
              break;

            case 85:
              _context5.prev = 85;
              _context5.t3 = _context5["catch"](72);
              throw _context5.t3;

            case 88:
              _context5.prev = 88;
              _context5.next = 91;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(JSConcatPackager.prototype), "end", this).call(this));

            case 91:
              return _context5.finish(88);

            case 92:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, [[4, 8, 12, 20], [13,, 15, 19], [26, 31, 35, 43], [36,, 38, 42], [55, 59, 63, 71], [64,, 66, 70], [72, 85, 88, 92]]);
    }
  }, {
    key: "resolveModule",
    value: function resolveModule(id, name) {
      var module = this.assets.get(id);
      return module.depAssets.get(module.dependencies.get(name));
    }
  }, {
    key: "findExportModule",
    value: function findExportModule(id, name, replacements) {
      var asset = this.assets.get(id);
      var exp = asset && Object.prototype.hasOwnProperty.call(asset.cacheData.exports, name) ? asset.cacheData.exports[name] : null; // If this is a re-export, find the original module.

      if (Array.isArray(exp)) {
        var mod = this.resolveModule(id, exp[0]);
        return this.findExportModule(mod.id, exp[1], replacements);
      } // If this module exports wildcards, resolve the original module.
      // Default exports are excluded from wildcard exports.


      var wildcards = asset && asset.cacheData.wildcards;

      if (wildcards && name !== 'default' && name !== '*') {
        var _iteratorNormalCompletion14 = true;
        var _didIteratorError14 = false;
        var _iteratorError14 = undefined;

        try {
          for (var _iterator14 = wildcards[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
            var source = _step14.value;

            var _mod = this.resolveModule(id, source);

            var m = this.findExportModule(_mod.id, name, replacements);

            if (m.identifier) {
              return m;
            }
          }
        } catch (err) {
          _didIteratorError14 = true;
          _iteratorError14 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
              _iterator14["return"]();
            }
          } finally {
            if (_didIteratorError14) {
              throw _iteratorError14;
            }
          }
        }
      } // If this is a wildcard import, resolve to the exports object.


      if (asset && name === '*') {
        exp = getName(asset, 'exports');
      }

      if (replacements && replacements.has(exp)) {
        exp = replacements.get(exp);
      }

      return {
        identifier: exp,
        name: name,
        id: id
      };
    }
  }]);

  return JSConcatPackager;
}(Packager);

module.exports = JSConcatPackager;