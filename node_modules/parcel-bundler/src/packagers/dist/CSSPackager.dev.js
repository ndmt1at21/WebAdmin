"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var path = require('path');

var Packager = require('./Packager');

var lineCounter = require('../utils/lineCounter');

var urlJoin = require('../utils/urlJoin');

var CSSPackager =
/*#__PURE__*/
function (_Packager) {
  _inherits(CSSPackager, _Packager);

  function CSSPackager() {
    _classCallCheck(this, CSSPackager);

    return _possibleConstructorReturn(this, _getPrototypeOf(CSSPackager).apply(this, arguments));
  }

  _createClass(CSSPackager, [{
    key: "start",
    value: function start() {
      return regeneratorRuntime.async(function start$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.lineOffset = 0;
              this.columnOffset = 0;

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "addAsset",
    value: function addAsset(asset) {
      var css, media, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, dep, lineCount, lines;

      return regeneratorRuntime.async(function addAsset$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              css = asset.generated.css || ''; // Figure out which media types this asset was imported with.
              // We only want to import the asset once, so group them all together.

              media = [];
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context2.prev = 5;
              _iterator = asset.parentDeps[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context2.next = 18;
                break;
              }

              dep = _step.value;

              if (dep.media) {
                _context2.next = 14;
                break;
              }

              // Asset was imported without a media type. Don't wrap in @media.
              media.length = 0;
              return _context2.abrupt("break", 18);

            case 14:
              media.push(dep.media);

            case 15:
              _iteratorNormalCompletion = true;
              _context2.next = 7;
              break;

            case 18:
              _context2.next = 24;
              break;

            case 20:
              _context2.prev = 20;
              _context2.t0 = _context2["catch"](5);
              _didIteratorError = true;
              _iteratorError = _context2.t0;

            case 24:
              _context2.prev = 24;
              _context2.prev = 25;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 27:
              _context2.prev = 27;

              if (!_didIteratorError) {
                _context2.next = 30;
                break;
              }

              throw _iteratorError;

            case 30:
              return _context2.finish(27);

            case 31:
              return _context2.finish(24);

            case 32:
              // If any, wrap in an @media block
              if (media.length) {
                css = "@media ".concat(media.join(', '), " {\n").concat(css.trim(), "\n}\n");
              }

              if (!asset.options.sourceMaps) {
                _context2.next = 57;
                break;
              }

              lineCount = lineCounter(css);

              if (!(lineCount == 1)) {
                _context2.next = 42;
                break;
              }

              this.bundle.addOffset(asset, this.lineOffset, this.columnOffset);
              _context2.next = 39;
              return regeneratorRuntime.awrap(this.write(css));

            case 39:
              this.columnOffset += css.length;
              _context2.next = 55;
              break;

            case 42:
              lines = css.split('\n');

              if (!(this.columnOffset == 0)) {
                _context2.next = 49;
                break;
              }

              this.bundle.addOffset(asset, this.lineOffset, 0);
              _context2.next = 47;
              return regeneratorRuntime.awrap(this.write(css + '\n'));

            case 47:
              _context2.next = 54;
              break;

            case 49:
              this.columnOffset = 0;
              this.bundle.addOffset(asset, this.lineOffset + 1, 0);
              this.columnOffset = lines[lines.length - 1].length;
              _context2.next = 54;
              return regeneratorRuntime.awrap(this.write('\n' + css));

            case 54:
              this.lineOffset += lineCount;

            case 55:
              _context2.next = 59;
              break;

            case 57:
              _context2.next = 59;
              return regeneratorRuntime.awrap(this.write(css));

            case 59:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[5, 20, 24, 32], [25,, 27, 31]]);
    }
  }, {
    key: "end",
    value: function end() {
      var mapBundle, mapUrl;
      return regeneratorRuntime.async(function end$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!this.options.sourceMaps) {
                _context3.next = 6;
                break;
              }

              // Add source map url if a map bundle exists
              mapBundle = this.bundle.siblingBundlesMap.get('map');

              if (!mapBundle) {
                _context3.next = 6;
                break;
              }

              mapUrl = urlJoin(this.options.publicURL, path.basename(mapBundle.name));
              _context3.next = 6;
              return regeneratorRuntime.awrap(this.write("\n/*# sourceMappingURL=".concat(mapUrl, " */")));

            case 6:
              _context3.next = 8;
              return regeneratorRuntime.awrap(_get(_getPrototypeOf(CSSPackager.prototype), "end", this).call(this));

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }]);

  return CSSPackager;
}(Packager);

module.exports = CSSPackager;