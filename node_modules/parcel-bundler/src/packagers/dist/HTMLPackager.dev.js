"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Packager = require('./Packager');

var posthtml = require('posthtml');

var path = require('path');

var urlJoin = require('../utils/urlJoin'); // https://www.w3.org/TR/html5/dom.html#metadata-content-2


var metadataContent = new Set(['base', 'link', 'meta', 'noscript', 'script', 'style', 'template', 'title']);

var HTMLPackager =
/*#__PURE__*/
function (_Packager) {
  _inherits(HTMLPackager, _Packager);

  function HTMLPackager() {
    _classCallCheck(this, HTMLPackager);

    return _possibleConstructorReturn(this, _getPrototypeOf(HTMLPackager).apply(this, arguments));
  }

  _createClass(HTMLPackager, [{
    key: "addAsset",
    value: function addAsset(asset) {
      var html, siblingBundles;
      return regeneratorRuntime.async(function addAsset$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              html = asset.generated.html || ''; // Find child bundles that have JS or CSS sibling bundles,
              // add them to the head so they are loaded immediately.

              siblingBundles = Array.from(this.bundle.childBundles).reduce(function (p, b) {
                return p.concat(_toConsumableArray(b.siblingBundles.values()));
              }, []).filter(function (b) {
                return b.type === 'css' || b.type === 'js';
              });

              if (siblingBundles.length > 0) {
                html = posthtml(this.insertSiblingBundles.bind(this, siblingBundles)).process(html, {
                  sync: true
                }).html;
              }

              _context.next = 5;
              return regeneratorRuntime.awrap(this.write(html));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "addBundlesToTree",
    value: function addBundlesToTree(bundles, tree) {
      var head = find(tree, 'head');

      if (head) {
        var _content = head.content || (head.content = []);

        _content.push.apply(_content, _toConsumableArray(bundles));

        return;
      }

      var html = find(tree, 'html');
      var content = html ? html.content || (html.content = []) : tree;
      var index = findBundleInsertIndex(content);
      content.splice.apply(content, [index, 0].concat(_toConsumableArray(bundles)));
    }
  }, {
    key: "insertSiblingBundles",
    value: function insertSiblingBundles(siblingBundles, tree) {
      var bundles = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = siblingBundles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var bundle = _step.value;

          if (bundle.type === 'css') {
            bundles.push({
              tag: 'link',
              attrs: {
                rel: 'stylesheet',
                href: urlJoin(this.options.publicURL, path.basename(bundle.name))
              }
            });
          } else if (bundle.type === 'js') {
            bundles.push({
              tag: 'script',
              attrs: {
                src: urlJoin(this.options.publicURL, path.basename(bundle.name))
              }
            });
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.addBundlesToTree(bundles, tree);
    }
  }], [{
    key: "shouldAddAsset",
    value: function shouldAddAsset() {
      // We cannot combine multiple HTML files together - they should be written as separate bundles.
      return false;
    }
  }]);

  return HTMLPackager;
}(Packager);

function find(tree, tag) {
  var res;
  tree.match({
    tag: tag
  }, function (node) {
    res = node;
    return node;
  });
  return res;
}

function findBundleInsertIndex(content) {
  for (var index = 0; index < content.length; index++) {
    var node = content[index];

    if (node && node.tag && !metadataContent.has(node.tag)) {
      return index;
    }
  }

  return 0;
}

module.exports = HTMLPackager;