"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('path'),
    dirname = _require.dirname;

var _require2 = require('@parcel/utils'),
    promisify = _require2.promisify;

var resolve = promisify(require('resolve'));

var installPackage = require('./installPackage');

var getModuleParts = require('./getModuleParts');

var cache = new Map();

function localRequire(name, path) {
  var triedInstall,
      _ref,
      _ref2,
      resolved,
      _args = arguments;

  return regeneratorRuntime.async(function localRequire$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          triedInstall = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
          _context.next = 3;
          return regeneratorRuntime.awrap(localResolve(name, path, triedInstall));

        case 3:
          _ref = _context.sent;
          _ref2 = _slicedToArray(_ref, 1);
          resolved = _ref2[0];
          return _context.abrupt("return", require(resolved));

        case 7:
        case "end":
          return _context.stop();
      }
    }
  });
}

function localResolve(name, path) {
  var triedInstall,
      basedir,
      key,
      resolved,
      packageName,
      _args2 = arguments;
  return regeneratorRuntime.async(function localResolve$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          triedInstall = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : false;
          basedir = dirname(path);
          key = basedir + ':' + name;
          resolved = cache.get(key);

          if (resolved) {
            _context2.next = 20;
            break;
          }

          _context2.prev = 5;
          _context2.next = 8;
          return regeneratorRuntime.awrap(resolve(name, {
            basedir: basedir
          }));

        case 8:
          resolved = _context2.sent;
          _context2.next = 19;
          break;

        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](5);

          if (!(_context2.t0.code === 'MODULE_NOT_FOUND' && !triedInstall)) {
            _context2.next = 18;
            break;
          }

          packageName = getModuleParts(name)[0];
          _context2.next = 17;
          return regeneratorRuntime.awrap(installPackage(packageName, path));

        case 17:
          return _context2.abrupt("return", localResolve(name, path, true));

        case 18:
          throw _context2.t0;

        case 19:
          cache.set(key, resolved);

        case 20:
          return _context2.abrupt("return", resolved);

        case 21:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[5, 11]]);
}

localRequire.resolve = localResolve;
module.exports = localRequire;