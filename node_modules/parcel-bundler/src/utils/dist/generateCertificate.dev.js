"use strict";

var forge = require('node-forge');

var fs = require('fs');

var mkdirp = require('mkdirp');

var path = require('path');

var logger = require('@parcel/logger');

function generateCertificate() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var privateKeyPath = path.join(options.cacheDir, 'private.pem');
  var certPath = path.join(options.cacheDir, 'primary.crt');

  if (options.cache) {
    var cachedKey = fs.existsSync(privateKeyPath) && fs.readFileSync(privateKeyPath);
    var cachedCert = fs.existsSync(certPath) && fs.readFileSync(certPath);

    if (cachedKey && cachedCert) {
      return {
        key: cachedKey,
        cert: cachedCert
      };
    }
  }

  logger.progress('Generating SSL Certificate...');
  var pki = forge.pki;
  var keys = pki.rsa.generateKeyPair(2048);
  var cert = pki.createCertificate();
  cert.publicKey = keys.publicKey;
  cert.serialNumber = Date.now().toString();
  cert.validity.notBefore = new Date();
  cert.validity.notAfter = new Date();
  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1);
  var attrs = [{
    name: 'commonName',
    value: 'parceljs.org'
  }, {
    name: 'countryName',
    value: 'US'
  }, {
    shortName: 'ST',
    value: 'Virginia'
  }, {
    name: 'localityName',
    value: 'Blacksburg'
  }, {
    name: 'organizationName',
    value: 'parcelBundler'
  }, {
    shortName: 'OU',
    value: 'Test'
  }];
  cert.setSubject(attrs);
  cert.setIssuer(attrs);
  cert.setExtensions([{
    name: 'basicConstraints',
    cA: true
  }, {
    name: 'keyUsage',
    keyCertSign: true,
    digitalSignature: true,
    nonRepudiation: true,
    keyEncipherment: true,
    dataEncipherment: true
  }, {
    name: 'extKeyUsage',
    serverAuth: true,
    clientAuth: true,
    codeSigning: true,
    emailProtection: true,
    timeStamping: true
  }, {
    name: 'nsCertType',
    client: true,
    server: true,
    email: true,
    objsign: true,
    sslCA: true,
    emailCA: true,
    objCA: true
  }, {
    name: 'subjectAltName',
    altNames: [{
      type: 6,
      // URI
      value: 'http://example.org/webid#me'
    }, {
      type: 7,
      // IP
      ip: '127.0.0.1'
    }]
  }, {
    name: 'subjectKeyIdentifier'
  }]);
  cert.sign(keys.privateKey, forge.md.sha256.create());
  var privPem = pki.privateKeyToPem(keys.privateKey);
  var certPem = pki.certificateToPem(cert);

  if (options.cache) {
    mkdirp.sync(options.cacheDir);
    fs.writeFileSync(privateKeyPath, privPem);
    fs.writeFileSync(certPath, certPem);
  }

  return {
    key: privPem,
    cert: certPem
  };
}

module.exports = generateCertificate;