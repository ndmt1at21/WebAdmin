"use strict";

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(iterateBundles);

var path = require('path');

var prettifyTime = require('./prettifyTime');

var logger = require('@parcel/logger');

var filesize = require('filesize');

var LARGE_BUNDLE_SIZE = 1024 * 1024;
var DEFAULT_NUM_LARGE_ASSETS = 10;
var COLUMNS = [{
  align: 'left'
}, // name
{
  align: 'right'
}, // size
{
  align: 'right'
} // time
];

function bundleReport(mainBundle) {
  var detailed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  // Get a list of bundles sorted by size
  var bundles = Array.from(iterateBundles(mainBundle)).sort(function (a, b) {
    return b.totalSize - a.totalSize;
  });
  var rows = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var bundle = _step.value;
      // Add a row for the bundle
      rows.push([formatFilename(bundle.name, logger.chalk.cyan.bold), logger.chalk.bold(prettifySize(bundle.totalSize, bundle.totalSize > LARGE_BUNDLE_SIZE)), logger.chalk.green.bold(prettifyTime(bundle.bundleTime))]); // If detailed, generate a list of the largest assets in the bundle

      if (detailed && bundle.assets.size > 1) {
        var assets = Array.from(bundle.assets).filter(function (a) {
          return a.type === bundle.type;
        }).sort(function (a, b) {
          return b.bundledSize - a.bundledSize;
        });

        var largestAssets = function () {
          if (detailed === 'all') {
            return assets;
          }

          return assets.slice(0, isNaN(detailed) || typeof detailed === 'boolean' ? DEFAULT_NUM_LARGE_ASSETS : parseInt(detailed, 10));
        }();

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = largestAssets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var asset = _step2.value;
            // Add a row for the asset.
            rows.push([(asset == assets[assets.length - 1] ? '└── ' : '├── ') + formatFilename(asset.name, logger.chalk.reset), logger.chalk.dim(prettifySize(asset.bundledSize)), logger.chalk.dim(logger.chalk.green(prettifyTime(asset.buildTime)))]);
          } // Show how many more assets there are

        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        if (assets.length > largestAssets.length) {
          rows.push(['└── ' + logger.chalk.dim("+ ".concat(assets.length - largestAssets.length, " more assets"))]);
        } // If this isn't the last bundle, add an empty row before the next one


        if (bundle !== bundles[bundles.length - 1]) {
          rows.push([]);
        }
      }
    };

    for (var _iterator = bundles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    } // Render table

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  logger.log('');
  logger.table(COLUMNS, rows);
}

module.exports = bundleReport;

function iterateBundles(bundle) {
  var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, child;

  return regeneratorRuntime.wrap(function iterateBundles$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (bundle.isEmpty) {
            _context.next = 3;
            break;
          }

          _context.next = 3;
          return bundle;

        case 3:
          _iteratorNormalCompletion3 = true;
          _didIteratorError3 = false;
          _iteratorError3 = undefined;
          _context.prev = 6;
          _iterator3 = bundle.childBundles[Symbol.iterator]();

        case 8:
          if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
            _context.next = 14;
            break;
          }

          child = _step3.value;
          return _context.delegateYield(iterateBundles(child), "t0", 11);

        case 11:
          _iteratorNormalCompletion3 = true;
          _context.next = 8;
          break;

        case 14:
          _context.next = 20;
          break;

        case 16:
          _context.prev = 16;
          _context.t1 = _context["catch"](6);
          _didIteratorError3 = true;
          _iteratorError3 = _context.t1;

        case 20:
          _context.prev = 20;
          _context.prev = 21;

          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }

        case 23:
          _context.prev = 23;

          if (!_didIteratorError3) {
            _context.next = 26;
            break;
          }

          throw _iteratorError3;

        case 26:
          return _context.finish(23);

        case 27:
          return _context.finish(20);

        case 28:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[6, 16, 20, 28], [21,, 23, 27]]);
}

function prettifySize(size, isLarge) {
  var res = filesize(size);

  if (isLarge) {
    return logger.chalk.yellow(logger.emoji.warning + '  ' + res);
  }

  return logger.chalk.magenta(res);
}

function formatFilename(filename) {
  var color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : logger.chalk.reset;
  var dir = path.relative(process.cwd(), path.dirname(filename));
  return logger.chalk.dim(dir + (dir ? path.sep : '')) + color(path.basename(filename));
}