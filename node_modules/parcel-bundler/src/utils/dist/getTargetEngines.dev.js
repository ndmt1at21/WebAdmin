"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var browserslist = require('browserslist');

var semver = require('semver');

var Path = require('path');

var DEFAULT_ENGINES = {
  browsers: ['> 0.25%'],
  node: '8'
};
/**
 * Loads target node and browser versions from the following locations:
 *   - package.json engines field
 *   - package.json browserslist field
 *   - browserslist or .browserslistrc files
 *   - .babelrc or .babelrc.js files with @babel/preset-env
 */

function getTargetEngines(asset, isTargetApp) {
  var targets, path, compileTarget, pkg, engines, nodeVersion, _browserslist, babelTargets, env;

  return regeneratorRuntime.async(function getTargetEngines$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          targets = {};
          path = isTargetApp ? Path.join(asset.options.rootDir, 'index') : asset.name;
          compileTarget = asset.options.target === 'browser' ? 'browsers' : asset.options.target;
          _context.next = 5;
          return regeneratorRuntime.awrap(asset.getConfig(['package.json'], {
            path: path
          }));

        case 5:
          pkg = _context.sent;
          engines = pkg && pkg.engines;
          nodeVersion = engines && getMinSemver(engines.node);

          if (!(compileTarget === 'node')) {
            _context.next = 12;
            break;
          }

          // Use package.engines.node by default if we are compiling for node.
          if (typeof nodeVersion === 'string') {
            targets.node = nodeVersion;
          }

          _context.next = 32;
          break;

        case 12:
          if (!(engines && (typeof engines.browsers === 'string' || Array.isArray(engines.browsers)))) {
            _context.next = 16;
            break;
          }

          targets.browsers = engines.browsers;
          _context.next = 31;
          break;

        case 16:
          if (!(pkg && pkg.browserslist)) {
            _context.next = 20;
            break;
          }

          targets.browsers = pkg.browserslist;
          _context.next = 31;
          break;

        case 20:
          _context.next = 22;
          return regeneratorRuntime.awrap(loadBrowserslist(asset, path));

        case 22:
          _browserslist = _context.sent;

          if (!_browserslist) {
            _context.next = 27;
            break;
          }

          targets.browsers = _browserslist;
          _context.next = 31;
          break;

        case 27:
          _context.next = 29;
          return regeneratorRuntime.awrap(loadBabelrc(asset, path));

        case 29:
          babelTargets = _context.sent;

          if (babelTargets && babelTargets.browsers) {
            targets.browsers = babelTargets.browsers;
          } else if (babelTargets && babelTargets.node && !nodeVersion) {
            nodeVersion = babelTargets.node;
          }

        case 31:
          // Fall back to package.engines.node for node_modules without any browser target info.
          if (!isTargetApp && !targets.browsers && typeof nodeVersion === 'string') {
            targets.node = nodeVersion;
          }

        case 32:
          // If we didn't find any targets, set some default engines for the target app.
          if (isTargetApp && !targets[compileTarget] && DEFAULT_ENGINES[compileTarget]) {
            targets[compileTarget] = DEFAULT_ENGINES[compileTarget];
          } // Parse browser targets


          if (targets.browsers) {
            if (_typeof(targets.browsers) === 'object' && !Array.isArray(targets.browsers)) {
              env = asset.options.production ? 'production' : process.env.NODE_ENV || 'development';
              targets.browsers = targets.browsers[env] || targets.browsers.defaults;
            }

            if (targets.browsers) {
              targets.browsers = browserslist(targets.browsers).sort();
            }
          } // Dont compile if we couldn't find any targets


          if (!(Object.keys(targets).length === 0)) {
            _context.next = 36;
            break;
          }

          return _context.abrupt("return", null);

        case 36:
          return _context.abrupt("return", targets);

        case 37:
        case "end":
          return _context.stop();
      }
    }
  });
}

function getMinSemver(version) {
  try {
    var range = new semver.Range(version);
    var sorted = range.set.sort(function (a, b) {
      return a[0].semver.compare(b[0].semver);
    });
    return sorted[0][0].semver.version;
  } catch (err) {
    return null;
  }
}

function loadBrowserslist(asset, path) {
  var config;
  return regeneratorRuntime.async(function loadBrowserslist$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(asset.getConfig(['browserslist', '.browserslistrc'], {
            path: path,
            load: false
          }));

        case 2:
          config = _context2.sent;

          if (!config) {
            _context2.next = 5;
            break;
          }

          return _context2.abrupt("return", browserslist.readConfig(config));

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function loadBabelrc(asset, path) {
  var config, env;
  return regeneratorRuntime.async(function loadBabelrc$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return regeneratorRuntime.awrap(asset.getConfig(['.babelrc', '.babelrc.js'], {
            path: path
          }));

        case 2:
          config = _context3.sent;

          if (!(config && config.presets)) {
            _context3.next = 7;
            break;
          }

          env = config.presets.find(function (plugin) {
            return Array.isArray(plugin) && (plugin[0] === 'env' || plugin[0] === '@babel/env');
          });

          if (!(env && env[1] && env[1].targets)) {
            _context3.next = 7;
            break;
          }

          return _context3.abrupt("return", env[1].targets);

        case 7:
        case "end":
          return _context3.stop();
      }
    }
  });
}

module.exports = getTargetEngines;