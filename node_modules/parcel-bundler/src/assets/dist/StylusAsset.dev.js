"use strict";

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// const CSSAsset = require('./CSSAsset');
var Asset = require('../Asset');

var localRequire = require('../utils/localRequire');

var Resolver = require('../Resolver');

var fs = require('@parcel/fs');

var _require = require('path'),
    dirname = _require.dirname,
    resolve = _require.resolve,
    relative = _require.relative;

var _require2 = require('../utils/glob'),
    isGlob = _require2.isGlob,
    glob = _require2.glob;

var URL_RE = /^(?:url\s*\(\s*)?['"]?(?:[#/]|(?:https?:)?\/\/)/i;

var StylusAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(StylusAsset, _Asset);

  function StylusAsset(name, options) {
    var _this;

    _classCallCheck(this, StylusAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(StylusAsset).call(this, name, options));
    _this.type = 'css';
    return _this;
  }

  _createClass(StylusAsset, [{
    key: "parse",
    value: function parse(code) {
      var _this2 = this;

      var stylus, opts, style;
      return regeneratorRuntime.async(function parse$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(localRequire('stylus', this.name));

            case 2:
              stylus = _context.sent;
              _context.next = 5;
              return regeneratorRuntime.awrap(this.getConfig(['.stylusrc', '.stylusrc.js'], {
                packageKey: 'stylus'
              }));

            case 5:
              opts = _context.sent;
              style = stylus(code, opts);
              style.set('filename', this.name);
              style.set('include css', true); // Setup a handler for the URL function so we add dependencies for linked assets.

              style.define('url', function (node) {
                var filename = _this2.addURLDependency(node.val, node.filename);

                return new stylus.nodes.Literal("url(".concat(JSON.stringify(filename), ")"));
              });
              _context.t0 = style;
              _context.next = 13;
              return regeneratorRuntime.awrap(createEvaluator(code, this, style.options));

            case 13:
              _context.t1 = _context.sent;

              _context.t0.set.call(_context.t0, 'Evaluator', _context.t1);

              return _context.abrupt("return", style);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "generate",
    value: function generate() {
      return [{
        type: 'css',
        value: this.ast.render(),
        hasDependencies: false
      }];
    }
  }, {
    key: "generateErrorMessage",
    value: function generateErrorMessage(err) {
      var index = err.message.indexOf('\n');
      err.codeFrame = err.message.slice(index + 1);
      err.message = err.message.slice(0, index);
      return err;
    }
  }]);

  return StylusAsset;
}(Asset);

function getDependencies(code, filepath, asset, options) {
  var seen,
      _ref,
      _ref2,
      Parser,
      DepsResolver,
      nodes,
      utils,
      parser,
      ast,
      deps,
      resolver,
      ImportVisitor,
      res,
      _args3 = arguments;

  return regeneratorRuntime.async(function getDependencies$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          seen = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : new Set();
          seen.add(filepath);
          _context3.next = 4;
          return regeneratorRuntime.awrap(Promise.all(['parser', 'visitor/deps-resolver', 'nodes', 'utils'].map(function (dep) {
            return localRequire('stylus/lib/' + dep, filepath);
          })));

        case 4:
          _ref = _context3.sent;
          _ref2 = _slicedToArray(_ref, 4);
          Parser = _ref2[0];
          DepsResolver = _ref2[1];
          nodes = _ref2[2];
          utils = _ref2[3];
          nodes.filename = asset.name;
          parser = new Parser(code, options);
          ast = parser.parse();
          deps = new Map();
          resolver = new Resolver(Object.assign({}, asset.options, {
            extensions: ['.styl', '.css']
          }));

          ImportVisitor =
          /*#__PURE__*/
          function (_DepsResolver) {
            _inherits(ImportVisitor, _DepsResolver);

            function ImportVisitor() {
              _classCallCheck(this, ImportVisitor);

              return _possibleConstructorReturn(this, _getPrototypeOf(ImportVisitor).apply(this, arguments));
            }

            _createClass(ImportVisitor, [{
              key: "visitImport",
              value: function visitImport(imported) {
                var path = imported.path.first.string;

                if (!deps.has(path)) {
                  if (isGlob(path)) {
                    deps.set(path, glob(resolve(dirname(filepath), path), {
                      onlyFiles: true
                    }).then(function (entries) {
                      return Promise.all(entries.map(function (entry) {
                        return resolver.resolve('./' + relative(dirname(filepath), entry), filepath);
                      }));
                    }));
                  } else {
                    deps.set(path, resolver.resolve(path, filepath));
                  }
                }
              }
            }]);

            return ImportVisitor;
          }(DepsResolver);

          new ImportVisitor(ast, options).visit(ast); // Recursively process depdendencies, and return a map with all resolved paths.

          res = new Map();
          _context3.next = 20;
          return regeneratorRuntime.awrap(Promise.all(Array.from(deps.entries()).map(function _callee(_ref3) {
            var _ref4, path, resolved, found, originalPath, paths, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _resolved, _code, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, _path, resolvedPath;

            return regeneratorRuntime.async(function _callee$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _ref4 = _slicedToArray(_ref3, 2), path = _ref4[0], resolved = _ref4[1];
                    _context2.prev = 1;
                    _context2.next = 4;
                    return regeneratorRuntime.awrap(resolved);

                  case 4:
                    resolved = _context2.sent;
                    resolved = Array.isArray(resolved) ? resolved.map(function (r) {
                      return r.path;
                    }) : resolved.path;
                    _context2.next = 11;
                    break;

                  case 8:
                    _context2.prev = 8;
                    _context2.t0 = _context2["catch"](1);
                    resolved = null;

                  case 11:
                    if (!resolved) {
                      _context2.next = 16;
                      break;
                    }

                    found = Array.isArray(resolved) ? resolved : [resolved];
                    res.set(path, resolved);
                    _context2.next = 23;
                    break;

                  case 16:
                    // If we couldn't resolve, try the normal stylus resolver.
                    // We just need to do this to keep track of the dependencies - stylus does the real work.
                    // support optional .styl
                    originalPath = path;

                    if (!/\.styl$/i.test(path)) {
                      path += '.styl';
                    }

                    paths = (options.paths || []).concat(dirname(filepath || '.'));
                    found = utils.find(path, paths, filepath);

                    if (!found) {
                      found = utils.lookupIndex(originalPath, paths, filepath);
                    }

                    if (found) {
                      _context2.next = 23;
                      break;
                    }

                    throw new Error('failed to locate file ' + originalPath);

                  case 23:
                    // Recursively process resolved files as well to get nested deps
                    _iteratorNormalCompletion = true;
                    _didIteratorError = false;
                    _iteratorError = undefined;
                    _context2.prev = 26;
                    _iterator = found[Symbol.iterator]();

                  case 28:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                      _context2.next = 66;
                      break;
                    }

                    _resolved = _step.value;

                    if (seen.has(_resolved)) {
                      _context2.next = 63;
                      break;
                    }

                    asset.addDependency(_resolved, {
                      includedInParent: true
                    });
                    _context2.next = 34;
                    return regeneratorRuntime.awrap(fs.readFile(_resolved, 'utf8'));

                  case 34:
                    _code = _context2.sent;
                    _iteratorNormalCompletion2 = true;
                    _didIteratorError2 = false;
                    _iteratorError2 = undefined;
                    _context2.prev = 38;
                    _context2.next = 41;
                    return regeneratorRuntime.awrap(getDependencies(_code, _resolved, asset, options, seen));

                  case 41:
                    _context2.t1 = Symbol.iterator;
                    _iterator2 = _context2.sent[_context2.t1]();

                  case 43:
                    if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                      _context2.next = 49;
                      break;
                    }

                    _step2$value = _slicedToArray(_step2.value, 2), _path = _step2$value[0], resolvedPath = _step2$value[1];
                    res.set(_path, resolvedPath);

                  case 46:
                    _iteratorNormalCompletion2 = true;
                    _context2.next = 43;
                    break;

                  case 49:
                    _context2.next = 55;
                    break;

                  case 51:
                    _context2.prev = 51;
                    _context2.t2 = _context2["catch"](38);
                    _didIteratorError2 = true;
                    _iteratorError2 = _context2.t2;

                  case 55:
                    _context2.prev = 55;
                    _context2.prev = 56;

                    if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                      _iterator2["return"]();
                    }

                  case 58:
                    _context2.prev = 58;

                    if (!_didIteratorError2) {
                      _context2.next = 61;
                      break;
                    }

                    throw _iteratorError2;

                  case 61:
                    return _context2.finish(58);

                  case 62:
                    return _context2.finish(55);

                  case 63:
                    _iteratorNormalCompletion = true;
                    _context2.next = 28;
                    break;

                  case 66:
                    _context2.next = 72;
                    break;

                  case 68:
                    _context2.prev = 68;
                    _context2.t3 = _context2["catch"](26);
                    _didIteratorError = true;
                    _iteratorError = _context2.t3;

                  case 72:
                    _context2.prev = 72;
                    _context2.prev = 73;

                    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                      _iterator["return"]();
                    }

                  case 75:
                    _context2.prev = 75;

                    if (!_didIteratorError) {
                      _context2.next = 78;
                      break;
                    }

                    throw _iteratorError;

                  case 78:
                    return _context2.finish(75);

                  case 79:
                    return _context2.finish(72);

                  case 80:
                  case "end":
                    return _context2.stop();
                }
              }
            }, null, null, [[1, 8], [26, 68, 72, 80], [38, 51, 55, 63], [56,, 58, 62], [73,, 75, 79]]);
          })));

        case 20:
          return _context3.abrupt("return", res);

        case 21:
        case "end":
          return _context3.stop();
      }
    }
  });
}

function createEvaluator(code, asset, options) {
  var deps, Evaluator, CustomEvaluator;
  return regeneratorRuntime.async(function createEvaluator$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return regeneratorRuntime.awrap(getDependencies(code, asset.name, asset, options));

        case 2:
          deps = _context4.sent;
          _context4.next = 5;
          return regeneratorRuntime.awrap(localRequire('stylus/lib/visitor/evaluator', asset.name));

        case 5:
          Evaluator = _context4.sent;

          // This is a custom stylus evaluator that extends stylus with support for the node
          // require resolution algorithm. It also adds all dependencies to the parcel asset
          // tree so the file watcher works correctly, etc.
          CustomEvaluator =
          /*#__PURE__*/
          function (_Evaluator) {
            _inherits(CustomEvaluator, _Evaluator);

            function CustomEvaluator() {
              _classCallCheck(this, CustomEvaluator);

              return _possibleConstructorReturn(this, _getPrototypeOf(CustomEvaluator).apply(this, arguments));
            }

            _createClass(CustomEvaluator, [{
              key: "visitImport",
              value: function visitImport(imported) {
                var _this3 = this;

                var node = this.visit(imported.path).first;
                var path = node.string;

                if (node.name !== 'url' && path && !URL_RE.test(path)) {
                  var resolved = deps.get(path); // First try resolving using the node require resolution algorithm.
                  // This allows stylus files in node_modules to be resolved properly.
                  // If we find something, update the AST so stylus gets the absolute path to load later.

                  if (resolved) {
                    if (!Array.isArray(resolved)) {
                      node.string = resolved;
                    } else {
                      // If the import resolves to multiple files (i.e. glob),
                      // replace it with a separate import node for each file
                      return mergeBlocks(resolved.map(function (resolvedPath) {
                        node.string = resolvedPath;
                        return _get(_getPrototypeOf(CustomEvaluator.prototype), "visitImport", _this3).call(_this3, imported.clone());
                      }));
                    }
                  }
                } // Done. Let stylus do its thing.


                return _get(_getPrototypeOf(CustomEvaluator.prototype), "visitImport", this).call(this, imported);
              }
            }]);

            return CustomEvaluator;
          }(Evaluator);

          return _context4.abrupt("return", CustomEvaluator);

        case 8:
        case "end":
          return _context4.stop();
      }
    }
  });
}
/**
 * Puts the content of all given node blocks into the first one, essentially merging them.
 */


function mergeBlocks(blocks) {
  var finalBlock;
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = blocks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var block = _step3.value;
      if (!finalBlock) finalBlock = block;else {
        block.nodes.forEach(function (node) {
          return finalBlock.push(node);
        });
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return finalBlock;
}

module.exports = StylusAsset;