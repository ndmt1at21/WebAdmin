"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Asset = require('../Asset');

var localRequire = require('../utils/localRequire');

var path = require('path');

var fs = require('@parcel/fs');

var os = require('os');

var KotlinAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(KotlinAsset, _Asset);

  function KotlinAsset(name, options) {
    var _this;

    _classCallCheck(this, KotlinAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(KotlinAsset).call(this, name, options));
    _this.type = 'js';
    return _this;
  }

  _createClass(KotlinAsset, [{
    key: "generate",
    value: function generate() {
      var kotlinCompiler, id, dir, filename, source, sourceMap;
      return regeneratorRuntime.async(function generate$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(localRequire('@jetbrains/kotlinc-js-api', this.name));

            case 2:
              kotlinCompiler = _context.sent;
              id = Math.random().toString(36).slice(3);
              dir = path.join(os.tmpdir(), id);
              filename = path.join(dir, id + '.js');
              _context.next = 8;
              return regeneratorRuntime.awrap(fs.mkdirp(dir));

            case 8:
              _context.next = 10;
              return regeneratorRuntime.awrap(kotlinCompiler.compile({
                output: filename,
                sources: [this.name],
                moduleKind: 'commonjs',
                noStdlib: false,
                metaInfo: true,
                sourceMaps: this.options.sourceMaps
              }));

            case 10:
              _context.next = 12;
              return regeneratorRuntime.awrap(fs.readFile(filename, 'utf8'));

            case 12:
              source = _context.sent;

              if (!this.options.sourceMaps) {
                _context.next = 21;
                break;
              }

              _context.next = 16;
              return regeneratorRuntime.awrap(fs.readFile(filename + '.map', 'utf8'));

            case 16:
              sourceMap = _context.sent;
              sourceMap = JSON.parse(sourceMap);
              sourceMap.sources = [this.relativeName];
              sourceMap.sourcesContent = [this.contents]; // remove source map url

              source = source.substring(0, source.lastIndexOf('//# sourceMappingURL'));

            case 21:
              _context.next = 23;
              return regeneratorRuntime.awrap(fs.rimraf(dir));

            case 23:
              return _context.abrupt("return", [{
                type: 'js',
                value: source,
                sourceMap: sourceMap
              }]);

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }]);

  return KotlinAsset;
}(Asset);

module.exports = KotlinAsset;