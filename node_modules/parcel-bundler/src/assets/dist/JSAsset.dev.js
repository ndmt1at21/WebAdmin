"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _traverse = require('@babel/traverse')["default"];

var codeFrame = require('@babel/code-frame').codeFrameColumns;

var _collectDependencies = require('../visitors/dependencies');

var walk = require('babylon-walk');

var Asset = require('../Asset');

var babelParser = require('@babel/parser');

var insertGlobals = require('../visitors/globals');

var fsVisitor = require('../visitors/fs');

var envVisitor = require('../visitors/env');

var processVisitor = require('../visitors/process');

var babel = require('../transforms/babel/transform');

var babel7 = require('../transforms/babel/babel7');

var _generate = require('@babel/generator')["default"];

var terser = require('../transforms/terser');

var SourceMap = require('../SourceMap');

var hoist = require('../scope-hoisting/hoist');

var loadSourceMap = require('../utils/loadSourceMap');

var isAccessedVarChanged = require('../utils/isAccessedVarChanged');

var IMPORT_RE = /\b(?:import\b|export\b|require\s*\()/;
var ENV_RE = /\b(?:process\.env)\b/;
var BROWSER_RE = /\b(?:process\.browser)\b/;
var GLOBAL_RE = /\b(?:process|__dirname|__filename|global|Buffer|define)\b/;
var FS_RE = /\breadFileSync\b/;
var SW_RE = /\bnavigator\s*\.\s*serviceWorker\s*\.\s*register\s*\(/;
var WORKER_RE = /\bnew\s*(?:Shared)?Worker\s*\(/;

var JSAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(JSAsset, _Asset);

  function JSAsset(name, options) {
    var _this;

    _classCallCheck(this, JSAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(JSAsset).call(this, name, options));
    _this.type = 'js';
    _this.globals = new Map();
    _this.isAstDirty = false;
    _this.isES6Module = false;
    _this.outputCode = null;
    _this.cacheData.env = {};
    _this.rendition = options.rendition;
    _this.sourceMap = _this.rendition ? _this.rendition.map : null;
    return _this;
  }

  _createClass(JSAsset, [{
    key: "shouldInvalidate",
    value: function shouldInvalidate(cacheData) {
      return isAccessedVarChanged(cacheData);
    }
  }, {
    key: "mightHaveDependencies",
    value: function mightHaveDependencies() {
      return this.isAstDirty || !/\.js$/.test(this.name) || IMPORT_RE.test(this.contents) || GLOBAL_RE.test(this.contents) || SW_RE.test(this.contents) || WORKER_RE.test(this.contents);
    }
  }, {
    key: "parse",
    value: function parse(code) {
      return regeneratorRuntime.async(function parse$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", babelParser.parse(code, {
                filename: this.name,
                allowReturnOutsideFunction: true,
                strictMode: false,
                sourceType: 'module',
                plugins: ['exportDefaultFrom', 'exportNamespaceFrom', 'dynamicImport']
              }));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "traverse",
    value: function traverse(visitor) {
      return _traverse(this.ast, visitor, null, this);
    }
  }, {
    key: "traverseFast",
    value: function traverseFast(visitor) {
      return walk.simple(this.ast, visitor, this);
    }
  }, {
    key: "collectDependencies",
    value: function collectDependencies() {
      walk.ancestor(this.ast, _collectDependencies, this);
    }
  }, {
    key: "pretransform",
    value: function pretransform() {
      return regeneratorRuntime.async(function pretransform$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.options.sourceMaps && !this.sourceMap)) {
                _context2.next = 4;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(loadSourceMap(this));

            case 3:
              this.sourceMap = _context2.sent;

            case 4:
              _context2.next = 6;
              return regeneratorRuntime.awrap(babel(this));

            case 6:
              if (!(this.options.target === 'browser' && ENV_RE.test(this.contents))) {
                _context2.next = 10;
                break;
              }

              _context2.next = 9;
              return regeneratorRuntime.awrap(this.parseIfNeeded());

            case 9:
              this.traverseFast(envVisitor);

            case 10:
              if (!(this.options.target === 'browser' && BROWSER_RE.test(this.contents))) {
                _context2.next = 15;
                break;
              }

              _context2.next = 13;
              return regeneratorRuntime.awrap(this.parseIfNeeded());

            case 13:
              this.traverse(processVisitor);
              this.isAstDirty = true;

            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "transform",
    value: function transform() {
      var pkg, ignore;
      return regeneratorRuntime.async(function transform$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.options.target === 'browser')) {
                _context3.next = 14;
                break;
              }

              if (!(this.dependencies.has('fs') && FS_RE.test(this.contents))) {
                _context3.next = 10;
                break;
              }

              _context3.next = 4;
              return regeneratorRuntime.awrap(this.getPackage());

            case 4:
              pkg = _context3.sent;
              ignore = pkg && pkg.browser && pkg.browser.fs === false;

              if (ignore) {
                _context3.next = 10;
                break;
              }

              _context3.next = 9;
              return regeneratorRuntime.awrap(this.parseIfNeeded());

            case 9:
              this.traverse(fsVisitor);

            case 10:
              if (!GLOBAL_RE.test(this.contents)) {
                _context3.next = 14;
                break;
              }

              _context3.next = 13;
              return regeneratorRuntime.awrap(this.parseIfNeeded());

            case 13:
              walk.ancestor(this.ast, insertGlobals, this);

            case 14:
              if (!this.options.scopeHoist) {
                _context3.next = 23;
                break;
              }

              _context3.next = 17;
              return regeneratorRuntime.awrap(this.parseIfNeeded());

            case 17:
              _context3.next = 19;
              return regeneratorRuntime.awrap(this.getPackage());

            case 19:
              this.traverse(hoist);
              this.isAstDirty = true;
              _context3.next = 26;
              break;

            case 23:
              if (!this.isES6Module) {
                _context3.next = 26;
                break;
              }

              _context3.next = 26;
              return regeneratorRuntime.awrap(babel7(this, {
                internal: true,
                config: {
                  plugins: [require('@babel/plugin-transform-modules-commonjs')]
                }
              }));

            case 26:
              if (!this.options.minify) {
                _context3.next = 29;
                break;
              }

              _context3.next = 29;
              return regeneratorRuntime.awrap(terser(this));

            case 29:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "generate",
    value: function generate() {
      var code, opts, generated, rawMap;
      return regeneratorRuntime.async(function generate$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!this.isAstDirty) {
                _context4.next = 15;
                break;
              }

              opts = {
                sourceMaps: this.options.sourceMaps,
                sourceFileName: this.relativeName
              };
              generated = _generate(this.ast, opts, this.contents);

              if (!(this.options.sourceMaps && generated.rawMappings)) {
                _context4.next = 12;
                break;
              }

              rawMap = new SourceMap(generated.rawMappings, _defineProperty({}, this.relativeName, this.contents)); // Check if we already have a source map (e.g. from TypeScript or CoffeeScript)
              // In that case, we need to map the original source map to the babel generated one.

              if (!this.sourceMap) {
                _context4.next = 11;
                break;
              }

              _context4.next = 8;
              return regeneratorRuntime.awrap(new SourceMap().extendSourceMap(this.sourceMap, rawMap));

            case 8:
              this.sourceMap = _context4.sent;
              _context4.next = 12;
              break;

            case 11:
              this.sourceMap = rawMap;

            case 12:
              code = generated.code;
              _context4.next = 16;
              break;

            case 15:
              code = this.outputCode != null ? this.outputCode : this.contents;

            case 16:
              if (this.options.sourceMaps && !this.sourceMap) {
                this.sourceMap = new SourceMap().generateEmptyMap(this.relativeName, this.contents);
              }

              if (!(this.globals.size > 0)) {
                _context4.next = 25;
                break;
              }

              code = Array.from(this.globals.values()).join('\n') + '\n' + code;

              if (!this.options.sourceMaps) {
                _context4.next = 25;
                break;
              }

              if (this.sourceMap instanceof SourceMap) {
                _context4.next = 24;
                break;
              }

              _context4.next = 23;
              return regeneratorRuntime.awrap(new SourceMap().addMap(this.sourceMap));

            case 23:
              this.sourceMap = _context4.sent;

            case 24:
              this.sourceMap.offset(this.globals.size);

            case 25:
              return _context4.abrupt("return", [{
                type: 'js',
                value: code,
                map: this.sourceMap
              }]);

            case 26:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "generateErrorMessage",
    value: function generateErrorMessage(err) {
      var loc = err.loc;

      if (loc) {
        // Babel 7 adds its own code frame on the error message itself
        // We need to remove it and pass it separately.
        if (err.message.startsWith(this.name)) {
          err.message = err.message.slice(this.name.length + 1, err.message.indexOf('\n')).trim();
        }

        err.codeFrame = codeFrame(this.contents, {
          start: loc
        });
        err.highlightedCodeFrame = codeFrame(this.contents, {
          start: loc
        }, {
          highlightCode: true
        });
      }

      return err;
    }
  }]);

  return JSAsset;
}(Asset);

module.exports = JSAsset;