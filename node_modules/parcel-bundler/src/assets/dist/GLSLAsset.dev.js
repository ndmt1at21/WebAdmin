"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Asset = require('../Asset');

var localRequire = require('../utils/localRequire');

var path = require('path');

var _require = require('@parcel/utils'),
    promisify = _require.promisify;

var Resolver = require('../Resolver');

var GLSLAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(GLSLAsset, _Asset);

  function GLSLAsset(name, options) {
    var _this;

    _classCallCheck(this, GLSLAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GLSLAsset).call(this, name, options));
    _this.type = 'js';
    return _this;
  }

  _createClass(GLSLAsset, [{
    key: "parse",
    value: function parse() {
      var glslifyDeps, resolver, cwd, depper;
      return regeneratorRuntime.async(function parse$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(localRequire('glslify-deps', this.name));

            case 2:
              glslifyDeps = _context2.sent;
              // Use the Parcel resolver rather than the default glslify one.
              // This adds support for parcel features like aliases, and tilde paths.
              resolver = new Resolver({
                extensions: ['.glsl', '.vert', '.frag'],
                rootDir: this.options.rootDir
              }); // Parse and collect dependencies with glslify-deps

              cwd = path.dirname(this.name);
              depper = glslifyDeps({
                cwd: cwd,
                resolve: function resolve(target, opts, next) {
                  var res;
                  return regeneratorRuntime.async(function resolve$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.prev = 0;
                          _context.next = 3;
                          return regeneratorRuntime.awrap(resolver.resolve(target, path.join(opts.basedir, 'index')));

                        case 3:
                          res = _context.sent;
                          next(null, res.path);
                          _context.next = 10;
                          break;

                        case 7:
                          _context.prev = 7;
                          _context.t0 = _context["catch"](0);
                          next(_context.t0);

                        case 10:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, null, null, [[0, 7]]);
                }
              });
              return _context2.abrupt("return", promisify(depper.inline.bind(depper))(this.contents, cwd));

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "collectDependencies",
    value: function collectDependencies() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.ast[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var dep = _step.value;

          if (!dep.entry) {
            this.addDependency(dep.file, {
              includedInParent: true
            });
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "generate",
    value: function generate() {
      var glslifyBundle, glsl;
      return regeneratorRuntime.async(function generate$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return regeneratorRuntime.awrap(localRequire('glslify-bundle', this.name));

            case 2:
              glslifyBundle = _context3.sent;
              glsl = glslifyBundle(this.ast);
              return _context3.abrupt("return", "module.exports=".concat(JSON.stringify(glsl), ";"));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }]);

  return GLSLAsset;
}(Asset);

module.exports = GLSLAsset;