"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Asset = require('../Asset');

var path = require('path');

var json5 = require('json5');

var _require = require('terser'),
    minify = _require.minify;

var JSONAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(JSONAsset, _Asset);

  function JSONAsset(name, options) {
    var _this;

    _classCallCheck(this, JSONAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(JSONAsset).call(this, name, options));
    _this.type = 'js';
    return _this;
  }

  _createClass(JSONAsset, [{
    key: "parse",
    value: function parse(code) {
      return path.extname(this.name) === '.json5' ? json5.parse(code) : null;
    }
  }, {
    key: "generate",
    value: function generate() {
      var code = "module.exports = ".concat(this.ast ? JSON.stringify(this.ast, null, 2) : this.contents, ";");

      if (this.options.minify && !this.options.scopeHoist) {
        var minified = minify(code);

        if (minified.error) {
          throw minified.error;
        }

        code = minified.code;
      }

      return code;
    }
  }]);

  return JSONAsset;
}(Asset);

module.exports = JSONAsset;