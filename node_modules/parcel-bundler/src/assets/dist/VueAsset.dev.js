"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Asset = require('../Asset');

var localRequire = require('../utils/localRequire');

var md5 = require('../utils/md5');

var _require = require('terser'),
    minify = _require.minify;

var t = require('@babel/types');

var VueAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(VueAsset, _Asset);

  function VueAsset(name, options) {
    var _this;

    _classCallCheck(this, VueAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(VueAsset).call(this, name, options));
    _this.type = 'js';
    return _this;
  }

  _createClass(VueAsset, [{
    key: "parse",
    value: function parse(code) {
      return regeneratorRuntime.async(function parse$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(localRequire('vue-template-compiler', this.name));

            case 2:
              this.vueTemplateCompiler = _context.sent;
              _context.next = 5;
              return regeneratorRuntime.awrap(localRequire('@vue/component-compiler-utils', this.name));

            case 5:
              this.vue = _context.sent;
              return _context.abrupt("return", this.vue.parse({
                source: code,
                needMap: this.options.sourceMaps,
                filename: this.relativeName,
                // Used for sourcemaps
                sourceRoot: '',
                // Used for sourcemaps. Override so it doesn't use cwd
                compiler: this.vueTemplateCompiler
              }));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "generate",
    value: function generate() {
      var descriptor, parts, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, style;

      return regeneratorRuntime.async(function generate$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              descriptor = this.ast;
              parts = [];

              if (descriptor.script) {
                parts.push({
                  type: descriptor.script.lang || 'js',
                  value: descriptor.script.content,
                  map: descriptor.script.map
                });
              }

              if (descriptor.template) {
                parts.push({
                  type: descriptor.template.lang || 'html',
                  value: descriptor.template.content.trim()
                });
              }

              if (!descriptor.styles) {
                _context2.next = 24;
                break;
              }

              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context2.prev = 8;

              for (_iterator = descriptor.styles[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                style = _step.value;
                parts.push({
                  type: style.lang || 'css',
                  value: style.content.trim(),
                  modules: !!style.module
                });
              }

              _context2.next = 16;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](8);
              _didIteratorError = true;
              _iteratorError = _context2.t0;

            case 16:
              _context2.prev = 16;
              _context2.prev = 17;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 19:
              _context2.prev = 19;

              if (!_didIteratorError) {
                _context2.next = 22;
                break;
              }

              throw _iteratorError;

            case 22:
              return _context2.finish(19);

            case 23:
              return _context2.finish(16);

            case 24:
              return _context2.abrupt("return", parts);

            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[8, 12, 16, 24], [17,, 19, 23]]);
    }
  }, {
    key: "postProcess",
    value: function postProcess(generated) {
      var result, hasScoped, id, scopeId, optsVar, js, supplemental, _minify, code, error, css;

      return regeneratorRuntime.async(function postProcess$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              result = [];
              hasScoped = this.ast.styles.some(function (s) {
                return s.scoped;
              });
              id = md5(this.name).slice(-6);
              scopeId = hasScoped ? "data-v-".concat(id) : null;
              optsVar = '$' + id; // Generate JS output.

              js = this.ast.script ? generated[0].value : '';
              supplemental = ''; // TODO: make it possible to process this code with the normal scope hoister

              if (this.options.scopeHoist) {
                optsVar = "$".concat(t.toIdentifier(this.id), "$export$default");

                if (!js.includes(optsVar)) {
                  optsVar = "$".concat(t.toIdentifier(this.id), "$exports");

                  if (!js.includes(optsVar)) {
                    supplemental += "\n            var ".concat(optsVar, " = {};\n          ");
                    this.cacheData.isCommonJS = true;
                  }
                }
              } else {
                supplemental += "\n        var ".concat(optsVar, " = exports.default || module.exports;\n      ");
              }

              supplemental += "\n      if (typeof ".concat(optsVar, " === 'function') {\n        ").concat(optsVar, " = ").concat(optsVar, ".options;\n      }\n    ");
              supplemental += this.compileTemplate(generated, scopeId, optsVar);
              supplemental += this.compileCSSModules(generated, optsVar);
              supplemental += this.compileHMR(generated, optsVar);

              if (!(this.options.minify && !this.options.scopeHoist)) {
                _context3.next = 18;
                break;
              }

              _minify = minify(supplemental, {
                toplevel: true
              }), code = _minify.code, error = _minify.error;

              if (!error) {
                _context3.next = 16;
                break;
              }

              throw error;

            case 16:
              supplemental = code;

              if (supplemental) {
                supplemental = "\n(function(){".concat(supplemental, "})();");
              }

            case 18:
              js += supplemental;

              if (js) {
                result.push({
                  type: 'js',
                  value: js,
                  map: this.options.sourceMaps && this.ast.script && generated[0].map
                });
              }

              css = this.compileStyle(generated, scopeId);

              if (css) {
                result.push({
                  type: 'css',
                  value: css
                });
              }

              return _context3.abrupt("return", result);

            case 23:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "compileTemplate",
    value: function compileTemplate(generated, scopeId, optsVar) {
      var html = generated.find(function (r) {
        return r.type === 'html';
      });

      if (html) {
        var isFunctional = this.ast.template.attrs.functional;
        var template = this.vue.compileTemplate({
          source: html.value,
          filename: this.relativeName,
          compiler: this.vueTemplateCompiler,
          isProduction: this.options.production,
          isFunctional: isFunctional,
          compilerOptions: {
            scopeId: scopeId
          }
        });

        if (Array.isArray(template.errors) && template.errors.length >= 1) {
          throw new Error(template.errors[0]);
        }

        return "\n        /* template */\n        Object.assign(".concat(optsVar, ", (function () {\n          ").concat(template.code, "\n          return {\n            render: render,\n            staticRenderFns: staticRenderFns,\n            _compiled: true,\n            _scopeId: ").concat(JSON.stringify(scopeId), ",\n            functional: ").concat(JSON.stringify(isFunctional), "\n          };\n        })());\n      ");
      }

      return '';
    }
  }, {
    key: "compileCSSModules",
    value: function compileCSSModules(generated, optsVar) {
      var cssRenditions = generated.filter(function (r) {
        return r.type === 'css';
      });
      var cssModulesCode = '';
      this.ast.styles.forEach(function (style, index) {
        if (style.module) {
          var cssModules = JSON.stringify(cssRenditions[index].cssModules);
          var name = style.module === true ? '$style' : style.module;
          cssModulesCode += "\nthis[".concat(JSON.stringify(name), "] = ").concat(cssModules, ";");
        }
      });

      if (cssModulesCode) {
        cssModulesCode = "function hook(){".concat(cssModulesCode, "\n}");
        var isFunctional = this.ast.template && this.ast.template.attrs.functional;

        if (isFunctional) {
          return "\n          /* css modules */\n          (function () {\n            ".concat(cssModulesCode, "\n            ").concat(optsVar, "._injectStyles = hook;\n            var originalRender = ").concat(optsVar, ".render;\n            ").concat(optsVar, ".render = function (h, context) {\n              hook.call(context);\n              return originalRender(h, context);\n            };\n          })();\n        ");
        } else {
          return "\n          /* css modules */\n          (function () {\n            ".concat(cssModulesCode, "\n            ").concat(optsVar, ".beforeCreate = ").concat(optsVar, ".beforeCreate ? ").concat(optsVar, ".beforeCreate.concat(hook) : [hook];\n          })();\n        ");
        }
      }

      return '';
    }
  }, {
    key: "compileStyle",
    value: function compileStyle(generated, scopeId) {
      var _this2 = this;

      return generated.filter(function (r) {
        return r.type === 'css';
      }).reduce(function (p, r, i) {
        var css = r.value;
        var scoped = _this2.ast.styles[i].scoped; // Process scoped styles if needed.

        if (scoped) {
          var _this2$vue$compileSty = _this2.vue.compileStyle({
            source: css,
            filename: _this2.relativeName,
            id: scopeId,
            scoped: scoped
          }),
              code = _this2$vue$compileSty.code,
              errors = _this2$vue$compileSty.errors;

          if (errors.length) {
            throw errors[0];
          }

          css = code;
        }

        return p + css;
      }, '');
    }
  }, {
    key: "compileHMR",
    value: function compileHMR(generated, optsVar) {
      if (!this.options.hmr) {
        return '';
      }

      this.addDependency('vue-hot-reload-api');
      this.addDependency('vue');
      var cssHMR = '';

      if (this.ast.styles.length) {
        cssHMR = "\n        var reloadCSS = require('_css_loader');\n        module.hot.dispose(reloadCSS);\n        module.hot.accept(reloadCSS);\n      ";
      }

      var isFunctional = this.ast.template && this.ast.template.attrs.functional;
      return "\n    /* hot reload */\n    (function () {\n      if (module.hot) {\n        var api = require('vue-hot-reload-api');\n        api.install(require('vue'));\n        if (api.compatible) {\n          module.hot.accept();\n          if (!module.hot.data) {\n            api.createRecord('".concat(optsVar, "', ").concat(optsVar, ");\n          } else {\n            api.").concat(isFunctional ? 'rerender' : 'reload', "('").concat(optsVar, "', ").concat(optsVar, ");\n          }\n        }\n\n        ").concat(cssHMR, "\n      }\n    })();");
    }
  }]);

  return VueAsset;
}(Asset);

module.exports = VueAsset;