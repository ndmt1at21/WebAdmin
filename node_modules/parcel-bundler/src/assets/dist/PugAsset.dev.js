"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var path = require('path');

var Asset = require('../Asset');

var localRequire = require('../utils/localRequire');

var PugAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(PugAsset, _Asset);

  function PugAsset(name, options) {
    var _this;

    _classCallCheck(this, PugAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PugAsset).call(this, name, options));
    _this.type = 'html';
    _this.hmrPageReload = true;
    return _this;
  }

  _createClass(PugAsset, [{
    key: "generate",
    value: function generate() {
      var pug, config, compiled, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;

      return regeneratorRuntime.async(function generate$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(localRequire('pug', this.name));

            case 2:
              pug = _context.sent;
              _context.next = 5;
              return regeneratorRuntime.awrap(this.getConfig(['.pugrc', '.pugrc.js', 'pug.config.js']));

            case 5:
              _context.t0 = _context.sent;

              if (_context.t0) {
                _context.next = 8;
                break;
              }

              _context.t0 = {};

            case 8:
              config = _context.t0;
              compiled = pug.compile(this.contents, {
                compileDebug: false,
                filename: this.name,
                basedir: path.dirname(this.name),
                pretty: config.pretty || false,
                templateName: path.basename(this.basename, path.extname(this.basename)),
                filters: config.filters,
                filterOptions: config.filterOptions,
                filterAliases: config.filterAliases
              });

              if (!compiled.dependencies) {
                _context.next = 30;
                break;
              }

              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 14;

              for (_iterator = compiled.dependencies[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                item = _step.value;
                this.addDependency(item, {
                  includedInParent: true
                });
              }

              _context.next = 22;
              break;

            case 18:
              _context.prev = 18;
              _context.t1 = _context["catch"](14);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 22:
              _context.prev = 22;
              _context.prev = 23;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 25:
              _context.prev = 25;

              if (!_didIteratorError) {
                _context.next = 28;
                break;
              }

              throw _iteratorError;

            case 28:
              return _context.finish(25);

            case 29:
              return _context.finish(22);

            case 30:
              return _context.abrupt("return", compiled(config.locals));

            case 31:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, [[14, 18, 22, 30], [23,, 25, 29]]);
    }
  }]);

  return PugAsset;
}(Asset);

module.exports = PugAsset;