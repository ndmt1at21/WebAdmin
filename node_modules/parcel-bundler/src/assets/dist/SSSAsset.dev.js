"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var postcss = require('postcss');

var localRequire = require('../utils/localRequire');

var Asset = require('../Asset');

var SSSAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(SSSAsset, _Asset);

  function SSSAsset(name, options) {
    var _this;

    _classCallCheck(this, SSSAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SSSAsset).call(this, name, options));
    _this.type = 'css';
    return _this;
  }

  _createClass(SSSAsset, [{
    key: "generate",
    value: function generate() {
      var sugarss, _ref, css;

      return regeneratorRuntime.async(function generate$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(localRequire('sugarss', this.name));

            case 2:
              sugarss = _context.sent;
              _context.next = 5;
              return regeneratorRuntime.awrap(this.loadIfNeeded());

            case 5:
              _context.next = 7;
              return regeneratorRuntime.awrap(postcss().process(this.contents, {
                from: this.name,
                to: this.name,
                parser: sugarss
              }));

            case 7:
              _ref = _context.sent;
              css = _ref.css;
              return _context.abrupt("return", [{
                type: 'css',
                value: css
              }]);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }]);

  return SSSAsset;
}(Asset);

module.exports = SSSAsset;