"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var fs = require('@parcel/fs');

var path = require('path');

var md5 = require('./utils/md5');

var objectHash = require('./utils/objectHash');

var pkg = require('../package.json');

var logger = require('@parcel/logger');

var _require = require('./utils/glob'),
    isGlob = _require.isGlob,
    glob = _require.glob; // These keys can affect the output, so if they differ, the cache should not match


var OPTION_KEYS = ['publicURL', 'minify', 'hmr', 'target', 'scopeHoist', 'sourceMaps'];

var FSCache =
/*#__PURE__*/
function () {
  function FSCache(options) {
    _classCallCheck(this, FSCache);

    this.dir = path.resolve(options.cacheDir || '.cache');
    this.dirExists = false;
    this.invalidated = new Set();
    this.optionsHash = objectHash(OPTION_KEYS.reduce(function (p, k) {
      return p[k] = options[k], p;
    }, {
      version: pkg.version
    }));
  }

  _createClass(FSCache, [{
    key: "ensureDirExists",
    value: function ensureDirExists() {
      var _this = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var i;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this.dirExists) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _context.next = 4;
                return fs.mkdirp(_this.dir);

              case 4:
                i = 0;

              case 5:
                if (!(i < 256)) {
                  _context.next = 11;
                  break;
                }

                _context.next = 8;
                return fs.mkdirp(path.join(_this.dir, ('00' + i.toString(16)).slice(-2)));

              case 8:
                i++;
                _context.next = 5;
                break;

              case 11:
                _this.dirExists = true;

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }, {
    key: "getCacheFile",
    value: function getCacheFile(filename) {
      var hash = md5(this.optionsHash + filename);
      return path.join(this.dir, hash.slice(0, 2), hash.slice(2) + '.json');
    }
  }, {
    key: "getLastModified",
    value: function getLastModified(filename) {
      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var files;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!isGlob(filename)) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 3;
                return glob(filename, {
                  onlyFiles: true
                });

              case 3:
                files = _context2.sent;
                _context2.next = 6;
                return Promise.all(files.map(function (file) {
                  return fs.stat(file).then(function (_ref) {
                    var mtime = _ref.mtime;
                    return mtime.getTime();
                  });
                }));

              case 6:
                _context2.t0 = function (a, b) {
                  return Math.max(a, b);
                };

                return _context2.abrupt("return", _context2.sent.reduce(_context2.t0, 0));

              case 8:
                _context2.next = 10;
                return fs.stat(filename);

              case 10:
                return _context2.abrupt("return", _context2.sent.mtime.getTime());

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    }
  }, {
    key: "writeDepMtimes",
    value: function writeDepMtimes(data) {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, dep;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Write mtimes for each dependent file that is already compiled into this asset
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context3.prev = 3;
                _iterator = data.dependencies[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context3.next = 14;
                  break;
                }

                dep = _step.value;

                if (!dep.includedInParent) {
                  _context3.next = 11;
                  break;
                }

                _context3.next = 10;
                return _this2.getLastModified(dep.name);

              case 10:
                dep.mtime = _context3.sent;

              case 11:
                _iteratorNormalCompletion = true;
                _context3.next = 5;
                break;

              case 14:
                _context3.next = 20;
                break;

              case 16:
                _context3.prev = 16;
                _context3.t0 = _context3["catch"](3);
                _didIteratorError = true;
                _iteratorError = _context3.t0;

              case 20:
                _context3.prev = 20;
                _context3.prev = 21;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 23:
                _context3.prev = 23;

                if (!_didIteratorError) {
                  _context3.next = 26;
                  break;
                }

                throw _iteratorError;

              case 26:
                return _context3.finish(23);

              case 27:
                return _context3.finish(20);

              case 28:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[3, 16, 20, 28], [21,, 23, 27]]);
      }))();
    }
  }, {
    key: "write",
    value: function write(filename, data) {
      var _this3 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _context4.next = 3;
                return _this3.ensureDirExists();

              case 3:
                _context4.next = 5;
                return _this3.writeDepMtimes(data);

              case 5:
                _context4.next = 7;
                return fs.writeFile(_this3.getCacheFile(filename), JSON.stringify(data));

              case 7:
                _this3.invalidated["delete"](filename);

                _context4.next = 13;
                break;

              case 10:
                _context4.prev = 10;
                _context4.t0 = _context4["catch"](0);
                logger.error("Error writing to cache: ".concat(_context4.t0.message));

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[0, 10]]);
      }))();
    }
  }, {
    key: "checkDepMtimes",
    value: function checkDepMtimes(data) {
      var _this4 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, dep;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Check mtimes for files that are already compiled into this asset
                // If any of them changed, invalidate.
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context5.prev = 3;
                _iterator2 = data.dependencies[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context5.next = 17;
                  break;
                }

                dep = _step2.value;

                if (!dep.includedInParent) {
                  _context5.next = 14;
                  break;
                }

                _context5.next = 10;
                return _this4.getLastModified(dep.name);

              case 10:
                _context5.t0 = _context5.sent;
                _context5.t1 = dep.mtime;

                if (!(_context5.t0 > _context5.t1)) {
                  _context5.next = 14;
                  break;
                }

                return _context5.abrupt("return", false);

              case 14:
                _iteratorNormalCompletion2 = true;
                _context5.next = 5;
                break;

              case 17:
                _context5.next = 23;
                break;

              case 19:
                _context5.prev = 19;
                _context5.t2 = _context5["catch"](3);
                _didIteratorError2 = true;
                _iteratorError2 = _context5.t2;

              case 23:
                _context5.prev = 23;
                _context5.prev = 24;

                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }

              case 26:
                _context5.prev = 26;

                if (!_didIteratorError2) {
                  _context5.next = 29;
                  break;
                }

                throw _iteratorError2;

              case 29:
                return _context5.finish(26);

              case 30:
                return _context5.finish(23);

              case 31:
                return _context5.abrupt("return", true);

              case 32:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[3, 19, 23, 31], [24,, 26, 30]]);
      }))();
    }
  }, {
    key: "read",
    value: function read(filename) {
      var _this5 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6() {
        var cacheFile, stats, cacheStats, json, data;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!_this5.invalidated.has(filename)) {
                  _context6.next = 2;
                  break;
                }

                return _context6.abrupt("return", null);

              case 2:
                cacheFile = _this5.getCacheFile(filename);
                _context6.prev = 3;
                _context6.next = 6;
                return fs.stat(filename);

              case 6:
                stats = _context6.sent;
                _context6.next = 9;
                return fs.stat(cacheFile);

              case 9:
                cacheStats = _context6.sent;

                if (!(stats.mtime > cacheStats.mtime)) {
                  _context6.next = 12;
                  break;
                }

                return _context6.abrupt("return", null);

              case 12:
                _context6.next = 14;
                return fs.readFile(cacheFile);

              case 14:
                json = _context6.sent;
                data = JSON.parse(json);
                _context6.next = 18;
                return _this5.checkDepMtimes(data);

              case 18:
                if (_context6.sent) {
                  _context6.next = 20;
                  break;
                }

                return _context6.abrupt("return", null);

              case 20:
                return _context6.abrupt("return", data);

              case 23:
                _context6.prev = 23;
                _context6.t0 = _context6["catch"](3);
                return _context6.abrupt("return", null);

              case 26:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, null, [[3, 23]]);
      }))();
    }
  }, {
    key: "invalidate",
    value: function invalidate(filename) {
      this.invalidated.add(filename);
    }
  }, {
    key: "delete",
    value: function _delete(filename) {
      var _this6 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.prev = 0;
                _context7.next = 3;
                return fs.unlink(_this6.getCacheFile(filename));

              case 3:
                _this6.invalidated["delete"](filename);

                _context7.next = 8;
                break;

              case 6:
                _context7.prev = 6;
                _context7.t0 = _context7["catch"](0);

              case 8:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, null, [[0, 6]]);
      }))();
    }
  }]);

  return FSCache;
}();

module.exports = FSCache;