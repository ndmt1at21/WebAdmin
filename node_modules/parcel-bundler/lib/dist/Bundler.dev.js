"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var fs = require('@parcel/fs');

var Resolver = require('./Resolver');

var Parser = require('./Parser');

var WorkerFarm = require('@parcel/workers');

var Path = require('path');

var Bundle = require('./Bundle');

var Watcher = require('@parcel/watcher');

var FSCache = require('./FSCache');

var HMRServer = require('./HMRServer');

var Server = require('./Server');

var _require = require('events'),
    EventEmitter = _require.EventEmitter;

var logger = require('@parcel/logger');

var PackagerRegistry = require('./packagers');

var localRequire = require('./utils/localRequire');

var config = require('./utils/config');

var loadEnv = require('./utils/env');

var PromiseQueue = require('./utils/PromiseQueue');

var installPackage = require('./utils/installPackage');

var bundleReport = require('./utils/bundleReport');

var prettifyTime = require('./utils/prettifyTime');

var getRootDir = require('./utils/getRootDir');

var _require2 = require('./utils/glob'),
    glob = _require2.glob,
    isGlob = _require2.isGlob;
/**
 * The Bundler is the main entry point. It resolves and loads assets,
 * creates the bundle tree, and manages the worker farm, cache, and file watcher.
 */


var Bundler =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Bundler, _EventEmitter);

  function Bundler(entryFiles) {
    var _this17;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Bundler);

    _this17 = _possibleConstructorReturn(this, _getPrototypeOf(Bundler).call(this));
    entryFiles = _this17.normalizeEntries(entryFiles);
    _this17.watchedGlobs = entryFiles.filter(function (entry) {
      return isGlob(entry);
    });
    _this17.entryFiles = _this17.findEntryFiles(entryFiles);
    _this17.options = _this17.normalizeOptions(options);
    _this17.resolver = new Resolver(_this17.options);
    _this17.parser = new Parser(_this17.options);
    _this17.packagers = new PackagerRegistry(_this17.options);
    _this17.cache = _this17.options.cache ? new FSCache(_this17.options) : null;
    _this17.delegate = options.delegate || {};
    _this17.bundleLoaders = {};

    _this17.addBundleLoader('wasm', {
      browser: require.resolve('./builtins/loaders/browser/wasm-loader'),
      node: require.resolve('./builtins/loaders/node/wasm-loader')
    });

    _this17.addBundleLoader('css', {
      browser: require.resolve('./builtins/loaders/browser/css-loader'),
      node: require.resolve('./builtins/loaders/node/css-loader')
    });

    _this17.addBundleLoader('js', {
      browser: require.resolve('./builtins/loaders/browser/js-loader'),
      node: require.resolve('./builtins/loaders/node/js-loader')
    });

    _this17.addBundleLoader('html', {
      browser: require.resolve('./builtins/loaders/browser/html-loader'),
      node: require.resolve('./builtins/loaders/node/html-loader')
    });

    _this17.pending = false;
    _this17.loadedAssets = new Map();
    _this17.watchedAssets = new Map();
    _this17.farm = null;
    _this17.watcher = null;
    _this17.hmr = null;
    _this17.bundleHashes = null;
    _this17.error = null;
    _this17.buildQueue = new PromiseQueue(_this17.processAsset.bind(_assertThisInitialized(_this17)));
    _this17.rebuildTimeout = null;
    logger.setOptions(_this17.options);
    return _this17;
  }

  _createClass(Bundler, [{
    key: "normalizeEntries",
    value: function normalizeEntries(entryFiles) {
      // Support passing a single file
      if (entryFiles && !Array.isArray(entryFiles)) {
        entryFiles = [entryFiles];
      } // If no entry files provided, resolve the entry point from the current directory.


      if (!entryFiles || entryFiles.length === 0) {
        entryFiles = [process.cwd()];
      }

      return entryFiles;
    }
  }, {
    key: "findEntryFiles",
    value: function findEntryFiles(entryFiles) {
      // Match files as globs
      return entryFiles.reduce(function (p, m) {
        return p.concat(glob.sync(m));
      }, []).map(function (f) {
        return Path.resolve(f);
      });
    }
  }, {
    key: "normalizeOptions",
    value: function normalizeOptions(options) {
      var isProduction = options.production || process.env.NODE_ENV === 'production';
      var publicURL = options.publicUrl || options.publicURL || '/';
      var watch = typeof options.watch === 'boolean' ? options.watch : !isProduction;
      var target = options.target || 'browser';
      var hmr = target === 'node' ? false : typeof options.hmr === 'boolean' ? options.hmr : watch;
      var scopeHoist = options.scopeHoist !== undefined ? options.scopeHoist : false;
      return {
        production: isProduction,
        outDir: Path.resolve(options.outDir || 'dist'),
        outFile: options.outFile || '',
        publicURL: publicURL,
        watch: watch,
        cache: typeof options.cache === 'boolean' ? options.cache : true,
        cacheDir: Path.resolve(options.cacheDir || '.cache'),
        killWorkers: typeof options.killWorkers === 'boolean' ? options.killWorkers : true,
        minify: typeof options.minify === 'boolean' ? options.minify : isProduction,
        target: target,
        bundleNodeModules: typeof options.bundleNodeModules === 'boolean' ? options.bundleNodeModules : target === 'browser',
        hmr: hmr,
        https: options.https || false,
        logLevel: isNaN(options.logLevel) ? 3 : options.logLevel,
        entryFiles: this.entryFiles,
        hmrPort: options.hmrPort || 0,
        rootDir: getRootDir(this.entryFiles),
        sourceMaps: (typeof options.sourceMaps === 'boolean' ? options.sourceMaps : true) && !scopeHoist,
        hmrHostname: options.hmrHostname || options.host || (options.target === 'electron' ? 'localhost' : ''),
        detailedReport: options.detailedReport || false,
        global: options.global,
        autoinstall: typeof options.autoInstall === 'boolean' ? options.autoInstall : process.env.PARCEL_AUTOINSTALL === 'false' ? false : !isProduction,
        scopeHoist: scopeHoist,
        contentHash: typeof options.contentHash === 'boolean' ? options.contentHash : isProduction,
        throwErrors: typeof options.throwErrors === 'boolean' ? options.throwErrors : true
      };
    }
  }, {
    key: "addAssetType",
    value: function addAssetType(extension, path) {
      if (typeof path !== 'string') {
        throw new Error('Asset type should be a module path.');
      }

      if (this.farm) {
        throw new Error('Asset types must be added before bundling.');
      }

      this.parser.registerExtension(extension, path);
    }
  }, {
    key: "addPackager",
    value: function addPackager(type, packager) {
      if (this.farm) {
        throw new Error('Packagers must be added before bundling.');
      }

      this.packagers.add(type, packager);
    }
  }, {
    key: "addBundleLoader",
    value: function addBundleLoader(type, paths) {
      if (typeof paths === 'string') {
        paths = {
          node: paths,
          browser: paths
        };
      } else if (_typeof(paths) !== 'object') {
        throw new Error('Bundle loaders should be an object.');
      }

      for (var target in paths) {
        if (target !== 'node' && target !== 'browser') {
          throw new Error("Unknown bundle loader target \"".concat(target, "\"."));
        }

        if (typeof paths[target] !== 'string') {
          throw new Error('Bundle loader should be a string.');
        }
      }

      if (this.farm) {
        throw new Error('Bundle loaders must be added before bundling.');
      }

      this.bundleLoaders[type] = paths;
    }
  }, {
    key: "loadPlugins",
    value: function loadPlugins() {
      var _this = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var relative, pkg, lastDep, deps, dep, pattern, plugin;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                relative = Path.join(_this.options.rootDir, 'index');
                _context.next = 3;
                return config.load(relative, ['package.json']);

              case 3:
                pkg = _context.sent;

                if (pkg) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return");

              case 6:
                _context.prev = 6;
                deps = Object.assign({}, pkg.dependencies, pkg.devDependencies);
                _context.t0 = regeneratorRuntime.keys(deps);

              case 9:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 21;
                  break;
                }

                dep = _context.t1.value;
                lastDep = dep;
                pattern = /^(@.*\/)?parcel-plugin-.+/;

                if (!pattern.test(dep)) {
                  _context.next = 19;
                  break;
                }

                _context.next = 16;
                return localRequire(dep, relative);

              case 16:
                plugin = _context.sent;
                _context.next = 19;
                return plugin(_this);

              case 19:
                _context.next = 9;
                break;

              case 21:
                _context.next = 26;
                break;

              case 23:
                _context.prev = 23;
                _context.t2 = _context["catch"](6);
                logger.warn("Plugin ".concat(lastDep, " failed to initialize: ").concat(_context.t2.stack || _context.t2.message || _context.t2));

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[6, 23]]);
      }))();
    }
  }, {
    key: "bundle",
    value: function bundle() {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var isInitialBundle, startTime, initialised, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry, asset, loadedAssets, changedAssets, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _asset, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _asset2, numBundles, _i, _changedAssets, _asset3, bundlesChanged, buildTime, time;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!_this2.pending) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", new Promise(function (resolve, reject) {
                  _this2.once('buildEnd', function () {
                    _this2.bundle().then(resolve, reject);
                  });
                }));

              case 2:
                isInitialBundle = !_this2.entryAssets;
                startTime = Date.now();
                initialised = !isInitialBundle;
                _this2.pending = true;
                _this2.error = null;
                logger.clear();
                logger.progress('Building...');
                _context2.prev = 9;
                _context2.next = 12;
                return _this2.start();

              case 12:
                // Emit start event, after bundler is initialised
                _this2.emit('buildStart', _this2.entryFiles); // If this is the initial bundle, ensure the output directory exists, and resolve the main asset.


                if (!isInitialBundle) {
                  _context2.next = 55;
                  break;
                }

                _context2.next = 16;
                return fs.mkdirp(_this2.options.outDir);

              case 16:
                _this2.entryAssets = new Set();
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context2.prev = 20;
                _iterator = _this2.entryFiles[Symbol.iterator]();

              case 22:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context2.next = 38;
                  break;
                }

                entry = _step.value;
                _context2.prev = 24;
                _context2.next = 27;
                return _this2.resolveAsset(entry);

              case 27:
                asset = _context2.sent;

                _this2.buildQueue.add(asset);

                _this2.entryAssets.add(asset);

                _context2.next = 35;
                break;

              case 32:
                _context2.prev = 32;
                _context2.t0 = _context2["catch"](24);
                throw new Error("Cannot resolve entry \"".concat(entry, "\" from \"").concat(_this2.options.rootDir, "\""));

              case 35:
                _iteratorNormalCompletion = true;
                _context2.next = 22;
                break;

              case 38:
                _context2.next = 44;
                break;

              case 40:
                _context2.prev = 40;
                _context2.t1 = _context2["catch"](20);
                _didIteratorError = true;
                _iteratorError = _context2.t1;

              case 44:
                _context2.prev = 44;
                _context2.prev = 45;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 47:
                _context2.prev = 47;

                if (!_didIteratorError) {
                  _context2.next = 50;
                  break;
                }

                throw _iteratorError;

              case 50:
                return _context2.finish(47);

              case 51:
                return _context2.finish(44);

              case 52:
                if (!(_this2.entryAssets.size === 0)) {
                  _context2.next = 54;
                  break;
                }

                throw new Error('No entries found.');

              case 54:
                initialised = true;

              case 55:
                _context2.next = 57;
                return _this2.buildQueue.run();

              case 57:
                loadedAssets = _context2.sent;
                // The changed assets are any that don't have a parent bundle yet
                // plus the ones that were in the build queue.
                changedAssets = [].concat(_toConsumableArray(_this2.findOrphanAssets()), _toConsumableArray(loadedAssets)); // Invalidate bundles

                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context2.prev = 62;

                for (_iterator2 = _this2.loadedAssets.values()[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  _asset = _step2.value;

                  _asset.invalidateBundle();
                }

                _context2.next = 70;
                break;

              case 66:
                _context2.prev = 66;
                _context2.t2 = _context2["catch"](62);
                _didIteratorError2 = true;
                _iteratorError2 = _context2.t2;

              case 70:
                _context2.prev = 70;
                _context2.prev = 71;

                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }

              case 73:
                _context2.prev = 73;

                if (!_didIteratorError2) {
                  _context2.next = 76;
                  break;
                }

                throw _iteratorError2;

              case 76:
                return _context2.finish(73);

              case 77:
                return _context2.finish(70);

              case 78:
                logger.progress("Producing bundles..."); // Create a root bundle to hold all of the entry assets, and add them to the tree.

                _this2.mainBundle = new Bundle();
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context2.prev = 83;

                for (_iterator3 = _this2.entryAssets[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  _asset2 = _step3.value;

                  _this2.createBundleTree(_asset2, _this2.mainBundle);
                } // If there is only one child bundle, replace the root with that bundle.


                _context2.next = 91;
                break;

              case 87:
                _context2.prev = 87;
                _context2.t3 = _context2["catch"](83);
                _didIteratorError3 = true;
                _iteratorError3 = _context2.t3;

              case 91:
                _context2.prev = 91;
                _context2.prev = 92;

                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }

              case 94:
                _context2.prev = 94;

                if (!_didIteratorError3) {
                  _context2.next = 97;
                  break;
                }

                throw _iteratorError3;

              case 97:
                return _context2.finish(94);

              case 98:
                return _context2.finish(91);

              case 99:
                if (_this2.mainBundle.childBundles.size === 1) {
                  _this2.mainBundle = Array.from(_this2.mainBundle.childBundles)[0];
                } // Generate the final bundle names, and replace references in the built assets.


                numBundles = _this2.bundleNameMap ? _this2.bundleNameMap.size : 0;
                _this2.bundleNameMap = _this2.mainBundle.getBundleNameMap(_this2.options.contentHash);

                for (_i = 0, _changedAssets = changedAssets; _i < _changedAssets.length; _i++) {
                  _asset3 = _changedAssets[_i];

                  _asset3.replaceBundleNames(_this2.bundleNameMap);
                } // Emit an HMR update if this is not the initial bundle.


                bundlesChanged = numBundles !== _this2.bundleNameMap.size;

                if (_this2.hmr && !isInitialBundle) {
                  _this2.hmr.emitUpdate(changedAssets, bundlesChanged);
                }

                logger.progress("Packaging..."); // Package everything up

                _context2.next = 108;
                return _this2.mainBundle["package"](_this2, bundlesChanged ? null : _this2.bundleHashes);

              case 108:
                _this2.bundleHashes = _context2.sent;

                // Unload any orphaned assets
                _this2.unloadOrphanedAssets();

                buildTime = Date.now() - startTime;
                time = prettifyTime(buildTime);
                logger.success("Built in ".concat(time, "."));

                if (!_this2.watcher) {
                  bundleReport(_this2.mainBundle, _this2.options.detailedReport);
                }

                _this2.emit('bundled', _this2.mainBundle);

                return _context2.abrupt("return", _this2.mainBundle);

              case 118:
                _context2.prev = 118;
                _context2.t4 = _context2["catch"](9);
                _this2.error = _context2.t4;
                logger.error(_context2.t4);

                _this2.emit('buildError', _context2.t4);

                if (_this2.hmr) {
                  _this2.hmr.emitError(_context2.t4);
                }

                if (!(_this2.options.throwErrors && !_this2.hmr)) {
                  _context2.next = 128;
                  break;
                }

                throw _context2.t4;

              case 128:
                if (!(!_this2.options.watch || !initialised)) {
                  _context2.next = 132;
                  break;
                }

                _context2.next = 131;
                return _this2.stop();

              case 131:
                process.exit(1);

              case 132:
                _context2.prev = 132;
                _this2.pending = false;

                _this2.emit('buildEnd'); // If not in watch mode, stop the worker farm so we don't keep the process running.


                if (!(!_this2.watcher && _this2.options.killWorkers)) {
                  _context2.next = 138;
                  break;
                }

                _context2.next = 138;
                return _this2.stop();

              case 138:
                return _context2.finish(132);

              case 139:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[9, 118, 132, 139], [20, 40, 44, 52], [24, 32], [45,, 47, 51], [62, 66, 70, 78], [71,, 73, 77], [83, 87, 91, 99], [92,, 94, 98]]);
      }))();
    }
  }, {
    key: "start",
    value: function start() {
      var _this3 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!_this3.farm) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return");

              case 2:
                _context3.next = 4;
                return _this3.loadPlugins();

              case 4:
                if (_this3.options.env) {
                  _context3.next = 8;
                  break;
                }

                _context3.next = 7;
                return loadEnv(Path.join(_this3.options.rootDir, 'index'));

              case 7:
                _this3.options.env = process.env;

              case 8:
                _this3.options.extensions = Object.assign({}, _this3.parser.extensions);
                _this3.options.bundleLoaders = _this3.bundleLoaders;

                if (!_this3.options.watch) {
                  _context3.next = 19;
                  break;
                }

                _this3.watcher = new Watcher(); // Wait for ready event for reliable testing on watcher

                if (!(process.env.NODE_ENV === 'test' && !_this3.watcher.ready)) {
                  _context3.next = 15;
                  break;
                }

                _context3.next = 15;
                return new Promise(function (resolve) {
                  return _this3.watcher.once('ready', resolve);
                });

              case 15:
                _this3.watchedGlobs.forEach(function (glob) {
                  _this3.watcher.add(glob);
                });

                _this3.watcher.on('add', _this3.onAdd.bind(_this3));

                _this3.watcher.on('change', _this3.onChange.bind(_this3));

                _this3.watcher.on('unlink', _this3.onUnlink.bind(_this3));

              case 19:
                if (!_this3.options.hmr) {
                  _context3.next = 24;
                  break;
                }

                _this3.hmr = new HMRServer();
                _context3.next = 23;
                return _this3.hmr.start(_this3.options);

              case 23:
                _this3.options.hmrPort = _context3.sent;

              case 24:
                _context3.next = 26;
                return WorkerFarm.getShared(_this3.options, {
                  workerPath: require.resolve('./worker.js')
                });

              case 26:
                _this3.farm = _context3.sent;

              case 27:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  }, {
    key: "stop",
    value: function stop() {
      var _this4 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!_this4.watcher) {
                  _context4.next = 3;
                  break;
                }

                _context4.next = 3;
                return _this4.watcher.stop();

              case 3:
                if (_this4.hmr) {
                  _this4.hmr.stop();
                } // Watcher and hmr can cause workerfarm calls
                // keep this as last to prevent unwanted errors


                if (!_this4.farm) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 7;
                return _this4.farm.end();

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    }
  }, {
    key: "getAsset",
    value: function getAsset(name, parent) {
      var _this5 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        var asset;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _this5.resolveAsset(name, parent);

              case 2:
                asset = _context5.sent;

                _this5.buildQueue.add(asset);

                _context5.next = 6;
                return _this5.buildQueue.run();

              case 6:
                return _context5.abrupt("return", asset);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }))();
    }
  }, {
    key: "resolveAsset",
    value: function resolveAsset(name, parent) {
      var _this6 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6() {
        var _ref, path;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return _this6.resolver.resolve(name, parent);

              case 2:
                _ref = _context6.sent;
                path = _ref.path;
                return _context6.abrupt("return", _this6.getLoadedAsset(path));

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }))();
    }
  }, {
    key: "getLoadedAsset",
    value: function getLoadedAsset(path) {
      if (this.loadedAssets.has(path)) {
        return this.loadedAssets.get(path);
      }

      var asset = this.parser.getAsset(path, this.options);
      this.loadedAssets.set(path, asset);
      this.watch(path, asset);
      return asset;
    }
  }, {
    key: "watch",
    value: function watch(path, asset) {
      var _this7 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (_this7.watcher) {
                  _context7.next = 2;
                  break;
                }

                return _context7.abrupt("return");

              case 2:
                _context7.next = 4;
                return fs.realpath(path);

              case 4:
                path = _context7.sent;

                if (!_this7.watchedAssets.has(path)) {
                  _this7.watcher.watch(path);

                  _this7.watchedAssets.set(path, new Set());
                }

                _this7.watchedAssets.get(path).add(asset);

              case 7:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }))();
    }
  }, {
    key: "unwatch",
    value: function unwatch(path, asset) {
      var _this8 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee8() {
        var watched;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return fs.realpath(path);

              case 2:
                path = _context8.sent;

                if (_this8.watchedAssets.has(path)) {
                  _context8.next = 5;
                  break;
                }

                return _context8.abrupt("return");

              case 5:
                watched = _this8.watchedAssets.get(path);
                watched["delete"](asset);

                if (watched.size === 0) {
                  _this8.watchedAssets["delete"](path);

                  _this8.watcher.unwatch(path);
                }

              case 8:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }))();
    }
  }, {
    key: "resolveDep",
    value: function resolveDep(asset, dep) {
      var install = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var _this9 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee9() {
        var isLocalFile, fromNodeModules, absPath;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.prev = 0;

                if (!dep.resolved) {
                  _context9.next = 3;
                  break;
                }

                return _context9.abrupt("return", _this9.getLoadedAsset(dep.resolved));

              case 3:
                _context9.next = 5;
                return _this9.resolveAsset(dep.name, asset.name);

              case 5:
                return _context9.abrupt("return", _context9.sent);

              case 8:
                _context9.prev = 8;
                _context9.t0 = _context9["catch"](0);

                if (!dep.optional) {
                  _context9.next = 12;
                  break;
                }

                return _context9.abrupt("return");

              case 12:
                if (!(_context9.t0.code === 'MODULE_NOT_FOUND')) {
                  _context9.next = 21;
                  break;
                }

                isLocalFile = /^[/~.]/.test(dep.name);
                fromNodeModules = asset.name.includes("".concat(Path.sep, "node_modules").concat(Path.sep));

                if (!(!isLocalFile && !fromNodeModules && _this9.options.autoinstall && install)) {
                  _context9.next = 17;
                  break;
                }

                return _context9.abrupt("return", _this9.installDep(asset, dep));

              case 17:
                _context9.t0.message = "Cannot resolve dependency '".concat(dep.name, "'");

                if (isLocalFile) {
                  absPath = Path.resolve(Path.dirname(asset.name), dep.name);
                  _context9.t0.message += " at '".concat(absPath, "'");
                }

                _context9.next = 21;
                return _this9.throwDepError(asset, dep, _context9.t0);

              case 21:
                throw _context9.t0;

              case 22:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, null, [[0, 8]]);
      }))();
    }
  }, {
    key: "installDep",
    value: function installDep(asset, dep) {
      var _this10 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee10() {
        var resolved;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return _this10.resolver.resolveModule(dep.name, asset.name);

              case 2:
                resolved = _context10.sent;

                if (!(resolved.moduleName && !resolved.moduleDir)) {
                  _context10.next = 13;
                  break;
                }

                _context10.prev = 4;
                _context10.next = 7;
                return installPackage(resolved.moduleName, asset.name, {
                  saveDev: false
                });

              case 7:
                _context10.next = 13;
                break;

              case 9:
                _context10.prev = 9;
                _context10.t0 = _context10["catch"](4);
                _context10.next = 13;
                return _this10.throwDepError(asset, dep, _context10.t0);

              case 13:
                return _context10.abrupt("return", _this10.resolveDep(asset, dep, false));

              case 14:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, null, [[4, 9]]);
      }))();
    }
  }, {
    key: "throwDepError",
    value: function throwDepError(asset, dep, err) {
      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee11() {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                if (!dep.loc) {
                  _context11.next = 5;
                  break;
                }

                _context11.next = 3;
                return asset.loadIfNeeded();

              case 3:
                err.loc = dep.loc;
                err = asset.generateErrorMessage(err);

              case 5:
                err.fileName = asset.name;
                throw err;

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11);
      }))();
    }
  }, {
    key: "processAsset",
    value: function processAsset(asset, isRebuild) {
      var _this11 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee12() {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (isRebuild) {
                  asset.invalidate();

                  if (_this11.cache) {
                    _this11.cache.invalidate(asset.name);
                  }
                }

                _context12.next = 3;
                return _this11.loadAsset(asset);

              case 3:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12);
      }))();
    }
  }, {
    key: "loadAsset",
    value: function loadAsset(asset) {
      var _this12 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee14() {
        var processed, cacheMiss, dependencies, implicitDeps, assetDeps;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                if (!asset.processed) {
                  _context14.next = 2;
                  break;
                }

                return _context14.abrupt("return");

              case 2:
                if (!_this12.error) {
                  logger.progress("Building ".concat(asset.basename, "..."));
                } // Mark the asset processed so we don't load it twice


                asset.processed = true; // First try the cache, otherwise load and compile in the background

                asset.startTime = Date.now();
                _context14.t0 = _this12.cache;

                if (!_context14.t0) {
                  _context14.next = 10;
                  break;
                }

                _context14.next = 9;
                return _this12.cache.read(asset.name);

              case 9:
                _context14.t0 = _context14.sent;

              case 10:
                processed = _context14.t0;
                cacheMiss = false;

                if (!(!processed || asset.shouldInvalidate(processed.cacheData))) {
                  _context14.next = 17;
                  break;
                }

                _context14.next = 15;
                return _this12.farm.run(asset.name);

              case 15:
                processed = _context14.sent;
                cacheMiss = true;

              case 17:
                asset.endTime = Date.now();
                asset.buildTime = asset.endTime - asset.startTime;
                asset.id = processed.id;
                asset.generated = processed.generated;
                asset.sourceMaps = processed.sourceMaps;
                asset.hash = processed.hash;
                asset.cacheData = processed.cacheData; // Call the delegate to get implicit dependencies

                dependencies = processed.dependencies;

                if (!_this12.delegate.getImplicitDependencies) {
                  _context14.next = 30;
                  break;
                }

                _context14.next = 28;
                return _this12.delegate.getImplicitDependencies(asset);

              case 28:
                implicitDeps = _context14.sent;

                if (implicitDeps) {
                  dependencies = dependencies.concat(implicitDeps);
                }

              case 30:
                _context14.next = 32;
                return Promise.all(dependencies.map(
                /*#__PURE__*/
                function () {
                  var _ref2 = (0, _asyncToGenerator2["default"])(
                  /*#__PURE__*/
                  regeneratorRuntime.mark(function _callee13(dep) {
                    var assetDep;
                    return regeneratorRuntime.wrap(function _callee13$(_context13) {
                      while (1) {
                        switch (_context13.prev = _context13.next) {
                          case 0:
                            if (!dep.includedInParent) {
                              _context13.next = 4;
                              break;
                            }

                            // This dependency is already included in the parent's generated output,
                            // so no need to load it. We map the name back to the parent asset so
                            // that changing it triggers a recompile of the parent.
                            _this12.watch(dep.name, asset);

                            _context13.next = 12;
                            break;

                          case 4:
                            dep.parent = asset.name;
                            _context13.next = 7;
                            return _this12.resolveDep(asset, dep);

                          case 7:
                            assetDep = _context13.sent;

                            if (!assetDep) {
                              _context13.next = 11;
                              break;
                            }

                            _context13.next = 11;
                            return _this12.loadAsset(assetDep);

                          case 11:
                            return _context13.abrupt("return", assetDep);

                          case 12:
                          case "end":
                            return _context13.stop();
                        }
                      }
                    }, _callee13);
                  }));

                  return function (_x) {
                    return _ref2.apply(this, arguments);
                  };
                }()));

              case 32:
                assetDeps = _context14.sent;

                if (!(processed.error !== null)) {
                  _context14.next = 35;
                  break;
                }

                throw processed.error;

              case 35:
                // Store resolved assets in their original order
                dependencies.forEach(function (dep, i) {
                  asset.dependencies.set(dep.name, dep);
                  var assetDep = assetDeps[i];

                  if (assetDep) {
                    asset.depAssets.set(dep, assetDep);
                    dep.resolved = assetDep.name;
                  }
                });
                logger.verbose("Built ".concat(asset.relativeName, "..."));

                if (_this12.cache && cacheMiss) {
                  _this12.cache.write(asset.name, processed);
                }

              case 38:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }))();
    }
  }, {
    key: "createBundleTree",
    value: function createBundleTree(asset, bundle, dep) {
      var parentBundles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Set();

      if (dep) {
        asset.parentDeps.add(dep);
      }

      if (asset.parentBundle && !bundle.isolated) {
        // If the asset is already in a bundle, it is shared. Move it to the lowest common ancestor.
        if (asset.parentBundle !== bundle) {
          var commonBundle = bundle.findCommonAncestor(asset.parentBundle); // If the common bundle's type matches the asset's, move the asset to the common bundle.
          // Otherwise, proceed with adding the asset to the new bundle below.

          if (asset.parentBundle.type === commonBundle.type) {
            this.moveAssetToBundle(asset, commonBundle);
            return;
          }
        } else {
          return;
        } // Detect circular bundles


        if (parentBundles.has(asset.parentBundle)) {
          return;
        }
      } // Skip this asset if it's already in the bundle.
      // Happens when circular dependencies are placed in an isolated bundle (e.g. a worker).


      if (bundle.isolated && bundle.assets.has(asset)) {
        return;
      }

      var isEntryAsset = asset.parentBundle && asset.parentBundle.entryAsset === asset; // If the asset generated a representation for the parent bundle type, and this
      // is not an async import, add it to the current bundle

      if (bundle.type && asset.generated[bundle.type] != null && !dep.dynamic) {
        bundle.addAsset(asset);
      }

      if (dep && dep.dynamic || !bundle.type) {
        // If the asset is already the entry asset of a bundle, don't create a duplicate.
        if (isEntryAsset) {
          return;
        } // Create a new bundle for dynamic imports


        bundle = bundle.createChildBundle(asset, dep);
      } else if (asset.type && !this.packagers.get(asset.type).shouldAddAsset(bundle, asset)) {
        // If the asset is already the entry asset of a bundle, don't create a duplicate.
        if (isEntryAsset) {
          return;
        } // No packager is available for this asset type, or the packager doesn't support
        // combining this asset into the bundle. Create a new bundle with only this asset.


        bundle = bundle.createSiblingBundle(asset, dep);
      } else {
        // Add the asset to the common bundle of the asset's type
        bundle.getSiblingBundle(asset.type).addAsset(asset);
      } // Add the asset to sibling bundles for each generated type


      if (asset.type && asset.generated[asset.type]) {
        for (var t in asset.generated) {
          if (asset.generated[t]) {
            bundle.getSiblingBundle(t).addAsset(asset);
          }
        }
      }

      asset.parentBundle = bundle;
      parentBundles.add(bundle);
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = asset.depAssets[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var _step4$value = (0, _slicedToArray2["default"])(_step4.value, 2),
              _dep = _step4$value[0],
              assetDep = _step4$value[1];

          this.createBundleTree(assetDep, bundle, _dep, parentBundles);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      parentBundles["delete"](bundle);
      return bundle;
    }
  }, {
    key: "moveAssetToBundle",
    value: function moveAssetToBundle(asset, commonBundle) {
      // Never move the entry asset of a bundle, as it was explicitly requested to be placed in a separate bundle.
      if (asset.parentBundle.entryAsset === asset || asset.parentBundle === commonBundle) {
        return;
      }

      for (var _i2 = 0, _Array$from = Array.from(asset.bundles); _i2 < _Array$from.length; _i2++) {
        var bundle = _Array$from[_i2];

        if (!bundle.isolated) {
          bundle.removeAsset(asset);
        }

        commonBundle.getSiblingBundle(bundle.type).addAsset(asset);
      }

      var oldBundle = asset.parentBundle;
      asset.parentBundle = commonBundle; // Move all dependencies as well

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = asset.depAssets.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var child = _step5.value;

          if (child.parentBundle === oldBundle) {
            this.moveAssetToBundle(child, commonBundle);
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    }
  }, {
    key: "findOrphanAssets",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function findOrphanAssets() {
      var _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, asset;

      return regeneratorRuntime.wrap(function findOrphanAssets$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _iteratorNormalCompletion6 = true;
              _didIteratorError6 = false;
              _iteratorError6 = undefined;
              _context15.prev = 3;
              _iterator6 = this.loadedAssets.values()[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
                _context15.next = 13;
                break;
              }

              asset = _step6.value;

              if (asset.parentBundle) {
                _context15.next = 10;
                break;
              }

              _context15.next = 10;
              return asset;

            case 10:
              _iteratorNormalCompletion6 = true;
              _context15.next = 5;
              break;

            case 13:
              _context15.next = 19;
              break;

            case 15:
              _context15.prev = 15;
              _context15.t0 = _context15["catch"](3);
              _didIteratorError6 = true;
              _iteratorError6 = _context15.t0;

            case 19:
              _context15.prev = 19;
              _context15.prev = 20;

              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }

            case 22:
              _context15.prev = 22;

              if (!_didIteratorError6) {
                _context15.next = 25;
                break;
              }

              throw _iteratorError6;

            case 25:
              return _context15.finish(22);

            case 26:
              return _context15.finish(19);

            case 27:
            case "end":
              return _context15.stop();
          }
        }
      }, findOrphanAssets, this, [[3, 15, 19, 27], [20,, 22, 26]]);
    })
  }, {
    key: "unloadOrphanedAssets",
    value: function unloadOrphanedAssets() {
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = this.findOrphanAssets()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var asset = _step7.value;
          this.unloadAsset(asset);
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }
    }
  }, {
    key: "unloadAsset",
    value: function unloadAsset(asset) {
      this.loadedAssets["delete"](asset.name);

      if (this.watcher) {
        this.unwatch(asset.name, asset); // Unwatch all included dependencies that map to this asset

        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = asset.dependencies.values()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var dep = _step8.value;

            if (dep.includedInParent) {
              this.unwatch(dep.name, asset);
            }
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
              _iterator8["return"]();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }
      }
    }
  }, {
    key: "onAdd",
    value: function onAdd(path) {
      var _this13 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee15() {
        var asset;
        return regeneratorRuntime.wrap(function _callee15$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                path = Path.join(process.cwd(), path);
                asset = _this13.parser.getAsset(path, _this13.options);

                _this13.loadedAssets.set(path, asset);

                _this13.entryAssets.add(asset);

                _context16.next = 6;
                return _this13.watch(path, asset);

              case 6:
                _this13.onChange(path);

              case 7:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee15);
      }))();
    }
  }, {
    key: "onChange",
    value: function onChange(path) {
      var _this14 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee17() {
        var assets, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, asset;

        return regeneratorRuntime.wrap(function _callee17$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                // The path to the newly-added items are not absolute.
                if (!Path.isAbsolute(path)) {
                  path = Path.resolve(process.cwd(), path);
                }

                assets = _this14.watchedAssets.get(path);

                if (!(!assets || !assets.size)) {
                  _context18.next = 4;
                  break;
                }

                return _context18.abrupt("return");

              case 4:
                logger.clear();
                logger.progress("Building ".concat(Path.basename(path), "...")); // Add the asset to the rebuild queue, and reset the timeout.

                _iteratorNormalCompletion9 = true;
                _didIteratorError9 = false;
                _iteratorError9 = undefined;
                _context18.prev = 9;

                for (_iterator9 = assets[Symbol.iterator](); !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  asset = _step9.value;

                  _this14.buildQueue.add(asset, true);
                }

                _context18.next = 17;
                break;

              case 13:
                _context18.prev = 13;
                _context18.t0 = _context18["catch"](9);
                _didIteratorError9 = true;
                _iteratorError9 = _context18.t0;

              case 17:
                _context18.prev = 17;
                _context18.prev = 18;

                if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                  _iterator9["return"]();
                }

              case 20:
                _context18.prev = 20;

                if (!_didIteratorError9) {
                  _context18.next = 23;
                  break;
                }

                throw _iteratorError9;

              case 23:
                return _context18.finish(20);

              case 24:
                return _context18.finish(17);

              case 25:
                clearTimeout(_this14.rebuildTimeout);
                _this14.rebuildTimeout = setTimeout(
                /*#__PURE__*/
                (0, _asyncToGenerator2["default"])(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee16() {
                  return regeneratorRuntime.wrap(function _callee16$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          _context17.next = 2;
                          return _this14.bundle();

                        case 2:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee16);
                })), 100);

              case 27:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee17, null, [[9, 13, 17, 25], [18,, 20, 24]]);
      }))();
    }
  }, {
    key: "onUnlink",
    value: function onUnlink(path) {
      var _this15 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee18() {
        var asset;
        return regeneratorRuntime.wrap(function _callee18$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                // The path to the newly-added items are not absolute.
                if (!Path.isAbsolute(path)) {
                  path = Path.resolve(process.cwd(), path);
                }

                asset = _this15.getLoadedAsset(path);

                _this15.entryAssets["delete"](asset);

                _this15.unloadAsset(asset);

                _this15.bundle();

              case 5:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee18);
      }))();
    }
  }, {
    key: "middleware",
    value: function middleware() {
      this.bundle();
      return Server.middleware(this);
    }
  }, {
    key: "serve",
    value: function serve() {
      var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1234;
      var https = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var host = arguments.length > 2 ? arguments[2] : undefined;

      var _this16 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee19() {
        return regeneratorRuntime.wrap(function _callee19$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return Server.serve(_this16, port, host, https);

              case 2:
                _this16.server = _context20.sent;
                _context20.prev = 3;
                _context20.next = 6;
                return _this16.bundle();

              case 6:
                _context20.next = 10;
                break;

              case 8:
                _context20.prev = 8;
                _context20.t0 = _context20["catch"](3);

              case 10:
                return _context20.abrupt("return", _this16.server);

              case 11:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee19, null, [[3, 8]]);
      }))();
    }
  }]);

  return Bundler;
}(EventEmitter);

module.exports = Bundler;
Bundler.Asset = require('./Asset');
Bundler.Packager = require('./packagers/Packager');