"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var presetEnv = require('@babel/preset-env');

var getTargetEngines = require('../../utils/getTargetEngines');
/**
 * Generates a @babel/preset-env config for an asset.
 * This is done by finding the source module's target engines, and the app's
 * target engines, and doing a diff to include only the necessary plugins.
 */


function getEnvConfig(_x, _x2) {
  return _getEnvConfig.apply(this, arguments);
}

function _getEnvConfig() {
  _getEnvConfig = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(asset, isSourceModule) {
    var targetEngines, targetEnv, sourceEngines, sourceEnv, sourcePlugins;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getTargetEngines(asset, true);

          case 2:
            targetEngines = _context.sent;
            _context.next = 5;
            return getEnvPlugins(targetEngines, true);

          case 5:
            targetEnv = _context.sent;

            if (targetEnv) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", null);

          case 8:
            if (isSourceModule) {
              _context.next = 20;
              break;
            }

            _context.next = 11;
            return getTargetEngines(asset, false);

          case 11:
            sourceEngines = _context.sent;
            _context.next = 14;
            return getEnvPlugins(sourceEngines, false);

          case 14:
            _context.t0 = _context.sent;

            if (_context.t0) {
              _context.next = 17;
              break;
            }

            _context.t0 = targetEnv;

          case 17:
            sourceEnv = _context.t0;
            // Do a diff of the returned plugins. We only need to process the remaining plugins to get to the app target.
            sourcePlugins = new Set(sourceEnv.map(function (p) {
              return p[0];
            }));
            targetEnv = targetEnv.filter(function (plugin) {
              return !sourcePlugins.has(plugin[0]);
            });

          case 20:
            return _context.abrupt("return", {
              internal: true,
              babelVersion: 7,
              config: {
                plugins: targetEnv
              }
            });

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getEnvConfig.apply(this, arguments);
}

var envCache = new Map();

function getEnvPlugins(_x3) {
  return _getEnvPlugins.apply(this, arguments);
}

function _getEnvPlugins() {
  _getEnvPlugins = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(targets) {
    var useBuiltIns,
        key,
        options,
        plugins,
        _args2 = arguments;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            useBuiltIns = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : false;

            if (targets) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", null);

          case 3:
            key = JSON.stringify(targets);

            if (!envCache.has(key)) {
              _context2.next = 6;
              break;
            }

            return _context2.abrupt("return", envCache.get(key));

          case 6:
            options = {
              targets: targets,
              modules: false,
              useBuiltIns: useBuiltIns ? 'entry' : false,
              shippedProposals: true
            };

            if (useBuiltIns) {
              options.corejs = 2;
            }

            plugins = presetEnv["default"]({
              assertVersion: function assertVersion() {
                return true;
              }
            }, options).plugins;
            envCache.set(key, plugins);
            return _context2.abrupt("return", plugins);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getEnvPlugins.apply(this, arguments);
}

module.exports = getEnvConfig;