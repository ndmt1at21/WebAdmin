"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _require = require('terser'),
    minify = _require.minify;

var SourceMap = require('../SourceMap');

module.exports =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(asset) {
    var source, customConfig, options, sourceMap, result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return asset.parseIfNeeded();

          case 2:
            _context.next = 4;
            return asset.generate();

          case 4:
            source = _context.sent[0].value;
            _context.next = 7;
            return asset.getConfig(['.uglifyrc', '.terserrc']);

          case 7:
            customConfig = _context.sent;
            options = {
              warnings: true,
              safari10: true,
              mangle: {
                toplevel: !asset.options.scopeHoist
              }
            };

            if (asset.options.sourceMaps) {
              sourceMap = new SourceMap();
              options.output = {
                source_map: {
                  add: function add(source, gen_line, gen_col, orig_line, orig_col, name) {
                    sourceMap.addMapping({
                      source: source,
                      name: name,
                      original: {
                        line: orig_line,
                        column: orig_col
                      },
                      generated: {
                        line: gen_line,
                        column: gen_col
                      }
                    });
                  }
                }
              };
            }

            if (customConfig) {
              options = Object.assign(options, customConfig);
            }

            result = minify(source, options);

            if (!result.error) {
              _context.next = 14;
              break;
            }

            throw result.error;

          case 14:
            if (!sourceMap) {
              _context.next = 22;
              break;
            }

            if (!asset.sourceMap) {
              _context.next = 21;
              break;
            }

            _context.next = 18;
            return new SourceMap().extendSourceMap(asset.sourceMap, sourceMap);

          case 18:
            asset.sourceMap = _context.sent;
            _context.next = 22;
            break;

          case 21:
            asset.sourceMap = sourceMap;

          case 22:
            // babel-generator did our code generation for us, so remove the old AST
            asset.ast = null;
            asset.outputCode = result.code;
            asset.isAstDirty = false;

          case 25:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();