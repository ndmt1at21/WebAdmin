"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var loadPlugins = require('../utils/loadPlugins');

var posthtml = require('posthtml');

var posthtmlParse = require('posthtml-parser');

function parse(_x, _x2) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(code, asset) {
    var config;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getConfig(asset);

          case 2:
            config = _context.sent;

            if (!config) {
              config = {};
            }

            return _context.abrupt("return", posthtmlParse(code, config));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parse.apply(this, arguments);
}

function transform(_x3) {
  return _transform.apply(this, arguments);
}

function _transform() {
  _transform = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(asset) {
    var config, res;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getConfig(asset);

          case 2:
            config = _context2.sent;

            if (config) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return");

          case 5:
            _context2.next = 7;
            return asset.parseIfNeeded();

          case 7:
            _context2.next = 9;
            return posthtml(config.plugins).process(asset.ast, config);

          case 9:
            res = _context2.sent;
            asset.ast = res.tree;
            asset.isAstDirty = true;

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _transform.apply(this, arguments);
}

function getConfig(_x4) {
  return _getConfig.apply(this, arguments);
}

function _getConfig() {
  _getConfig = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(asset) {
    var config, plugins, depConfig;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return asset.getConfig(['.posthtmlrc', '.posthtmlrc.js', 'posthtml.config.js'], {
              packageKey: 'posthtml'
            });

          case 2:
            config = _context3.sent;

            if (!(!config && !asset.options.minify)) {
              _context3.next = 5;
              break;
            }

            return _context3.abrupt("return");

          case 5:
            config = config || {};
            plugins = config.plugins;

            if (_typeof(plugins) === 'object') {
              // This is deprecated in favor of result messages but kept for compatibility
              // See https://github.com/posthtml/posthtml-include/blob/e4f2a57c2e52ff721eed747b65eddf7d7a1451e3/index.js#L18-L26
              depConfig = {
                addDependencyTo: {
                  addDependency: function addDependency(name) {
                    return asset.addDependency(name, {
                      includedInParent: true
                    });
                  }
                }
              };
              Object.keys(plugins).forEach(function (p) {
                return Object.assign(plugins[p], depConfig);
              });
            }

            _context3.next = 10;
            return loadPlugins(plugins, asset.name);

          case 10:
            config.plugins = _context3.sent;
            config.skipParse = true;
            return _context3.abrupt("return", config);

          case 13:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getConfig.apply(this, arguments);
}

module.exports = {
  parse: parse,
  transform: transform
};