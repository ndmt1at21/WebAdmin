"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var posthtml = require('posthtml');

var htmlnano = require('htmlnano');

module.exports =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(asset) {
    var htmlNanoConfig, res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return asset.parseIfNeeded();

          case 2:
            _context.t0 = Object;
            _context.t1 = {};
            _context.next = 6;
            return asset.getConfig(['.htmlnanorc', '.htmlnanorc.js'], {
              packageKey: 'htmlnano'
            });

          case 6:
            _context.t2 = _context.sent;
            _context.t3 = {
              minifyCss: false,
              minifyJs: false
            };
            htmlNanoConfig = _context.t0.assign.call(_context.t0, _context.t1, _context.t2, _context.t3);
            _context.next = 11;
            return posthtml([htmlnano(htmlNanoConfig)]).process(asset.ast, {
              skipParse: true
            });

          case 11:
            res = _context.sent;
            asset.ast = res.tree;
            asset.isAstDirty = true;

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();