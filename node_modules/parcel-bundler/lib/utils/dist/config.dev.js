"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var fs = require('@parcel/fs');

var path = require('path');

var clone = require('clone');

var PARSERS = {
  json: require('json5').parse,
  toml: require('@iarna/toml').parse
};
var existsCache = new Map();

function resolve(_x, _x2) {
  return _resolve.apply(this, arguments);
}

function _resolve() {
  _resolve = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(filepath, filenames) {
    var root,
        _iteratorNormalCompletion,
        _didIteratorError,
        _iteratorError,
        _iterator,
        _step,
        filename,
        file,
        exists,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            root = _args.length > 2 && _args[2] !== undefined ? _args[2] : path.parse(filepath).root;
            filepath = path.dirname(filepath); // Don't traverse above the module root

            if (!(filepath === root || path.basename(filepath) === 'node_modules')) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", null);

          case 4:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 7;
            _iterator = filenames[Symbol.iterator]();

          case 9:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 26;
              break;
            }

            filename = _step.value;
            file = path.join(filepath, filename);

            if (!existsCache.has(file)) {
              _context.next = 16;
              break;
            }

            _context.t0 = existsCache.get(file);
            _context.next = 19;
            break;

          case 16:
            _context.next = 18;
            return fs.exists(file);

          case 18:
            _context.t0 = _context.sent;

          case 19:
            exists = _context.t0;

            if (!exists) {
              _context.next = 23;
              break;
            }

            existsCache.set(file, true);
            return _context.abrupt("return", file);

          case 23:
            _iteratorNormalCompletion = true;
            _context.next = 9;
            break;

          case 26:
            _context.next = 32;
            break;

          case 28:
            _context.prev = 28;
            _context.t1 = _context["catch"](7);
            _didIteratorError = true;
            _iteratorError = _context.t1;

          case 32:
            _context.prev = 32;
            _context.prev = 33;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 35:
            _context.prev = 35;

            if (!_didIteratorError) {
              _context.next = 38;
              break;
            }

            throw _iteratorError;

          case 38:
            return _context.finish(35);

          case 39:
            return _context.finish(32);

          case 40:
            return _context.abrupt("return", resolve(filepath, filenames, root));

          case 41:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 28, 32, 40], [33,, 35, 39]]);
  }));
  return _resolve.apply(this, arguments);
}

function load(_x3, _x4) {
  return _load.apply(this, arguments);
}

function _load() {
  _load = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(filepath, filenames) {
    var root,
        configFile,
        extname,
        configContent,
        parse,
        _args2 = arguments;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            root = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : path.parse(filepath).root;
            _context2.next = 3;
            return resolve(filepath, filenames, root);

          case 3:
            configFile = _context2.sent;

            if (!configFile) {
              _context2.next = 22;
              break;
            }

            _context2.prev = 5;
            extname = path.extname(configFile).slice(1);

            if (!(extname === 'js')) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt("return", clone(require(configFile)));

          case 9:
            _context2.next = 11;
            return fs.readFile(configFile);

          case 11:
            configContent = _context2.sent.toString();
            parse = PARSERS[extname] || PARSERS.json;
            return _context2.abrupt("return", configContent ? parse(configContent) : null);

          case 16:
            _context2.prev = 16;
            _context2.t0 = _context2["catch"](5);

            if (!(_context2.t0.code === 'MODULE_NOT_FOUND' || _context2.t0.code === 'ENOENT')) {
              _context2.next = 21;
              break;
            }

            existsCache["delete"](configFile);
            return _context2.abrupt("return", null);

          case 21:
            throw _context2.t0;

          case 22:
            return _context2.abrupt("return", null);

          case 23:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[5, 16]]);
  }));
  return _load.apply(this, arguments);
}

exports.resolve = resolve;
exports.load = load;