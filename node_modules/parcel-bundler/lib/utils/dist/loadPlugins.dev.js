"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var localRequire = require('./localRequire');

module.exports =
/*#__PURE__*/
function () {
  var _loadPlugins = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(plugins, relative) {
    var mapPlugins;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!Array.isArray(plugins)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", Promise.all(plugins.map(function (p) {
              return loadPlugin(p, relative);
            }).filter(Boolean)));

          case 4:
            if (!(_typeof(plugins) === 'object')) {
              _context.next = 11;
              break;
            }

            _context.next = 7;
            return Promise.all(Object.keys(plugins).map(function (p) {
              return loadPlugin(p, relative, plugins[p]);
            }));

          case 7:
            mapPlugins = _context.sent;
            return _context.abrupt("return", mapPlugins.filter(Boolean));

          case 11:
            return _context.abrupt("return", []);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  function loadPlugins(_x, _x2) {
    return _loadPlugins.apply(this, arguments);
  }

  return loadPlugins;
}();

function loadPlugin(_x3, _x4, _x5) {
  return _loadPlugin.apply(this, arguments);
}

function _loadPlugin() {
  _loadPlugin = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(plugin, relative, options) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof plugin === 'string')) {
              _context2.next = 8;
              break;
            }

            _context2.next = 3;
            return localRequire(plugin, relative);

          case 3:
            plugin = _context2.sent;
            plugin = plugin["default"] || plugin;

            if (_typeof(options) !== 'object') {
              options = {};
            }

            if (Object.keys(options).length > 0) {
              plugin = plugin(options);
            }

            plugin = plugin["default"] || plugin;

          case 8:
            return _context2.abrupt("return", plugin);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadPlugin.apply(this, arguments);
}