"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var config = require('./config');

var dotenv = require('dotenv');

var variableExpansion = require('dotenv-expand');

function loadEnv(_x) {
  return _loadEnv.apply(this, arguments);
}

function _loadEnv() {
  _loadEnv = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(filepath) {
    var NODE_ENV, dotenvFiles;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            NODE_ENV = process.env.NODE_ENV || 'development';
            dotenvFiles = [".env.".concat(NODE_ENV, ".local"), ".env.".concat(NODE_ENV), // Don't include `.env.local` for `test` environment
            // since normally you expect tests to produce the same
            // results for everyone
            NODE_ENV !== 'test' && '.env.local', '.env'].filter(Boolean);
            _context2.next = 4;
            return Promise.all(dotenvFiles.map(
            /*#__PURE__*/
            function () {
              var _ref = (0, _asyncToGenerator2["default"])(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee(dotenvFile) {
                var envPath, envs;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return config.resolve(filepath, [dotenvFile]);

                      case 2:
                        envPath = _context.sent;

                        if (envPath) {
                          envs = dotenv.config({
                            path: envPath
                          });
                          variableExpansion(envs);
                        }

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x2) {
                return _ref.apply(this, arguments);
              };
            }()));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _loadEnv.apply(this, arguments);
}

module.exports = loadEnv;