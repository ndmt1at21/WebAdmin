"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var config = require('./config');

var _require = require('@parcel/utils'),
    promisify = _require.promisify;

var resolve = promisify(require('resolve'));

var commandExists = require('command-exists');

var logger = require('@parcel/logger');

var pipeSpawn = require('./pipeSpawn');

var PromiseQueue = require('./PromiseQueue');

var path = require('path');

var fs = require('@parcel/fs');

var WorkerFarm = require('@parcel/workers');

var YARN_LOCK = 'yarn.lock';

function install(_x, _x2) {
  return _install.apply(this, arguments);
}

function _install() {
  _install = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(modules, filepath) {
    var options,
        _options$installPeers,
        installPeers,
        _options$saveDev,
        saveDev,
        packageManager,
        packageLocation,
        cwd,
        commandToUse,
        args,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            _options$installPeers = options.installPeers, installPeers = _options$installPeers === void 0 ? true : _options$installPeers, _options$saveDev = options.saveDev, saveDev = _options$saveDev === void 0 ? true : _options$saveDev, packageManager = options.packageManager;

            if (typeof modules === 'string') {
              modules = [modules];
            }

            logger.progress("Installing ".concat(modules.join(', '), "..."));
            _context.next = 6;
            return config.resolve(filepath, ['package.json']);

          case 6:
            packageLocation = _context.sent;
            cwd = packageLocation ? path.dirname(packageLocation) : process.cwd();

            if (packageManager) {
              _context.next = 12;
              break;
            }

            _context.next = 11;
            return determinePackageManager(filepath);

          case 11:
            packageManager = _context.sent;

          case 12:
            commandToUse = packageManager === 'npm' ? 'install' : 'add';
            args = [commandToUse].concat(_toConsumableArray(modules));

            if (saveDev) {
              args.push('-D');
            } else if (packageManager === 'npm') {
              args.push('--save');
            } // npm doesn't auto-create a package.json when installing,
            // so create an empty one if needed.


            if (!(packageManager === 'npm' && !packageLocation)) {
              _context.next = 18;
              break;
            }

            _context.next = 18;
            return fs.writeFile(path.join(cwd, 'package.json'), '{}');

          case 18:
            _context.prev = 18;
            _context.next = 21;
            return pipeSpawn(packageManager, args, {
              cwd: cwd
            });

          case 21:
            _context.next = 26;
            break;

          case 23:
            _context.prev = 23;
            _context.t0 = _context["catch"](18);
            throw new Error("Failed to install ".concat(modules.join(', '), "."));

          case 26:
            if (!installPeers) {
              _context.next = 29;
              break;
            }

            _context.next = 29;
            return Promise.all(modules.map(function (m) {
              return installPeerDependencies(filepath, m, options);
            }));

          case 29:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[18, 23]]);
  }));
  return _install.apply(this, arguments);
}

function installPeerDependencies(_x3, _x4, _x5) {
  return _installPeerDependencies.apply(this, arguments);
}

function _installPeerDependencies() {
  _installPeerDependencies = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(filepath, name, options) {
    var basedir, _ref2, _ref3, resolved, pkg, peers, modules, peer;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            basedir = path.dirname(filepath);
            _context2.next = 3;
            return resolve(name, {
              basedir: basedir
            });

          case 3:
            _ref2 = _context2.sent;
            _ref3 = (0, _slicedToArray2["default"])(_ref2, 1);
            resolved = _ref3[0];
            _context2.next = 8;
            return config.load(resolved, ['package.json']);

          case 8:
            pkg = _context2.sent;
            peers = pkg.peerDependencies || {};
            modules = [];

            for (peer in peers) {
              modules.push("".concat(peer, "@").concat(peers[peer]));
            }

            if (!modules.length) {
              _context2.next = 15;
              break;
            }

            _context2.next = 15;
            return install(modules, filepath, Object.assign({}, options, {
              installPeers: false
            }));

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _installPeerDependencies.apply(this, arguments);
}

function determinePackageManager(_x6) {
  return _determinePackageManager.apply(this, arguments);
}

function _determinePackageManager() {
  _determinePackageManager = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(filepath) {
    var yarnLockFile, hasYarn;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return config.resolve(filepath, [YARN_LOCK]);

          case 2:
            yarnLockFile = _context3.sent;

            if (yarnLockFile) {
              _context3.next = 5;
              break;
            }

            return _context3.abrupt("return", 'npm');

          case 5:
            _context3.next = 7;
            return checkForYarnCommand();

          case 7:
            hasYarn = _context3.sent;

            if (!hasYarn) {
              _context3.next = 10;
              break;
            }

            return _context3.abrupt("return", 'yarn');

          case 10:
            return _context3.abrupt("return", 'npm');

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _determinePackageManager.apply(this, arguments);
}

var hasYarn = null;

function checkForYarnCommand() {
  return _checkForYarnCommand.apply(this, arguments);
}

function _checkForYarnCommand() {
  _checkForYarnCommand = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4() {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(hasYarn != null)) {
              _context4.next = 2;
              break;
            }

            return _context4.abrupt("return", hasYarn);

          case 2:
            _context4.prev = 2;
            _context4.next = 5;
            return commandExists('yarn');

          case 5:
            hasYarn = _context4.sent;
            _context4.next = 11;
            break;

          case 8:
            _context4.prev = 8;
            _context4.t0 = _context4["catch"](2);
            hasYarn = false;

          case 11:
            return _context4.abrupt("return", hasYarn);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[2, 8]]);
  }));
  return _checkForYarnCommand.apply(this, arguments);
}

var queue = new PromiseQueue(install, {
  maxConcurrent: 1,
  retry: false
});

module.exports =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee5() {
    var _len,
        args,
        _key,
        _args5 = arguments;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            for (_len = _args5.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = _args5[_key];
            }

            if (!WorkerFarm.isWorker()) {
              _context5.next = 5;
              break;
            }

            _context5.next = 4;
            return WorkerFarm.callMaster({
              location: __filename,
              args: args
            });

          case 4:
            return _context5.abrupt("return");

          case 5:
            queue.add.apply(queue, args);
            return _context5.abrupt("return", queue.run());

          case 7:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function () {
    return _ref.apply(this, arguments);
  };
}();