"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _require = require('path'),
    dirname = _require.dirname;

var _require2 = require('@parcel/utils'),
    promisify = _require2.promisify;

var resolve = promisify(require('resolve'));

var installPackage = require('./installPackage');

var getModuleParts = require('./getModuleParts');

var cache = new Map();

function localRequire(_x, _x2) {
  return _localRequire.apply(this, arguments);
}

function _localRequire() {
  _localRequire = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(name, path) {
    var triedInstall,
        _ref,
        _ref2,
        resolved,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            triedInstall = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
            _context.next = 3;
            return localResolve(name, path, triedInstall);

          case 3:
            _ref = _context.sent;
            _ref2 = (0, _slicedToArray2["default"])(_ref, 1);
            resolved = _ref2[0];
            return _context.abrupt("return", require(resolved));

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _localRequire.apply(this, arguments);
}

function localResolve(_x3, _x4) {
  return _localResolve.apply(this, arguments);
}

function _localResolve() {
  _localResolve = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(name, path) {
    var triedInstall,
        basedir,
        key,
        resolved,
        packageName,
        _args2 = arguments;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            triedInstall = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : false;
            basedir = dirname(path);
            key = basedir + ':' + name;
            resolved = cache.get(key);

            if (resolved) {
              _context2.next = 20;
              break;
            }

            _context2.prev = 5;
            _context2.next = 8;
            return resolve(name, {
              basedir: basedir
            });

          case 8:
            resolved = _context2.sent;
            _context2.next = 19;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t0 = _context2["catch"](5);

            if (!(_context2.t0.code === 'MODULE_NOT_FOUND' && !triedInstall)) {
              _context2.next = 18;
              break;
            }

            packageName = getModuleParts(name)[0];
            _context2.next = 17;
            return installPackage(packageName, path);

          case 17:
            return _context2.abrupt("return", localResolve(name, path, true));

          case 18:
            throw _context2.t0;

          case 19:
            cache.set(key, resolved);

          case 20:
            return _context2.abrupt("return", resolved);

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[5, 11]]);
  }));
  return _localResolve.apply(this, arguments);
}

localRequire.resolve = localResolve;
module.exports = localRequire;