"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var path = require('path');

var commandExists = require('command-exists');

var childProcess = require('child_process');

var _require = require('@parcel/utils'),
    promisify = _require.promisify;

var exec = promisify(childProcess.execFile);

var toml = require('@iarna/toml');

var fs = require('@parcel/fs');

var Asset = require('../Asset');

var config = require('../utils/config');

var pipeSpawn = require('../utils/pipeSpawn');

var md5 = require('../utils/md5');

var RUST_TARGET = 'wasm32-unknown-unknown';
var MAIN_FILES = ['src/lib.rs', 'src/main.rs']; // Track installation status so we don't need to check more than once

var rustInstalled = false;

var RustAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(RustAsset, _Asset);

  function RustAsset(name, options) {
    var _this6;

    _classCallCheck(this, RustAsset);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(RustAsset).call(this, name, options));
    _this6.type = 'wasm';
    return _this6;
  }

  _createClass(RustAsset, [{
    key: "process",
    value: function process() {
      // We don't want to process this asset if the worker is in a warm up phase
      // since the asset will also be processed by the main process, which
      // may cause errors since rust writes to the filesystem.
      if (this.options.isWarmUp) {
        return;
      }

      return _get(_getPrototypeOf(RustAsset.prototype), "process", this).call(this);
    }
  }, {
    key: "parse",
    value: function parse() {
      var _this = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var cargoConfig, cargoDir, isMainFile, mainFiles;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.installRust();

              case 2:
                _context.next = 4;
                return _this.getConfig(['Cargo.toml']);

              case 4:
                cargoConfig = _context.sent;
                isMainFile = false;

                if (!cargoConfig) {
                  _context.next = 15;
                  break;
                }

                mainFiles = MAIN_FILES.slice();

                if (cargoConfig.lib && cargoConfig.lib.path) {
                  mainFiles.push(cargoConfig.lib.path);
                }

                _context.t0 = path;
                _context.next = 12;
                return config.resolve(_this.name, ['Cargo.toml']);

              case 12:
                _context.t1 = _context.sent;
                cargoDir = _context.t0.dirname.call(_context.t0, _context.t1);
                isMainFile = mainFiles.some(function (file) {
                  return path.join(cargoDir, file) === _this.name;
                });

              case 15:
                if (!isMainFile) {
                  _context.next = 20;
                  break;
                }

                _context.next = 18;
                return _this.cargoBuild(cargoConfig, cargoDir);

              case 18:
                _context.next = 22;
                break;

              case 20:
                _context.next = 22;
                return _this.rustcBuild();

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }, {
    key: "installRust",
    value: function installRust() {
      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var _ref, _ref2, stdout, _ref3, _ref4;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!rustInstalled) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                _context2.prev = 2;
                _context2.next = 5;
                return commandExists('rustup');

              case 5:
                _context2.next = 10;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](2);
                throw new Error("Rust isn't installed. Visit https://www.rustup.rs/ for more info");

              case 10:
                _context2.next = 12;
                return exec('rustup', ['show']);

              case 12:
                _ref = _context2.sent;
                _ref2 = (0, _slicedToArray2["default"])(_ref, 1);
                stdout = _ref2[0];

                if (stdout.includes('nightly')) {
                  _context2.next = 20;
                  break;
                }

                _context2.next = 18;
                return pipeSpawn('rustup', ['update']);

              case 18:
                _context2.next = 20;
                return pipeSpawn('rustup', ['toolchain', 'install', 'nightly']);

              case 20:
                _context2.next = 22;
                return exec('rustup', ['target', 'list', '--toolchain', 'nightly']);

              case 22:
                _ref3 = _context2.sent;
                _ref4 = (0, _slicedToArray2["default"])(_ref3, 1);
                stdout = _ref4[0];

                if (stdout.includes(RUST_TARGET + ' (installed)')) {
                  _context2.next = 28;
                  break;
                }

                _context2.next = 28;
                return pipeSpawn('rustup', ['target', 'add', RUST_TARGET, '--toolchain', 'nightly']);

              case 28:
                rustInstalled = true;

              case 29:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[2, 7]]);
      }))();
    }
  }, {
    key: "cargoBuild",
    value: function cargoBuild(cargoConfig, cargoDir) {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var args, _ref5, _ref6, stdout, cargoMetadata, cargoTargetDir, outDir, rustName;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                // Ensure the cargo config has cdylib as the crate-type
                if (!cargoConfig.lib) {
                  cargoConfig.lib = {};
                }

                if (!Array.isArray(cargoConfig.lib['crate-type'])) {
                  cargoConfig.lib['crate-type'] = [];
                }

                if (cargoConfig.lib['crate-type'].includes('cdylib')) {
                  _context3.next = 6;
                  break;
                }

                cargoConfig.lib['crate-type'].push('cdylib');
                _context3.next = 6;
                return fs.writeFile(path.join(cargoDir, 'Cargo.toml'), toml.stringify(cargoConfig));

              case 6:
                // Run cargo
                args = ['+nightly', 'build', '--target', RUST_TARGET, '--release'];
                _context3.next = 9;
                return exec('cargo', args, {
                  cwd: cargoDir
                });

              case 9:
                _context3.next = 11;
                return exec('cargo', ['metadata', '--format-version', '1'], {
                  cwd: cargoDir
                });

              case 11:
                _ref5 = _context3.sent;
                _ref6 = (0, _slicedToArray2["default"])(_ref5, 1);
                stdout = _ref6[0];
                cargoMetadata = JSON.parse(stdout);
                cargoTargetDir = cargoMetadata.target_directory;
                outDir = path.join(cargoTargetDir, RUST_TARGET, 'release'); // Rust converts '-' to '_' when outputting files.

                rustName = cargoConfig["package"].name.replace(/-/g, '_');
                _this2.wasmPath = path.join(outDir, rustName + '.wasm');
                _this2.depsPath = path.join(outDir, rustName + '.d');

              case 20:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  }, {
    key: "rustcBuild",
    value: function rustcBuild() {
      var _this3 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        var name, args;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return fs.mkdirp(_this3.options.cacheDir);

              case 2:
                name = md5(_this3.name);
                _this3.wasmPath = path.join(_this3.options.cacheDir, name + '.wasm'); // Run rustc to compile the code

                args = ['+nightly', '--target', RUST_TARGET, '-O', '--crate-type=cdylib', _this3.name, '-o', _this3.wasmPath];
                _context4.next = 7;
                return exec('rustc', args);

              case 7:
                // Run again to collect dependencies
                _this3.depsPath = path.join(_this3.options.cacheDir, name + '.d');
                _context4.next = 10;
                return exec('rustc', [_this3.name, '--emit=dep-info', '-o', _this3.depsPath]);

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    }
  }, {
    key: "collectDependencies",
    value: function collectDependencies() {
      var _this4 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        var contents, dir, deps, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, dep;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return fs.readFile(_this4.depsPath, 'utf8');

              case 2:
                contents = _context5.sent;
                dir = path.dirname(_this4.name);
                deps = contents.split('\n').filter(Boolean).slice(1);
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context5.prev = 8;

                for (_iterator = deps[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  dep = _step.value;
                  dep = path.resolve(dir, dep.slice(0, dep.indexOf(': ')));

                  if (dep !== _this4.name) {
                    _this4.addDependency(dep, {
                      includedInParent: true
                    });
                  }
                }

                _context5.next = 16;
                break;

              case 12:
                _context5.prev = 12;
                _context5.t0 = _context5["catch"](8);
                _didIteratorError = true;
                _iteratorError = _context5.t0;

              case 16:
                _context5.prev = 16;
                _context5.prev = 17;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 19:
                _context5.prev = 19;

                if (!_didIteratorError) {
                  _context5.next = 22;
                  break;
                }

                throw _iteratorError;

              case 22:
                return _context5.finish(19);

              case 23:
                return _context5.finish(16);

              case 24:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[8, 12, 16, 24], [17,, 19, 23]]);
      }))();
    }
  }, {
    key: "generate",
    value: function generate() {
      var _this5 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6() {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", {
                  wasm: {
                    path: _this5.wasmPath,
                    // pass output path to RawPackager
                    mtime: Date.now() // force re-bundling since otherwise the hash would never change

                  }
                });

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }))();
    }
  }]);

  return RustAsset;
}(Asset);

module.exports = RustAsset;