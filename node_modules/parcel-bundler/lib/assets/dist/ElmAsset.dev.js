"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Asset = require('../Asset');

var commandExists = require('command-exists');

var localRequire = require('../utils/localRequire');

var _require = require('terser'),
    minify = _require.minify;

var path = require('path');

var spawn = require('cross-spawn');

var ElmAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(ElmAsset, _Asset);

  function ElmAsset(name, options) {
    var _this4;

    _classCallCheck(this, ElmAsset);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(ElmAsset).call(this, name, options));
    _this4.type = 'js';
    return _this4;
  }

  _createClass(ElmAsset, [{
    key: "parse",
    value: function parse() {
      var _this = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var options, elmConfig;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = {
                  cwd: path.dirname(_this.name)
                }; // If elm is not installed globally, install it locally.

                _context.prev = 1;
                _context.next = 4;
                return commandExists('elm');

              case 4:
                _context.next = 11;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](1);
                _context.next = 10;
                return localRequire('elm', _this.name);

              case 10:
                options.pathToElm = path.join(path.dirname(require.resolve('elm')), 'bin', 'elm');

              case 11:
                _context.next = 13;
                return localRequire('node-elm-compiler', _this.name);

              case 13:
                _this.elm = _context.sent;
                _context.next = 16;
                return _this.getConfig(['elm.json'], {
                  load: false
                });

              case 16:
                elmConfig = _context.sent;

                if (elmConfig) {
                  _context.next = 22;
                  break;
                }

                _context.next = 20;
                return _this.createElmConfig(options);

              case 20:
                _context.next = 22;
                return _this.getConfig(['elm.json'], {
                  load: false
                });

              case 22:
                options.debug = !_this.options.production;

                if (_this.options.minify) {
                  options.optimize = true;
                }

                _this.elmOpts = options;

              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[1, 6]]);
      }))();
    }
  }, {
    key: "collectDependencies",
    value: function collectDependencies() {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var dependencies, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, dependency;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _this2.elm.findAllDependencies(_this2.name);

              case 2:
                dependencies = _context2.sent;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context2.prev = 6;

                for (_iterator = dependencies[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  dependency = _step.value;

                  _this2.addDependency(dependency, {
                    includedInParent: true
                  });
                }

                _context2.next = 14;
                break;

              case 10:
                _context2.prev = 10;
                _context2.t0 = _context2["catch"](6);
                _didIteratorError = true;
                _iteratorError = _context2.t0;

              case 14:
                _context2.prev = 14;
                _context2.prev = 15;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 17:
                _context2.prev = 17;

                if (!_didIteratorError) {
                  _context2.next = 20;
                  break;
                }

                throw _iteratorError;

              case 20:
                return _context2.finish(17);

              case 21:
                return _context2.finish(14);

              case 22:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[6, 10, 14, 22], [15,, 17, 21]]);
      }))();
    }
  }, {
    key: "createElmConfig",
    value: function createElmConfig(options) {
      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var cp;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                cp = spawn(options.pathToElm || 'elm', ['init']);
                cp.stdin.write('y\n');
                return _context3.abrupt("return", new Promise(function (resolve, reject) {
                  cp.on('error', reject);
                  cp.on('close', function (code) {
                    if (code !== 0) {
                      return reject(new Error('elm init failed.'));
                    }

                    return resolve();
                  });
                }));

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  }, {
    key: "generate",
    value: function generate() {
      var _this3 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        var compiled, _ref, inject, output, pack;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                pack = function _ref3(source) {
                  var options = {
                    compress: {
                      keep_fargs: false,
                      passes: 2,
                      pure_funcs: ['F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9'],
                      pure_getters: true,
                      unsafe: true,
                      unsafe_comps: true
                    },
                    mangle: true,
                    rename: false
                  };
                  var result = minify(source, options);

                  if (result.error) {
                    throw result.error;
                  }

                  return result.code;
                };

                _context4.next = 3;
                return _this3.elm.compileToString(_this3.name, _this3.elmOpts);

              case 3:
                compiled = _context4.sent;
                _this3.contents = compiled.toString();

                if (!_this3.options.hmr) {
                  _context4.next = 11;
                  break;
                }

                _context4.next = 8;
                return localRequire('elm-hot', _this3.name);

              case 8:
                _ref = _context4.sent;
                inject = _ref.inject;
                _this3.contents = inject(_this3.contents);

              case 11:
                output = _this3.contents;

                if (_this3.options.minify) {
                  output = pack(output);
                }

                return _context4.abrupt("return", _defineProperty({}, _this3.type, output));

              case 14:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    }
  }, {
    key: "generateErrorMessage",
    value: function generateErrorMessage(err) {
      // The generated stack is not useful, but other code may
      // expect it and try to print it, so make it an empty string.
      err.stack = '';
      return err;
    }
  }]);

  return ElmAsset;
}(Asset);

module.exports = ElmAsset;