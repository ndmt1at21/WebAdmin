"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var urlJoin = require('../utils/urlJoin');

var isURL = require('../utils/is-url');

var Asset = require('../Asset');

var logger = require('@parcel/logger'); // A list of all attributes in a schema that may produce a dependency
// Based on https://schema.org/ImageObject
// Section "Instances of ImageObject may appear as values for the following properties"


var SCHEMA_ATTRS = ['logo', 'photo', 'image', 'thumbnail', 'screenshot', 'primaryImageOfPage', 'embedUrl', 'thumbnailUrl', 'video', 'contentUrl'];

var JSONLDAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(JSONLDAsset, _Asset);

  function JSONLDAsset(name, options) {
    var _this;

    _classCallCheck(this, JSONLDAsset);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(JSONLDAsset).call(this, name, options));
    _this.type = 'jsonld';
    return _this;
  }

  _createClass(JSONLDAsset, [{
    key: "parse",
    value: function parse(content) {
      return JSON.parse(content.trim());
    }
  }, {
    key: "collectDependencies",
    value: function collectDependencies() {
      if (!this.options.publicURL.startsWith('http')) {
        logger.warn("Please specify a publicURL using --public-url, otherwise schema assets won't be collected");
        return;
      }

      for (var schemaKey in this.ast) {
        if (SCHEMA_ATTRS.includes(schemaKey)) {
          this.collectFromKey(this.ast, schemaKey);
          this.isAstDirty = true;
        }
      }
    } // Auxiliary method for collectDependencies() to use for recursion

  }, {
    key: "collectFromKey",
    value: function collectFromKey(schema, schemaKey) {
      var _this2 = this;

      if (!schema.hasOwnProperty(schemaKey)) {
        return;
      } // values can be strings or objects
      // if it's not a string, it should have a url


      if (typeof schema[schemaKey] === 'string') {
        var assetPath = this.addURLDependency(schema[schemaKey]);

        if (!isURL(assetPath)) {
          // paths aren't allowed, values must be urls
          assetPath = urlJoin(this.options.publicURL, assetPath);
        }

        schema[schemaKey] = assetPath;
      } else if (Array.isArray(schema[schemaKey])) {
        Object.keys(schema[schemaKey]).forEach(function (i) {
          _this2.collectFromKey(schema[schemaKey], i);
        });
      } else {
        this.collectFromKey(schema[schemaKey], 'url');
      }
    }
  }, {
    key: "generate",
    value: function generate() {
      if (this.options.production) {
        return JSON.stringify(this.ast);
      } else {
        return JSON.stringify(this.ast, null, 2);
      }
    }
  }]);

  return JSONLDAsset;
}(Asset);

module.exports = JSONLDAsset;