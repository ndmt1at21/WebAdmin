"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Asset = require('../Asset');

var api = require('posthtml/lib/api');

var urlJoin = require('../utils/urlJoin');

var render = require('posthtml-render');

var posthtmlTransform = require('../transforms/posthtml');

var htmlnanoTransform = require('../transforms/htmlnano');

var isURL = require('../utils/is-url'); // A list of all attributes that may produce a dependency
// Based on https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes


var ATTRS = {
  src: ['script', 'img', 'audio', 'video', 'source', 'track', 'iframe', 'embed'],
  href: ['link', 'a', 'use'],
  srcset: ['img', 'source'],
  poster: ['video'],
  'xlink:href': ['use', 'image'],
  content: ['meta'],
  data: ['object']
}; // A list of metadata that should produce a dependency
// Based on:
// - http://schema.org/
// - http://ogp.me
// - https://developer.twitter.com/en/docs/tweets/optimize-with-cards/overview/markup
// - https://msdn.microsoft.com/en-us/library/dn255024.aspx

var META = {
  property: ['og:image', 'og:image:url', 'og:image:secure_url', 'og:audio', 'og:audio:secure_url', 'og:video', 'og:video:secure_url'],
  name: ['twitter:image', 'msapplication-square150x150logo', 'msapplication-square310x310logo', 'msapplication-square70x70logo', 'msapplication-wide310x150logo', 'msapplication-TileImage', 'msapplication-config'],
  itemprop: ['image', 'logo', 'screenshot', 'thumbnailUrl', 'contentUrl', 'downloadUrl']
};
var SCRIPT_TYPES = {
  'application/javascript': 'js',
  'text/javascript': 'js',
  'application/json': false,
  'application/ld+json': 'jsonld',
  'text/html': false
}; // Options to be passed to `addURLDependency` for certain tags + attributes

var OPTIONS = {
  a: {
    href: {
      entry: true
    }
  },
  iframe: {
    src: {
      entry: true
    }
  }
};

var HTMLAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(HTMLAsset, _Asset);

  function HTMLAsset(name, options) {
    var _this6;

    _classCallCheck(this, HTMLAsset);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(HTMLAsset).call(this, name, options));
    _this6.type = 'html';
    _this6.isAstDirty = false;
    _this6.hmrPageReload = true;
    return _this6;
  }

  _createClass(HTMLAsset, [{
    key: "parse",
    value: function parse(code) {
      var _this = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var res;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return posthtmlTransform.parse(code, _this);

              case 2:
                res = _context.sent;
                res.walk = api.walk;
                res.match = api.match;
                return _context.abrupt("return", res);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }, {
    key: "processSingleDependency",
    value: function processSingleDependency(path, opts) {
      var assetPath = this.addURLDependency(path, opts);

      if (!isURL(assetPath)) {
        assetPath = urlJoin(this.options.publicURL, assetPath);
      }

      return assetPath;
    }
  }, {
    key: "collectSrcSetDependencies",
    value: function collectSrcSetDependencies(srcset, opts) {
      var newSources = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = srcset.split(',')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var source = _step.value;
          var pair = source.trim().split(' ');
          if (pair.length === 0) continue;
          pair[0] = this.processSingleDependency(pair[0], opts);
          newSources.push(pair.join(' '));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return newSources.join(',');
    }
  }, {
    key: "getAttrDepHandler",
    value: function getAttrDepHandler(attr) {
      if (attr === 'srcset') {
        return this.collectSrcSetDependencies;
      }

      return this.processSingleDependency;
    }
  }, {
    key: "collectDependencies",
    value: function collectDependencies() {
      var _this7 = this;

      var ast = this.ast; // Add bundled dependencies from plugins like posthtml-extend or posthtml-include, if any

      if (ast.messages) {
        ast.messages.forEach(function (message) {
          if (message.type === 'dependency') {
            _this7.addDependency(message.file, {
              includedInParent: true
            });
          }
        });
      }

      ast.walk(function (node) {
        if (node.attrs) {
          if (node.tag === 'meta') {
            if (!Object.keys(node.attrs).some(function (attr) {
              var values = META[attr];
              return values && values.includes(node.attrs[attr]) && node.attrs.content !== '';
            })) {
              return node;
            }
          }

          if (node.tag === 'link' && node.attrs.rel === 'manifest' && node.attrs.href) {
            node.attrs.href = _this7.getAttrDepHandler('href').call(_this7, node.attrs.href, {
              entry: true
            });
            _this7.isAstDirty = true;
            return node;
          }

          for (var attr in node.attrs) {
            var attrVal = node.attrs[attr];

            if (!attrVal) {
              continue;
            } // Check for virtual paths


            if (node.tag === 'a' && attrVal.lastIndexOf('.') < 1) {
              continue;
            }

            var elements = ATTRS[attr];

            if (elements && elements.includes(node.tag)) {
              var depHandler = _this7.getAttrDepHandler(attr);

              var options = OPTIONS[node.tag];
              node.attrs[attr] = depHandler.call(_this7, attrVal, options && options[attr]);
              _this7.isAstDirty = true;
            }
          }
        }

        return node;
      });
    }
  }, {
    key: "pretransform",
    value: function pretransform() {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return posthtmlTransform.transform(_this2);

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    }
  }, {
    key: "transform",
    value: function transform() {
      var _this3 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!_this3.options.minify) {
                  _context3.next = 3;
                  break;
                }

                _context3.next = 3;
                return htmlnanoTransform(_this3);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  }, {
    key: "generate",
    value: function generate() {
      var _this4 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        var parts;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // Extract inline <script> and <style> tags for processing.
                parts = [];

                if (_this4.ast) {
                  _this4.ast.walk(function (node) {
                    if (node.tag === 'script' || node.tag === 'style') {
                      var value = node.content && node.content.join('').trim();

                      if (value) {
                        var type;

                        if (node.tag === 'style') {
                          if (node.attrs && node.attrs.type) {
                            type = node.attrs.type.split('/')[1];
                          } else {
                            type = 'css';
                          }
                        } else if (node.attrs && node.attrs.type) {
                          // Skip JSON
                          if (SCRIPT_TYPES[node.attrs.type] === false) {
                            return node;
                          }

                          if (SCRIPT_TYPES[node.attrs.type]) {
                            type = SCRIPT_TYPES[node.attrs.type];
                          } else {
                            type = node.attrs.type.split('/')[1];
                          }
                        } else {
                          type = 'js';
                        }

                        parts.push({
                          type: type,
                          value: value,
                          inlineHTML: true,
                          meta: {
                            type: 'tag',
                            node: node
                          }
                        });
                      }
                    } // Process inline style attributes.


                    if (node.attrs && node.attrs.style) {
                      parts.push({
                        type: 'css',
                        value: node.attrs.style,
                        meta: {
                          type: 'attr',
                          node: node
                        }
                      });
                    }

                    return node;
                  });
                }

                return _context4.abrupt("return", parts);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    }
  }, {
    key: "postProcess",
    value: function postProcess(generated) {
      var _this5 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, rendition, _rendition$meta, type, node;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // Replace inline scripts and styles with processed results.
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context5.prev = 3;

                for (_iterator2 = generated[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  rendition = _step2.value;
                  _rendition$meta = rendition.meta, type = _rendition$meta.type, node = _rendition$meta.node;

                  if (type === 'attr' && rendition.type === 'css') {
                    node.attrs.style = rendition.value;
                  } else if (type === 'tag') {
                    if (rendition.isMain) {
                      node.content = rendition.value;
                    } // Delete "type" attribute, since CSS and JS are the defaults.
                    // Unless it's application/ld+json


                    if (node.attrs && (node.tag === 'style' || node.attrs.type && SCRIPT_TYPES[node.attrs.type] === 'js')) {
                      delete node.attrs.type;
                    }
                  }
                }

                _context5.next = 11;
                break;

              case 7:
                _context5.prev = 7;
                _context5.t0 = _context5["catch"](3);
                _didIteratorError2 = true;
                _iteratorError2 = _context5.t0;

              case 11:
                _context5.prev = 11;
                _context5.prev = 12;

                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }

              case 14:
                _context5.prev = 14;

                if (!_didIteratorError2) {
                  _context5.next = 17;
                  break;
                }

                throw _iteratorError2;

              case 17:
                return _context5.finish(14);

              case 18:
                return _context5.finish(11);

              case 19:
                return _context5.abrupt("return", [{
                  type: 'html',
                  value: render(_this5.ast)
                }]);

              case 20:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[3, 7, 11, 19], [12,, 14, 18]]);
      }))();
    }
  }]);

  return HTMLAsset;
}(Asset);

module.exports = HTMLAsset;