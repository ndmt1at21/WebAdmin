"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var Asset = require('../Asset');

var postcss = require('postcss');

var valueParser = require('postcss-value-parser');

var postcssTransform = require('../transforms/postcss');

var CssSyntaxError = require('postcss/lib/css-syntax-error');

var SourceMap = require('../SourceMap');

var loadSourceMap = require('../utils/loadSourceMap');

var path = require('path');

var urlJoin = require('../utils/urlJoin');

var isURL = require('../utils/is-url');

var URL_RE = /url\s*\("?(?![a-z]+:)/;
var IMPORT_RE = /@import/;
var COMPOSES_RE = /composes:.+from\s*("|').*("|')\s*;?/;
var FROM_IMPORT_RE = /.+from\s*(?:"|')(.*)(?:"|')\s*;?/;
var PROTOCOL_RE = /^[a-z]+:/;

var CSSAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(CSSAsset, _Asset);

  function CSSAsset(name, options) {
    var _this4;

    _classCallCheck(this, CSSAsset);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(CSSAsset).call(this, name, options));
    _this4.type = 'css';
    _this4.previousSourceMap = _this4.options.rendition ? _this4.options.rendition.map : null;
    return _this4;
  }

  _createClass(CSSAsset, [{
    key: "mightHaveDependencies",
    value: function mightHaveDependencies() {
      return !/\.css$/.test(this.name) || IMPORT_RE.test(this.contents) || COMPOSES_RE.test(this.contents) || URL_RE.test(this.contents);
    }
  }, {
    key: "parse",
    value: function parse(code) {
      var root = postcss.parse(code, {
        from: this.name
      });
      return new CSSAst(code, root);
    }
  }, {
    key: "collectDependencies",
    value: function collectDependencies() {
      var _this5 = this;

      this.ast.root.walkAtRules('import', function (rule) {
        var params = valueParser(rule.params);

        var _params$nodes = (0, _toArray2["default"])(params.nodes),
            name = _params$nodes[0],
            media = _params$nodes.slice(1);

        var dep;

        if (name.type === 'function' && name.value === 'url' && name.nodes.length) {
          name = name.nodes[0];
        }

        dep = name.value;

        if (!dep) {
          throw new Error('Could not find import name for ' + rule);
        }

        if (PROTOCOL_RE.test(dep)) {
          return;
        } // If this came from an inline <style> tag, don't inline the imported file. Replace with the correct URL instead.
        // TODO: run CSSPackager on inline style tags.


        var inlineHTML = _this5.options.rendition && _this5.options.rendition.inlineHTML;

        if (inlineHTML) {
          name.value = _this5.addURLDependency(dep, {
            loc: rule.source.start
          });
          rule.params = params.toString();
        } else {
          media = valueParser.stringify(media).trim();

          _this5.addDependency(dep, {
            media: media,
            loc: rule.source.start
          });

          rule.remove();
        }

        _this5.ast.dirty = true;
      });
      this.ast.root.walkDecls(function (decl) {
        if (URL_RE.test(decl.value)) {
          var parsed = valueParser(decl.value);
          var dirty = false;
          parsed.walk(function (node) {
            if (node.type === 'function' && node.value === 'url' && node.nodes.length) {
              var url = _this5.addURLDependency(node.nodes[0].value, {
                loc: decl.source.start
              });

              if (!isURL(url)) {
                url = urlJoin(_this5.options.publicURL, url);
              }

              dirty = node.nodes[0].value !== url;
              node.nodes[0].value = url;
            }
          });

          if (dirty) {
            decl.value = parsed.toString();
            _this5.ast.dirty = true;
          }
        }

        if (decl.prop === 'composes' && FROM_IMPORT_RE.test(decl.value)) {
          var _parsed = valueParser(decl.value);

          _parsed.walk(function (node) {
            if (node.type === 'string') {
              var _FROM_IMPORT_RE$exec = FROM_IMPORT_RE.exec(decl.value),
                  _FROM_IMPORT_RE$exec2 = (0, _slicedToArray2["default"])(_FROM_IMPORT_RE$exec, 2),
                  importPath = _FROM_IMPORT_RE$exec2[1];

              _this5.addURLDependency(importPath, {
                dynamic: false,
                loc: decl.source.start
              });
            }
          });
        }
      });
    }
  }, {
    key: "pretransform",
    value: function pretransform() {
      var _this = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(_this.options.sourceMaps && !_this.previousSourceMap)) {
                  _context.next = 4;
                  break;
                }

                _context.next = 3;
                return loadSourceMap(_this);

              case 3:
                _this.previousSourceMap = _context.sent;

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }, {
    key: "transform",
    value: function transform() {
      var _this2 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return postcssTransform(_this2);

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    }
  }, {
    key: "getCSSAst",
    value: function getCSSAst() {
      // Converts the ast to a CSS ast if needed, so we can apply postcss transforms.
      if (!(this.ast instanceof CSSAst)) {
        this.ast = CSSAsset.prototype.parse.call(this, this.ast.render(this.name));
      }

      return this.ast.root;
    }
  }, {
    key: "generate",
    value: function generate() {
      var _this3 = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        var css, result, js;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (_this3.ast) {
                  result = _this3.ast.render(_this3.name);
                  css = result.css;
                  if (result.map) _this3.sourceMap = result.map;
                } else {
                  css = _this3.contents;
                }

                js = '';

                if (_this3.options.hmr) {
                  _this3.addDependency('_css_loader');

                  js = "\n        var reloadCSS = require('_css_loader');\n        module.hot.dispose(reloadCSS);\n        module.hot.accept(reloadCSS);\n      ";
                }

                if (_this3.cssModules) {
                  js += 'module.exports = ' + JSON.stringify(_this3.cssModules, null, 2) + ';';
                }

                if (!_this3.options.sourceMaps) {
                  _context3.next = 23;
                  break;
                }

                if (!_this3.sourceMap) {
                  _context3.next = 9;
                  break;
                }

                _context3.next = 8;
                return new SourceMap().addMap(_this3.sourceMap);

              case 8:
                _this3.sourceMap = _context3.sent;

              case 9:
                if (!_this3.previousSourceMap) {
                  _context3.next = 22;
                  break;
                }

                _this3.previousSourceMap.sources = _this3.previousSourceMap.sources.map(function (v) {
                  return path.join(path.dirname(_this3.relativeName), _this3.previousSourceMap.sourceRoot || '', v);
                });

                if (!_this3.sourceMap) {
                  _context3.next = 17;
                  break;
                }

                _context3.next = 14;
                return new SourceMap().extendSourceMap(_this3.previousSourceMap, _this3.sourceMap);

              case 14:
                _this3.sourceMap = _context3.sent;
                _context3.next = 20;
                break;

              case 17:
                _context3.next = 19;
                return new SourceMap().addMap(_this3.previousSourceMap);

              case 19:
                _this3.sourceMap = _context3.sent;

              case 20:
                _context3.next = 23;
                break;

              case 22:
                if (!_this3.sourceMap) {
                  _this3.sourceMap = new SourceMap().generateEmptyMap(_this3.relativeName, css);
                }

              case 23:
                return _context3.abrupt("return", [{
                  type: 'css',
                  value: css,
                  cssModules: _this3.cssModules,
                  map: _this3.sourceMap
                }, {
                  type: 'js',
                  value: js,
                  hasDependencies: false
                }]);

              case 24:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    }
  }, {
    key: "generateErrorMessage",
    value: function generateErrorMessage(err) {
      // Wrap the error in a CssSyntaxError if needed so we can generate a code frame
      if (err.loc && !err.showSourceCode) {
        err = new CssSyntaxError(err.message, err.loc.line, err.loc.column, this.contents);
      }

      err.message = err.reason || err.message;
      err.loc = {
        line: err.line,
        column: err.column
      };

      if (err.showSourceCode) {
        err.codeFrame = err.showSourceCode();
        err.highlightedCodeFrame = err.showSourceCode(true);
      }

      return err;
    }
  }]);

  return CSSAsset;
}(Asset);

var CSSAst =
/*#__PURE__*/
function () {
  function CSSAst(css, root) {
    _classCallCheck(this, CSSAst);

    this.css = css;
    this.root = root;
    this.dirty = false;
  }

  _createClass(CSSAst, [{
    key: "render",
    value: function render(name) {
      if (this.dirty) {
        var _this$root$toResult = this.root.toResult({
          to: name,
          map: {
            inline: false,
            annotation: false,
            sourcesContent: true
          }
        }),
            css = _this$root$toResult.css,
            map = _this$root$toResult.map;

        this.css = css;
        return {
          css: this.css,
          map: map ? map.toJSON() : null
        };
      }

      return {
        css: this.css
      };
    }
  }]);

  return CSSAst;
}();

module.exports = CSSAsset;