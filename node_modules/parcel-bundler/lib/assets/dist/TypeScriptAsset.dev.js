"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Asset = require('../Asset');

var localRequire = require('../utils/localRequire');

var isAccessedVarChanged = require('../utils/isAccessedVarChanged');

var TypeScriptAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(TypeScriptAsset, _Asset);

  function TypeScriptAsset(name, options) {
    var _this2;

    _classCallCheck(this, TypeScriptAsset);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TypeScriptAsset).call(this, name, options));
    _this2.type = 'js';
    _this2.cacheData.env = {};
    return _this2;
  }

  _createClass(TypeScriptAsset, [{
    key: "shouldInvalidate",
    value: function shouldInvalidate(cacheData) {
      return isAccessedVarChanged(cacheData);
    }
  }, {
    key: "generate",
    value: function generate() {
      var _this = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var typescript, transpilerOptions, tsconfig, transpiled, sourceMap, content;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return localRequire('typescript', _this.name);

              case 2:
                typescript = _context.sent;
                transpilerOptions = {
                  compilerOptions: {
                    module: _this.options.scopeHoist ? typescript.ModuleKind.ESNext : typescript.ModuleKind.CommonJS,
                    jsx: typescript.JsxEmit.Preserve,
                    // it brings the generated output from TypeScript closer to that generated by Babel
                    // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html
                    esModuleInterop: true
                  },
                  fileName: _this.relativeName
                };
                _context.next = 6;
                return _this.getConfig(['tsconfig.json']);

              case 6:
                tsconfig = _context.sent;

                // Overwrite default if config is found
                if (tsconfig) {
                  transpilerOptions.compilerOptions = Object.assign(transpilerOptions.compilerOptions, tsconfig.compilerOptions);
                }

                transpilerOptions.compilerOptions.noEmit = false;
                transpilerOptions.compilerOptions.sourceMap = _this.options.sourceMaps; // Transpile Module using TypeScript and parse result as ast format through babylon

                transpiled = typescript.transpileModule(_this.contents, transpilerOptions);
                sourceMap = transpiled.sourceMapText;

                if (sourceMap) {
                  sourceMap = JSON.parse(sourceMap);
                  sourceMap.sources = [_this.relativeName];
                  sourceMap.sourcesContent = [_this.contents]; // Remove the source map URL

                  content = transpiled.outputText;
                  transpiled.outputText = content.substring(0, content.lastIndexOf('//# sourceMappingURL'));
                }

                return _context.abrupt("return", [{
                  type: 'js',
                  value: transpiled.outputText,
                  map: sourceMap
                }]);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }]);

  return TypeScriptAsset;
}(Asset);

module.exports = TypeScriptAsset;