"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Asset = require('../Asset');

var localRequire = require('../utils/localRequire');

var _require = require('@parcel/utils'),
    promisify = _require.promisify;

var Resolver = require('../Resolver');

var fs = require('@parcel/fs');

var path = require('path');

var parseCSSImport = require('../utils/parseCSSImport');

var LESSAsset =
/*#__PURE__*/
function (_Asset) {
  _inherits(LESSAsset, _Asset);

  function LESSAsset(name, options) {
    var _this2;

    _classCallCheck(this, LESSAsset);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(LESSAsset).call(this, name, options));
    _this2.type = 'css';
    return _this2;
  }

  _createClass(LESSAsset, [{
    key: "parse",
    value: function parse(code) {
      var _this = this;

      return (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var less, render, opts;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return localRequire('less', _this.name);

              case 2:
                less = _context.sent;
                render = promisify(less.render.bind(less));
                _context.next = 6;
                return _this.getConfig(['.lessrc', '.lessrc.js'], {
                  packageKey: 'less'
                });

              case 6:
                _context.t0 = _context.sent;

                if (_context.t0) {
                  _context.next = 9;
                  break;
                }

                _context.t0 = {};

              case 9:
                opts = _context.t0;
                opts.filename = _this.name;
                opts.plugins = (opts.plugins || []).concat(urlPlugin(_this));

                if (_this.options.sourceMaps) {
                  opts.sourceMap = {
                    outputSourceFiles: true
                  };
                }

                return _context.abrupt("return", render(code, opts));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  }, {
    key: "collectDependencies",
    value: function collectDependencies() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.ast.imports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var dep = _step.value;
          this.addDependency(dep, {
            includedInParent: true
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "generate",
    value: function generate() {
      var _this3 = this;

      var map;

      if (this.ast && this.ast.map) {
        map = JSON.parse(this.ast.map.toString());
        map.sources = map.sources.map(function (v) {
          return path.relative(_this3.options.rootDir, v);
        });
      }

      return [{
        type: 'css',
        value: this.ast ? this.ast.css : '',
        hasDependencies: false,
        map: map
      }];
    }
  }]);

  return LESSAsset;
}(Asset);

function urlPlugin(asset) {
  return {
    install: function install(less, pluginManager) {
      var visitor = new less.visitors.Visitor({
        visitUrl: function visitUrl(node) {
          node.value.value = asset.addURLDependency(node.value.value, node.currentFileInfo.filename);
          return node;
        }
      });
      visitor.run = visitor.visit;
      pluginManager.addVisitor(visitor);
      var LessFileManager = getFileManager(less, asset.options);
      pluginManager.addFileManager(new LessFileManager());
    }
  };
}

function getFileManager(less, options) {
  var resolver = new Resolver({
    extensions: ['.css', '.less'],
    rootDir: options.rootDir
  });

  var LessFileManager =
  /*#__PURE__*/
  function (_less$FileManager) {
    _inherits(LessFileManager, _less$FileManager);

    function LessFileManager() {
      _classCallCheck(this, LessFileManager);

      return _possibleConstructorReturn(this, _getPrototypeOf(LessFileManager).apply(this, arguments));
    }

    _createClass(LessFileManager, [{
      key: "supports",
      value: function supports() {
        return true;
      }
    }, {
      key: "supportsSync",
      value: function supportsSync() {
        return false;
      }
    }, {
      key: "loadFile",
      value: function loadFile(filename, currentDirectory) {
        return (0, _asyncToGenerator2["default"])(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee2() {
          var resolved;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  filename = parseCSSImport(filename);
                  _context2.next = 3;
                  return resolver.resolve(filename, path.join(currentDirectory, 'index'));

                case 3:
                  resolved = _context2.sent;
                  _context2.next = 6;
                  return fs.readFile(resolved.path, 'utf8');

                case 6:
                  _context2.t0 = _context2.sent;
                  _context2.t1 = resolved.path;
                  return _context2.abrupt("return", {
                    contents: _context2.t0,
                    filename: _context2.t1
                  });

                case 9:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      }
    }]);

    return LessFileManager;
  }(less.FileManager);

  return LessFileManager;
}

module.exports = LESSAsset;