"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var JSConcatPackager = require('./JSConcatPackager');

var JSPackager = require('./JSPackager');

var CSSPackager = require('./CSSPackager');

var HTMLPackager = require('./HTMLPackager');

var SourceMapPackager = require('./SourceMapPackager');

var RawPackager = require('./RawPackager');

var PackagerRegistry =
/*#__PURE__*/
function () {
  function PackagerRegistry(options) {
    _classCallCheck(this, PackagerRegistry);

    this.packagers = new Map();
    this.add('css', CSSPackager);
    this.add('html', HTMLPackager);
    this.add('map', SourceMapPackager);
    this.add('js', options.scopeHoist ? JSConcatPackager : JSPackager);
  }

  _createClass(PackagerRegistry, [{
    key: "add",
    value: function add(type, packager) {
      if (typeof packager === 'string') {
        packager = require(packager);
      }

      this.packagers.set(type, packager);
    }
  }, {
    key: "has",
    value: function has(type) {
      return this.packagers.has(type);
    }
  }, {
    key: "get",
    value: function get(type) {
      return this.packagers.get(type) || RawPackager;
    }
  }]);

  return PackagerRegistry;
}();

module.exports = PackagerRegistry;