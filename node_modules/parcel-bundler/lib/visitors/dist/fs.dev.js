"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var t = require('@babel/types');

var Path = require('path');

var fs = require('fs');

var template = require('@babel/template')["default"];

var logger = require('@parcel/logger');

var bufferTemplate = template('Buffer(CONTENT, ENC)');
module.exports = {
  AssignmentExpression: function AssignmentExpression(path) {
    if (!isRequire(path.node.right, 'fs', 'readFileSync')) {
      return;
    }

    for (var name in path.getBindingIdentifiers()) {
      var binding = path.scope.getBinding(name);
      if (!binding) continue;
      binding.path.setData('__require', path.node);
    }
  },
  CallExpression: function CallExpression(path, asset) {
    if (referencesImport(path, 'fs', 'readFileSync')) {
      var vars = {
        __dirname: Path.dirname(asset.name),
        __filename: asset.basename
      };
      var filename, args, res;

      try {
        var _path$get$map = path.get('arguments').map(function (arg) {
          return evaluate(arg, vars);
        });

        var _path$get$map2 = (0, _toArray2["default"])(_path$get$map);

        filename = _path$get$map2[0];
        args = _path$get$map2.slice(1);
        filename = Path.resolve(filename);
        res = fs.readFileSync.apply(fs, [filename].concat(_toConsumableArray(args)));
      } catch (err) {
        if (err instanceof NodeNotEvaluatedError) {
          // Warn using a code frame
          err.fileName = asset.name;
          asset.generateErrorMessage(err);
          logger.warn(err);
          return;
        } // Add location info so we log a code frame with the error


        err.loc = path.node.arguments.length > 0 ? path.node.arguments[0].loc.start : path.node.loc.start;
        throw err;
      }

      var replacementNode;

      if (Buffer.isBuffer(res)) {
        replacementNode = bufferTemplate({
          CONTENT: t.stringLiteral(res.toString('base64')),
          ENC: t.stringLiteral('base64')
        });
      } else {
        replacementNode = t.stringLiteral(res);
      }

      asset.addDependency(filename, {
        includedInParent: true
      });
      path.replaceWith(replacementNode);
      asset.isAstDirty = true;
    }
  }
};

function isRequire(node, name, method) {
  // e.g. require('fs').readFileSync
  if (t.isMemberExpression(node) && node.property.name === method) {
    node = node.object;
  }

  if (!t.isCallExpression(node)) {
    return false;
  }

  var _node = node,
      callee = _node.callee,
      args = _node.arguments;
  var isRequire = t.isIdentifier(callee) && callee.name === 'require' && args.length === 1 && t.isStringLiteral(args[0]);

  if (!isRequire) {
    return false;
  }

  if (name && args[0].value !== name) {
    return false;
  }

  return true;
}

function referencesImport(path, name, method) {
  var callee = path.node.callee;
  var bindingPath; // e.g. readFileSync()

  if (t.isIdentifier(callee)) {
    bindingPath = getBindingPath(path, callee.name);
  } else if (t.isMemberExpression(callee)) {
    if (callee.property.name !== method) {
      return false;
    } // e.g. fs.readFileSync()


    if (t.isIdentifier(callee.object)) {
      bindingPath = getBindingPath(path, callee.object.name); // require('fs').readFileSync()
    } else if (isRequire(callee.object, name)) {
      return true;
    }
  } else {
    return false;
  }

  if (!bindingPath) {
    return;
  }

  var bindingNode = bindingPath.getData('__require') || bindingPath.node;
  var parent = bindingPath.parentPath; // e.g. import fs from 'fs';

  if (parent.isImportDeclaration()) {
    if (bindingPath.isImportSpecifier() && bindingPath.node.imported.name !== method) {
      return false;
    }

    return parent.node.source.value === name; // e.g. var fs = require('fs');
  } else if (t.isVariableDeclarator(bindingNode) || t.isAssignmentExpression(bindingNode)) {
    var left = bindingNode.id || bindingNode.left;
    var right = bindingNode.init || bindingNode.right; // e.g. var {readFileSync} = require('fs');

    if (t.isObjectPattern(left)) {
      var prop = left.properties.find(function (p) {
        return p.value.name === callee.name;
      });

      if (!prop || prop.key.name !== method) {
        return false;
      }
    } else if (!t.isIdentifier(left)) {
      return false;
    }

    return isRequire(right, name, method);
  }

  return false;
}

function getBindingPath(path, name) {
  var binding = path.scope.getBinding(name);
  return binding && binding.path;
}

function NodeNotEvaluatedError(node) {
  this.message = 'Cannot statically evaluate fs argument';
  this.node = node;
  this.loc = node.loc.start;
}

function evaluate(path, vars) {
  // Inline variables
  path.traverse({
    Identifier: function Identifier(ident) {
      var key = ident.node.name;

      if (key in vars) {
        ident.replaceWith(t.valueToNode(vars[key]));
      }
    }
  });
  var res = path.evaluate();

  if (!res.confident) {
    throw new NodeNotEvaluatedError(path.node);
  }

  return res.value;
}