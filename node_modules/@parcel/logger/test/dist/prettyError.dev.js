"use strict";

var assert = require('assert');

var prettyError = require('../src/prettyError');

var message = 'Error Message!';
var fileName = 'Test.js';
var codeFrame = '<code>frame</code>';
var stack = 'Error: Uh-oh. Something went wrong. Line 88. \n Oh no. Something else went wrong. Line 77 \n';
describe('prettyError', function () {
  it('should handle passing error as string', function () {
    var err = prettyError(message);
    assert.equal(err.message, message);
    assert.equal(err.stack, undefined);
  });
  it('should handle passing error as object', function () {
    var err = prettyError({
      message: message
    });
    assert.equal(err.message, message);
    assert.equal(err.stack, undefined);
  });
  it('should handle unknown input', function () {
    var err = prettyError(Number.NaN);
    assert(err.message.length); // non-empty error message

    assert.equal(err.stack, undefined);
  });
  it('should prepend fileName', function () {
    var err = prettyError({
      message: message,
      fileName: fileName
    });
    assert(err.message.startsWith(fileName));
    assert.equal(err.stack, undefined);
  });
  it('should prepend line and column location', function () {
    var err = prettyError({
      message: message,
      fileName: fileName,
      loc: {
        line: 1,
        column: 10
      }
    });
    assert(err.message.startsWith("".concat(fileName, ":1:10")));
    assert.equal(err.stack, undefined);
  });
  it('should support providing a codeFrame as stack', function () {
    var err = prettyError({
      message: message,
      stack: stack,
      codeFrame: codeFrame
    });
    assert.equal(err.message, message);
    assert.equal(err.stack, codeFrame);
  });
  it('should support highlightedCodeFrame when opts.color is true', function () {
    var err = prettyError({
      message: message,
      stack: stack,
      codeFrame: '<not>a code frame</not>',
      highlightedCodeFrame: codeFrame
    }, {
      color: true
    });
    assert.equal(err.message, message);
    assert.equal(err.stack, codeFrame);
    err = prettyError({
      message: message,
      stack: stack,
      codeFrame: codeFrame,
      highlightedCodeFrame: '<not>a code frame</not>'
    }, {
      color: false
    });
    assert.equal(err.message, message);
    assert.equal(err.stack, codeFrame);
  });
  it('should support stack', function () {
    var err = prettyError({
      message: message,
      stack: stack
    });
    assert.equal(err.message, message);
    assert(err.stack.includes('Line'));
  });
});