"use strict";

var Watcher = require('../index');

var fs = require('@parcel/fs');

var path = require('path');

var assert = require('assert');

var _require = require('@parcel/test-utils'),
    sleep = _require.sleep;

describe('change event', function () {
  var tmpFolder = path.join(__dirname, './tmp/');
  before(function () {
    fs.mkdirp(tmpFolder);
  });
  it('Should emit event on filechange', function _callee() {
    var watcher, filepath, changed;
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            watcher = new Watcher({});
            filepath = path.join(tmpFolder, 'file1.txt');
            _context.next = 4;
            return regeneratorRuntime.awrap(fs.writeFile(filepath, 'this is a text document'));

          case 4:
            watcher.add(filepath);
            changed = false;
            watcher.once('change', function () {
              changed = true;
            });

            if (watcher.ready) {
              _context.next = 10;
              break;
            }

            _context.next = 10;
            return regeneratorRuntime.awrap(new Promise(function (resolve) {
              return watcher.once('ready', resolve);
            }));

          case 10:
            _context.next = 12;
            return regeneratorRuntime.awrap(sleep(250));

          case 12:
            _context.next = 14;
            return regeneratorRuntime.awrap(fs.writeFile(filepath, 'this is not a text document'));

          case 14:
            _context.next = 16;
            return regeneratorRuntime.awrap(sleep(500));

          case 16:
            assert(changed, 'File should be flagged as changed.');
            _context.next = 19;
            return regeneratorRuntime.awrap(watcher.stop());

          case 19:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('Should emit event on filechange using arrays', function _callee2() {
    var watcher, filepath, changed;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            watcher = new Watcher({});
            filepath = path.join(tmpFolder, 'file1.txt');
            _context2.next = 4;
            return regeneratorRuntime.awrap(fs.writeFile(filepath, 'this is a text document'));

          case 4:
            watcher.add([filepath]);
            changed = false;
            watcher.once('change', function () {
              changed = true;
            });

            if (watcher.ready) {
              _context2.next = 10;
              break;
            }

            _context2.next = 10;
            return regeneratorRuntime.awrap(new Promise(function (resolve) {
              return watcher.once('ready', resolve);
            }));

          case 10:
            _context2.next = 12;
            return regeneratorRuntime.awrap(sleep(250));

          case 12:
            _context2.next = 14;
            return regeneratorRuntime.awrap(fs.writeFile(filepath, 'this is not a text document'));

          case 14:
            _context2.next = 16;
            return regeneratorRuntime.awrap(sleep(500));

          case 16:
            assert(changed, 'File should be flagged as changed.');
            _context2.next = 19;
            return regeneratorRuntime.awrap(watcher.stop());

          case 19:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('Should not emit event if file has been added and removed', function _callee3() {
    var watcher, filepath, changed;
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            watcher = new Watcher({});
            filepath = path.join(tmpFolder, 'file1.txt');
            _context3.next = 4;
            return regeneratorRuntime.awrap(fs.writeFile(filepath, 'this is a text document'));

          case 4:
            _context3.next = 6;
            return regeneratorRuntime.awrap(sleep(250));

          case 6:
            watcher.add(filepath);
            changed = false;
            watcher.once('change', function () {
              changed = true;
            });

            if (watcher.ready) {
              _context3.next = 12;
              break;
            }

            _context3.next = 12;
            return regeneratorRuntime.awrap(new Promise(function (resolve) {
              return watcher.once('ready', resolve);
            }));

          case 12:
            _context3.next = 14;
            return regeneratorRuntime.awrap(sleep(250));

          case 14:
            watcher.unwatch(filepath);
            _context3.next = 17;
            return regeneratorRuntime.awrap(fs.writeFile(filepath, 'this is not a text document'));

          case 17:
            _context3.next = 19;
            return regeneratorRuntime.awrap(sleep(500));

          case 19:
            assert(!changed, 'Should not have emitted a change event.');
            _context3.next = 22;
            return regeneratorRuntime.awrap(watcher.stop());

          case 22:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
});