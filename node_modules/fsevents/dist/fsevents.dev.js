/*
 ** Â© 2020 by Philipp Dunkel, Ben Noordhuis, Elan Shankar, Paul Miller
 ** Licensed under MIT License.
 */

/* jshint node:true */
'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (process.platform !== 'darwin') {
  throw new Error("Module 'fsevents' is not compatible with platform '".concat(process.platform, "'"));
}

var Native = require('./fsevents.node');

var events = Native.constants;

function watch(path, handler) {
  if (typeof path !== 'string') {
    throw new TypeError("fsevents argument 1 must be a string and not a ".concat(_typeof(path)));
  }

  if (typeof handler !== 'function') {
    throw new TypeError("fsevents argument 2 must be a function and not a ".concat(_typeof(handler)));
  }

  var instance = Native.start(path, handler);
  if (!instance) throw new Error("could not watch: ".concat(path));
  return function () {
    var result = instance ? Promise.resolve(instance).then(Native.stop) : Promise.resolve(undefined);
    instance = undefined;
    return result;
  };
}

function getInfo(path, flags) {
  return {
    path: path,
    flags: flags,
    event: getEventType(flags),
    type: getFileType(flags),
    changes: getFileChanges(flags)
  };
}

function getFileType(flags) {
  if (events.ItemIsFile & flags) return 'file';
  if (events.ItemIsDir & flags) return 'directory';
  if (events.ItemIsSymlink & flags) return 'symlink';
}

function anyIsTrue(obj) {
  for (var key in obj) {
    if (obj[key]) return true;
  }

  return false;
}

function getEventType(flags) {
  if (events.ItemRemoved & flags) return 'deleted';
  if (events.ItemRenamed & flags) return 'moved';
  if (events.ItemCreated & flags) return 'created';
  if (events.ItemModified & flags) return 'modified';
  if (events.RootChanged & flags) return 'root-changed';
  if (events.ItemCloned & flags) return 'cloned';
  if (anyIsTrue(flags)) return 'modified';
  return 'unknown';
}

function getFileChanges(flags) {
  return {
    inode: !!(events.ItemInodeMetaMod & flags),
    finder: !!(events.ItemFinderInfoMod & flags),
    access: !!(events.ItemChangeOwner & flags),
    xattrs: !!(events.ItemXattrMod & flags)
  };
}

exports.watch = watch;
exports.getInfo = getInfo;
exports.constants = events;