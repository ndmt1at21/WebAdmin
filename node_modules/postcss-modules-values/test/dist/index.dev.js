"use strict";

var _postcss = _interopRequireDefault(require("postcss"));

var _assert = _interopRequireDefault(require("assert"));

var _src = _interopRequireDefault(require("../src"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* global describe, it */
var test = function test(input, expected) {
  var processor = (0, _postcss["default"])([_src["default"]]);

  _assert["default"].equal(processor.process(input).css, expected);
};

describe('constants', function () {
  it('should pass through an empty string', function () {
    test('', '');
  });
  it('should export a constant', function () {
    test('@value red blue;', ':export {\n  red: blue\n}');
  });
  it('gives an error when there is no semicolon between lines', function () {
    var input = '@value red blue\n@value green yellow';
    var processor = (0, _postcss["default"])([_src["default"]]);
    var result = processor.process(input);
    var warnings = result.warnings();

    _assert["default"].equal(warnings.length, 1);

    _assert["default"].equal(warnings[0].text, 'Invalid value definition: red blue\n@value green yellow');
  });
  it('should export a more complex constant', function () {
    test('@value small (max-width: 599px);', ':export {\n  small: (max-width: 599px)\n}');
  });
  it('should replace constants within the file', function () {
    test('@value blue red; .foo { color: blue; }', ':export {\n  blue: red;\n}\n.foo { color: red; }');
  });
  it('should import and re-export a simple constant', function () {
    test('@value red from "./colors.css";', ':import("./colors.css") {\n  i__const_red_0: red\n}\n:export {\n  red: i__const_red_0\n}');
  });
  it('should import a simple constant and replace usages', function () {
    test('@value red from "./colors.css"; .foo { color: red; }', ':import("./colors.css") {\n  i__const_red_1: red;\n}\n:export {\n  red: i__const_red_1;\n}\n.foo { color: i__const_red_1; }');
  });
  it('should import and alias a constant and replace usages', function () {
    test('@value blue as red from "./colors.css"; .foo { color: red; }', ':import("./colors.css") {\n  i__const_red_2: blue;\n}\n:export {\n  red: i__const_red_2;\n}\n.foo { color: i__const_red_2; }');
  });
  it('should import multiple from a single file', function () {
    test("@value blue, red from \"./colors.css\";\n.foo { color: red; }\n.bar { color: blue }", ":import(\"./colors.css\") {\n  i__const_blue_3: blue;\n  i__const_red_4: red;\n}\n:export {\n  blue: i__const_blue_3;\n  red: i__const_red_4;\n}\n.foo { color: i__const_red_4; }\n.bar { color: i__const_blue_3 }");
  });
  it('should import from a definition', function () {
    test('@value colors: "./colors.css"; @value red from colors;', ':import("./colors.css") {\n  i__const_red_5: red\n}\n' + ':export {\n  colors: "./colors.css";\n  red: i__const_red_5\n}');
  });
  it('should only allow values for paths if defined in the right order', function () {
    test('@value red from colors; @value colors: "./colors.css";', ':import(colors) {\n  i__const_red_6: red\n}\n' + ':export {\n  red: i__const_red_6;\n  colors: "./colors.css"\n}');
  });
  it('should allow transitive values', function () {
    test('@value aaa: red;\n@value bbb: aaa;\n.a { color: bbb; }', ':export {\n  aaa: red;\n  bbb: red;\n}\n.a { color: red; }');
  });
  it('should allow transitive values within calc', function () {
    test('@value base: 10px;\n@value large: calc(base * 2);\n.a { margin: large; }', ':export {\n  base: 10px;\n  large: calc(10px * 2);\n}\n.a { margin: calc(10px * 2); }');
  });
  it('should preserve import order', function () {
    test('@value a from "./a.css"; @value b from "./b.css";', ':import("./a.css") {\n  i__const_a_7: a\n}\n' + ':import("./b.css") {\n  i__const_b_8: b\n}\n' + ':export {\n  a: i__const_a_7;\n  b: i__const_b_8\n}');
  });
  it('should allow custom-property-style names', function () {
    test('@value --red from "./colors.css"; .foo { color: --red; }', ':import("./colors.css") {\n  i__const___red_9: --red;\n}\n' + ':export {\n  --red: i__const___red_9;\n}\n' + '.foo { color: i__const___red_9; }');
  });
  it('should allow all colour types', function () {
    test('@value named: red; @value 3char #0f0; @value 6char #00ff00; @value rgba rgba(34, 12, 64, 0.3); @value hsla hsla(220, 13.0%, 18.0%, 1);\n' + '.foo { color: named; background-color: 3char; border-top-color: 6char; border-bottom-color: rgba; outline-color: hsla; }', ':export {\n  named: red;\n  3char: #0f0;\n  6char: #00ff00;\n  rgba: rgba(34, 12, 64, 0.3);\n  hsla: hsla(220, 13.0%, 18.0%, 1);\n}\n' + '.foo { color: red; background-color: #0f0; border-top-color: #00ff00; border-bottom-color: rgba(34, 12, 64, 0.3); outline-color: hsla(220, 13.0%, 18.0%, 1); }');
  });
  it('should import multiple from a single file on multiple lines', function () {
    test("@value (\n  blue,\n  red\n) from \"./colors.css\";\n.foo { color: red; }\n.bar { color: blue }", ":import(\"./colors.css\") {\n  i__const_blue_10: blue;\n  i__const_red_11: red;\n}\n:export {\n  blue: i__const_blue_10;\n  red: i__const_red_11;\n}\n.foo { color: i__const_red_11; }\n.bar { color: i__const_blue_10 }");
  });
  it('should allow definitions with commas in them', function () {
    test('@value coolShadow: 0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14)   ;\n' + '.foo { box-shadow: coolShadow; }', ':export {\n  coolShadow: 0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14);\n}\n' + '.foo { box-shadow: 0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14); }');
  });
  it('should allow values with nested parantheses', function () {
    test('@value aaa: color(red lightness(50%));', ':export {\n  aaa: color(red lightness(50%))\n}');
  });
});