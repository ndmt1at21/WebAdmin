"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = removeRedundantAttributes; // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#JavaScript_types

var redundantScriptTypes = new Set(['application/javascript', 'application/ecmascript', 'application/x-ecmascript', 'application/x-javascript', 'text/javascript', 'text/ecmascript', 'text/javascript1.0', 'text/javascript1.1', 'text/javascript1.2', 'text/javascript1.3', 'text/javascript1.4', 'text/javascript1.5', 'text/jscript', 'text/livescript', 'text/x-ecmascript', 'text/x-javascript']);
var redundantAttributes = {
  'form': {
    'method': 'get'
  },
  'input': {
    'type': 'text'
  },
  'button': {
    'type': 'submit'
  },
  'script': {
    'language': 'javascript',
    'type': function type(node) {
      for (var _i = 0, _Object$entries = Object.entries(node.attrs); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
            attrName = _Object$entries$_i[0],
            attrValue = _Object$entries$_i[1];

        if (attrName.toLowerCase() !== 'type') {
          continue;
        }

        return redundantScriptTypes.has(attrValue);
      }

      return false;
    },
    // Remove attribute if the function returns false
    'charset': function charset(node) {
      // The charset attribute only really makes sense on “external” SCRIPT elements:
      // http://perfectionkills.com/optimizing-html/#8_script_charset
      return node.attrs && !node.attrs.src;
    }
  },
  'style': {
    'media': 'all',
    'type': 'text/css'
  },
  'link': {
    'media': 'all',
    'type': function type(node) {
      // https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet
      var isRelStyleSheet = false;
      var isTypeTextCSS = false;

      if (node.attrs) {
        for (var _i2 = 0, _Object$entries2 = Object.entries(node.attrs); _i2 < _Object$entries2.length; _i2++) {
          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
              attrName = _Object$entries2$_i[0],
              attrValue = _Object$entries2$_i[1];

          if (attrName.toLowerCase() === 'rel' && attrValue === 'stylesheet') {
            isRelStyleSheet = true;
          }

          if (attrName.toLowerCase() === 'type' && attrValue === 'text/css') {
            isTypeTextCSS = true;
          }
        }
      } // Only "text/css" is redudant for link[rel=stylesheet]. Otherwise "type" shouldn't be removed


      return isRelStyleSheet && isTypeTextCSS;
    }
  },
  // See: https://html.spec.whatwg.org/#lazy-loading-attributes
  'img': {
    'loading': 'eager'
  },
  'iframe': {
    'loading': 'eager'
  }
};
var TAG_MATCH_REGEXP = new RegExp('^(' + Object.keys(redundantAttributes).join('|') + ')$');
/** Removes redundant attributes */

function removeRedundantAttributes(tree) {
  tree.match({
    tag: TAG_MATCH_REGEXP
  }, function (node) {
    var tagRedundantAttributes = redundantAttributes[node.tag];
    node.attrs = node.attrs || {};

    for (var _i3 = 0, _Object$keys = Object.keys(tagRedundantAttributes); _i3 < _Object$keys.length; _i3++) {
      var redundantAttributeName = _Object$keys[_i3];
      var tagRedundantAttributeValue = tagRedundantAttributes[redundantAttributeName];
      var isRemove = false;

      if (typeof tagRedundantAttributeValue === 'function') {
        isRemove = tagRedundantAttributeValue(node);
      } else if (node.attrs[redundantAttributeName] === tagRedundantAttributeValue) {
        isRemove = true;
      }

      if (isRemove) {
        delete node.attrs[redundantAttributeName];
      }
    }

    return node;
  });
  return tree;
}