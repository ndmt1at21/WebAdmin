"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = minifyUrls;

var _relateurl = _interopRequireDefault(require("relateurl"));

var _srcset = _interopRequireDefault(require("srcset"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
} // Adopts from https://github.com/kangax/html-minifier/blob/51ce10f4daedb1de483ffbcccecc41be1c873da2/src/htmlminifier.js#L209-L221


var tagsHaveUriValuesForAttributes = new Set(['a', 'area', 'link', 'base', 'img', 'object', 'q', 'blockquote', 'ins', 'form', 'input', 'head', 'script']);
var REGEXP_TAGS_HAVE_URI_VSLUES_FOR_ATTRIBUTES = new RegExp('^(' + _toConsumableArray(tagsHaveUriValuesForAttributes).join('|') + ')$');
var tagsHasHrefAttributes = new Set(['a', 'area', 'link', 'base']);
var attributesOfImgTagHasUriValues = new Set(['src', 'longdesc', 'usemap']);
var attributesOfObjectTagHasUriValues = new Set(['classid', 'codebase', 'data', 'usemap']);

var isUriTypeAttribute = function isUriTypeAttribute(tag, attr) {
  return tagsHasHrefAttributes.has(tag) && attr === 'href' || tag === 'img' && attributesOfImgTagHasUriValues.has(attr) || tag === 'object' && attributesOfObjectTagHasUriValues.has(attr) || tag === 'q' && attr === 'cite' || tag === 'blockquote' && attr === 'cite' || (tag === 'ins' || tag === 'del') && attr === 'cite' || tag === 'form' && attr === 'action' || tag === 'input' && (attr === 'src' || attr === 'usemap') || tag === 'head' && attr === 'profile' || tag === 'script' && (attr === 'src' || attr === 'for') ||
  /**
   * https://html.spec.whatwg.org/#attr-source-src
   *
   * Although most of browsers recommend not to use "src" in <source>,
   * but technically it does comply with HTML Standard.
   */
  tag === 'source' && attr === 'src';
};

var isSrcsetAttribute = function isSrcsetAttribute(tag, attr) {
  return tag === 'source' && attr === 'srcset' || tag === 'img' && attr === 'srcset' || tag === 'link' && attr === 'imagesrcset';
};

var processModuleOptions = function processModuleOptions(options) {
  // FIXME!
  // relateurl@1.0.0-alpha only supports URL while stable version (0.2.7) only supports string
  // should convert input into URL instance after relateurl@1 is stable
  if (typeof options === 'string') return options;
  if (options instanceof URL) return options.toString();
  return false;
};

var isLinkRelCanonical = function isLinkRelCanonical(_ref) {
  var tag = _ref.tag,
      attrs = _ref.attrs;
  // Return false early for non-"link" tag
  if (tag !== 'link') return false;

  for (var _i = 0, _Object$entries = Object.entries(attrs); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        attrName = _Object$entries$_i[0],
        attrValue = _Object$entries$_i[1];

    if (attrName.toLowerCase() === 'rel' && attrValue === 'canonical') return true;
  }

  return false;
};

var relateUrlInstance;
var STORED_URL_BASE;
/** Convert absolute url into relative url */

function minifyUrls(tree, options, moduleOptions) {
  var urlBase = processModuleOptions(moduleOptions); // Invalid configuration, return tree directly

  if (!urlBase) return tree;
  /** Bring up a reusable RelateUrl instances (only once)
   *
   * STORED_URL_BASE is used to invalidate RelateUrl instances,
   * avoiding require.cache acrossing multiple htmlnano instance with different configuration,
   * e.g. unit tests cases.
   */

  if (!relateUrlInstance || STORED_URL_BASE !== urlBase) {
    relateUrlInstance = new _relateurl["default"](urlBase);
    STORED_URL_BASE = urlBase;
  }

  tree.match({
    tag: REGEXP_TAGS_HAVE_URI_VSLUES_FOR_ATTRIBUTES
  }, function (node) {
    if (!node.attrs) return node; // Prevent link[rel=canonical] being processed
    // Can't be excluded by isUriTypeAttribute()

    if (isLinkRelCanonical(node)) return node;

    for (var _i2 = 0, _Object$entries2 = Object.entries(node.attrs); _i2 < _Object$entries2.length; _i2++) {
      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
          attrName = _Object$entries2$_i[0],
          attrValue = _Object$entries2$_i[1];

      var attrNameLower = attrName.toLowerCase();

      if (isUriTypeAttribute(node.tag, attrNameLower)) {
        // FIXME!
        // relateurl@1.0.0-alpha only supports URL while stable version (0.2.7) only supports string
        // the WHATWG URL API is very strict while attrValue might not be a valid URL
        // new URL should be used, and relateUrl#relate should be wrapped in try...catch after relateurl@1 is stable
        node.attrs[attrName] = relateUrlInstance.relate(attrValue);
        continue;
      }

      if (isSrcsetAttribute(node.tag, attrNameLower)) {
        try {
          var parsedSrcset = _srcset["default"].parse(attrValue);

          node.attrs[attrName] = _srcset["default"].stringify(parsedSrcset.map(function (srcset) {
            srcset.url = relateUrlInstance.relate(srcset.url);
            return srcset;
          }));
        } catch (e) {// srcset will throw an Error for invalid srcset.
        }

        continue;
      }
    }

    return node;
  });
  return tree;
}