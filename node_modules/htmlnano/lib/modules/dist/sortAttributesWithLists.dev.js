"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = collapseAttributeWhitespace;

var _timsort = require("timsort");

var _collapseAttributeWhitespace = require("./collapseAttributeWhitespace"); // class, rel, ping


var validOptions = new Set(['frequency', 'alphabetical']);

var processModuleOptions = function processModuleOptions(options) {
  if (options === true) return 'alphabetical';
  return validOptions.has(options) ? options : false;
};

var AttributeTokenChain =
/*#__PURE__*/
function () {
  function AttributeTokenChain() {
    _classCallCheck(this, AttributeTokenChain);

    this.freqData = new Map(); // <attrValue, frequency>[]
  }

  _createClass(AttributeTokenChain, [{
    key: "addFromNodeAttrsArray",
    value: function addFromNodeAttrsArray(attrValuesArray) {
      var _this = this;

      attrValuesArray.forEach(function (attrValue) {
        if (_this.freqData.has(attrValue)) {
          _this.freqData.set(attrValue, _this.freqData.get(attrValue) + 1);
        } else {
          _this.freqData.set(attrValue, 1);
        }
      });
    }
  }, {
    key: "createSortOrder",
    value: function createSortOrder() {
      var _sortOrder = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.freqData.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          _sortOrder.push(item);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      (0, _timsort.sort)(_sortOrder, function (a, b) {
        return b[1] - a[1];
      });
      this.sortOrder = _sortOrder.map(function (i) {
        return i[0];
      });
    }
  }, {
    key: "sortFromNodeAttrsArray",
    value: function sortFromNodeAttrsArray(attrValuesArray) {
      var resultArray = [];

      if (!this.sortOrder) {
        this.createSortOrder();
      }

      this.sortOrder.forEach(function (k) {
        if (attrValuesArray.includes(k)) {
          resultArray.push(k);
        }
      });
      return resultArray;
    }
  }]);

  return AttributeTokenChain;
}();
/** Sort values inside list-like attributes (e.g. class, rel) */


function collapseAttributeWhitespace(tree, options, moduleOptions) {
  var sortType = processModuleOptions(moduleOptions);

  if (sortType === 'alphabetical') {
    return sortAttributesWithListsInAlphabeticalOrder(tree);
  }

  if (sortType === 'frequency') {
    return sortAttributesWithListsByFrequency(tree);
  } // Invalid configuration


  return tree;
}

function sortAttributesWithListsInAlphabeticalOrder(tree) {
  tree.walk(function (node) {
    if (!node.attrs) {
      return node;
    }

    Object.keys(node.attrs).forEach(function (attrName) {
      var attrNameLower = attrName.toLowerCase();

      if (!_collapseAttributeWhitespace.attributesWithLists.has(attrNameLower)) {
        return;
      }

      var attrValues = node.attrs[attrName].split(/\s/);
      node.attrs[attrName] = attrValues.sort(function (a, b) {
        return typeof a.localeCompare === 'function' ? a.localeCompare(b) : a - b;
      }).join(' ');
    });
    return node;
  });
  return tree;
}

function sortAttributesWithListsByFrequency(tree) {
  var tokenChainObj = {}; // <attrNameLower: AttributeTokenChain>[]
  // Traverse through tree to get frequency

  tree.walk(function (node) {
    if (!node.attrs) {
      return node;
    }

    Object.entries(node.attrs).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          attrName = _ref2[0],
          attrValues = _ref2[1];

      var attrNameLower = attrName.toLowerCase();

      if (!_collapseAttributeWhitespace.attributesWithLists.has(attrNameLower)) {
        return;
      }

      tokenChainObj[attrNameLower] = tokenChainObj[attrNameLower] || new AttributeTokenChain();
      tokenChainObj[attrNameLower].addFromNodeAttrsArray(attrValues.split(/\s/));
    });
    return node;
  }); // Traverse through tree again, this time sort the attribute values

  tree.walk(function (node) {
    if (!node.attrs) {
      return node;
    }

    Object.entries(node.attrs).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          attrName = _ref4[0],
          attrValues = _ref4[1];

      var attrNameLower = attrName.toLowerCase();

      if (!_collapseAttributeWhitespace.attributesWithLists.has(attrNameLower)) {
        return;
      }

      if (tokenChainObj[attrNameLower]) {
        node.attrs[attrName] = tokenChainObj[attrNameLower].sortFromNodeAttrsArray(attrValues.split(/\s/)).join(' ');
      }
    });
    return node;
  });
}