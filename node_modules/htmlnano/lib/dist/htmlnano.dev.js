"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _posthtml = _interopRequireDefault(require("posthtml"));

var _safe = _interopRequireDefault(require("./presets/safe"));

var _ampSafe = _interopRequireDefault(require("./presets/ampSafe"));

var _max = _interopRequireDefault(require("./presets/max"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function htmlnano() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var preset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _safe["default"];
  return function minifier(tree) {
    options = _objectSpread({}, preset, {}, options);
    var promise = Promise.resolve(tree);

    var _loop = function _loop() {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          moduleName = _Object$entries$_i[0],
          moduleOptions = _Object$entries$_i[1];

      if (!moduleOptions) {
        // The module is disabled
        return "continue";
      }

      if (_safe["default"][moduleName] === undefined) {
        throw new Error('Module "' + moduleName + '" is not defined');
      }

      var module = require('./modules/' + moduleName);

      promise = promise.then(function (tree) {
        return module["default"](tree, options, moduleOptions);
      });
    };

    for (var _i = 0, _Object$entries = Object.entries(options); _i < _Object$entries.length; _i++) {
      var _ret = _loop();

      if (_ret === "continue") continue;
    }

    return promise;
  };
}

htmlnano.process = function (html, options, preset, postHtmlOptions) {
  return (0, _posthtml["default"])([htmlnano(options, preset)]).process(html, postHtmlOptions);
};

htmlnano.presets = {
  safe: _safe["default"],
  ampSafe: _ampSafe["default"],
  max: _max["default"]
};
var _default = htmlnano;
exports["default"] = _default;