'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var EventEmitter = require('events');

var JSONB = require('json-buffer');

var loadStore = function loadStore(opts) {
  var adapters = {
    redis: '@keyv/redis',
    mongodb: '@keyv/mongo',
    mongo: '@keyv/mongo',
    sqlite: '@keyv/sqlite',
    postgresql: '@keyv/postgres',
    postgres: '@keyv/postgres',
    mysql: '@keyv/mysql'
  };

  if (opts.adapter || opts.uri) {
    var adapter = opts.adapter || /^[^:]*/.exec(opts.uri)[0];
    return new (require(adapters[adapter]))(opts);
  }

  return new Map();
};

var Keyv =
/*#__PURE__*/
function (_EventEmitter) {
  _inherits(Keyv, _EventEmitter);

  function Keyv(uri, opts) {
    var _this;

    _classCallCheck(this, Keyv);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Keyv).call(this));
    _this.opts = Object.assign({
      namespace: 'keyv',
      serialize: JSONB.stringify,
      deserialize: JSONB.parse
    }, typeof uri === 'string' ? {
      uri: uri
    } : uri, opts);

    if (!_this.opts.store) {
      var adapterOpts = Object.assign({}, _this.opts);
      _this.opts.store = loadStore(adapterOpts);
    }

    if (typeof _this.opts.store.on === 'function') {
      _this.opts.store.on('error', function (err) {
        return _this.emit('error', err);
      });
    }

    _this.opts.store.namespace = _this.opts.namespace;
    return _this;
  }

  _createClass(Keyv, [{
    key: "_getKeyPrefix",
    value: function _getKeyPrefix(key) {
      return "".concat(this.opts.namespace, ":").concat(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      var _this2 = this;

      key = this._getKeyPrefix(key);
      var store = this.opts.store;
      return Promise.resolve().then(function () {
        return store.get(key);
      }).then(function (data) {
        data = typeof data === 'string' ? _this2.opts.deserialize(data) : data;

        if (data === undefined) {
          return undefined;
        }

        if (typeof data.expires === 'number' && Date.now() > data.expires) {
          _this2["delete"](key);

          return undefined;
        }

        return data.value;
      });
    }
  }, {
    key: "set",
    value: function set(key, value, ttl) {
      var _this3 = this;

      key = this._getKeyPrefix(key);

      if (typeof ttl === 'undefined') {
        ttl = this.opts.ttl;
      }

      if (ttl === 0) {
        ttl = undefined;
      }

      var store = this.opts.store;
      return Promise.resolve().then(function () {
        var expires = typeof ttl === 'number' ? Date.now() + ttl : null;
        value = {
          value: value,
          expires: expires
        };
        return store.set(key, _this3.opts.serialize(value), ttl);
      }).then(function () {
        return true;
      });
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      key = this._getKeyPrefix(key);
      var store = this.opts.store;
      return Promise.resolve().then(function () {
        return store["delete"](key);
      });
    }
  }, {
    key: "clear",
    value: function clear() {
      var store = this.opts.store;
      return Promise.resolve().then(function () {
        return store.clear();
      });
    }
  }]);

  return Keyv;
}(EventEmitter);

module.exports = Keyv;