'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require('path');

var os = require('os');

var fs = require('graceful-fs');

var makeDir = require('make-dir');

var xdgBasedir = require('xdg-basedir');

var writeFileAtomic = require('write-file-atomic');

var dotProp = require('dot-prop');

var uniqueString = require('unique-string');

var configDirectory = xdgBasedir.config || path.join(os.tmpdir(), uniqueString());
var permissionError = 'You don\'t have access to this file.';
var makeDirOptions = {
  mode: 448
};
var writeFileOptions = {
  mode: 384
};

var Configstore =
/*#__PURE__*/
function () {
  function Configstore(id, defaults) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Configstore);

    var pathPrefix = options.globalConfigPath ? path.join(id, 'config.json') : path.join('configstore', "".concat(id, ".json"));
    this.path = options.configPath || path.join(configDirectory, pathPrefix);

    if (defaults) {
      this.all = _objectSpread({}, defaults, {}, this.all);
    }
  }

  _createClass(Configstore, [{
    key: "get",
    value: function get(key) {
      return dotProp.get(this.all, key);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var config = this.all;

      if (arguments.length === 1) {
        for (var _i = 0, _Object$keys = Object.keys(key); _i < _Object$keys.length; _i++) {
          var k = _Object$keys[_i];
          dotProp.set(config, k, key[k]);
        }
      } else {
        dotProp.set(config, key, value);
      }

      this.all = config;
    }
  }, {
    key: "has",
    value: function has(key) {
      return dotProp.has(this.all, key);
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var config = this.all;
      dotProp["delete"](config, key);
      this.all = config;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.all = {};
    }
  }, {
    key: "all",
    get: function get() {
      try {
        return JSON.parse(fs.readFileSync(this.path, 'utf8'));
      } catch (error) {
        // Create directory if it doesn't exist
        if (error.code === 'ENOENT') {
          return {};
        } // Improve the message of permission errors


        if (error.code === 'EACCES') {
          error.message = "".concat(error.message, "\n").concat(permissionError, "\n");
        } // Empty the file if it encounters invalid JSON


        if (error.name === 'SyntaxError') {
          writeFileAtomic.sync(this.path, '', writeFileOptions);
          return {};
        }

        throw error;
      }
    },
    set: function set(value) {
      try {
        // Make sure the folder exists as it could have been deleted in the meantime
        makeDir.sync(path.dirname(this.path), makeDirOptions);
        writeFileAtomic.sync(this.path, JSON.stringify(value, undefined, '\t'), writeFileOptions);
      } catch (error) {
        // Improve the message of permission errors
        if (error.code === 'EACCES') {
          error.message = "".concat(error.message, "\n").concat(permissionError, "\n");
        }

        throw error;
      }
    }
  }, {
    key: "size",
    get: function get() {
      return Object.keys(this.all || {}).length;
    }
  }]);

  return Configstore;
}();

module.exports = Configstore;