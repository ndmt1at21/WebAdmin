'use strict';

var _require = require('child_process'),
    execFileSync = _require.execFileSync;

var path = require('path');

var exec = function exec(command, arguments_, shell) {
  return execFileSync(command, arguments_, {
    encoding: 'utf8',
    shell: shell
  }).trim();
};

var create = function create(columns, rows) {
  return {
    columns: parseInt(columns, 10),
    rows: parseInt(rows, 10)
  };
};

module.exports = function () {
  var _process = process,
      env = _process.env,
      stdout = _process.stdout,
      stderr = _process.stderr;

  if (stdout && stdout.columns && stdout.rows) {
    return create(stdout.columns, stdout.rows);
  }

  if (stderr && stderr.columns && stderr.rows) {
    return create(stderr.columns, stderr.rows);
  } // These values are static, so not the first choice


  if (env.COLUMNS && env.LINES) {
    return create(env.COLUMNS, env.LINES);
  }

  if (process.platform === 'win32') {
    try {
      // Binary: https://github.com/sindresorhus/win-term-size
      var size = exec(path.join(__dirname, 'vendor/windows/term-size.exe')).split(/\r?\n/);

      if (size.length === 2) {
        return create(size[0], size[1]);
      }
    } catch (_) {}
  } else {
    if (process.platform === 'darwin') {
      try {
        // Binary: https://github.com/sindresorhus/macos-term-size
        var _size = exec(path.join(__dirname, 'vendor/macos/term-size'), [], true).split(/\r?\n/);

        if (_size.length === 2) {
          return create(_size[0], _size[1]);
        }
      } catch (_) {}
    } // `resize` is preferred as it works even when all file descriptors are redirected
    // https://linux.die.net/man/1/resize


    try {
      var _size2 = exec('resize', ['-u']).match(/\d+/g);

      if (_size2.length === 2) {
        return create(_size2[0], _size2[1]);
      }
    } catch (_) {}

    if (process.env.TERM) {
      try {
        var columns = exec('tput', ['cols']);
        var rows = exec('tput', ['lines']);

        if (columns && rows) {
          return create(columns, rows);
        }
      } catch (_) {}
    }
  }

  return create(80, 24);
};