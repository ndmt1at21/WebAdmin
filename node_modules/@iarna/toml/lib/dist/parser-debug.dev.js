'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Parser = require('./parser.js');

var util = require('util');

var dump = function dump(_) {
  return util.inspect(_, {
    colors: true,
    depth: 10,
    breakLength: Infinity
  });
};

var DebugParser =
/*#__PURE__*/
function (_Parser) {
  _inherits(DebugParser, _Parser);

  function DebugParser() {
    _classCallCheck(this, DebugParser);

    return _possibleConstructorReturn(this, _getPrototypeOf(DebugParser).apply(this, arguments));
  }

  _createClass(DebugParser, [{
    key: "stateName",
    value: function stateName(state) {
      // istanbul ignore next
      return state.parser && state.parser.name || state.name || 'anonymous';
    }
  }, {
    key: "runOne",
    value: function runOne() {
      var _this = this;

      var callStack = this.stack.concat(this.state).map(function (_) {
        return _this.stateName(_);
      }).join(' <- ');
      console.log('RUN', callStack, dump({
        line: this.line,
        col: this.col,
        "char": this["char"],
        ret: this.state.returned
      }));
      return _get(_getPrototypeOf(DebugParser.prototype), "runOne", this).call(this);
    }
  }, {
    key: "finish",
    value: function finish() {
      var obj = _get(_getPrototypeOf(DebugParser.prototype), "finish", this).call(this); // istanbul ignore if


      if (this.stack.length !== 0) {
        throw new Parser.Error('All states did not return by end of stream');
      }

      return obj;
    }
  }, {
    key: "callStack",
    value: function callStack() {
      var _this2 = this;

      var callStack = this.stack.map(function (_) {
        return _this2.stateName(_);
      }).join('    ').replace(/\S/g, ' ');
      return callStack ? callStack + '    ' : '';
    }
  }, {
    key: "next",
    value: function next(fn) {
      console.log('  ', this.callStack(), 'NEXT', this.stateName(fn));
      return _get(_getPrototypeOf(DebugParser.prototype), "next", this).call(this, fn);
    }
  }, {
    key: "goto",
    value: function goto(fn) {
      console.log('  ', this.callStack(), 'GOTO', this.stateName(fn));

      _get(_getPrototypeOf(DebugParser.prototype), "next", this).call(this, fn);

      return false;
    }
  }, {
    key: "call",
    value: function call(fn, returnWith) {
      console.log('  ', this.callStack(), 'CALL', fn.name, returnWith ? '-> ' + returnWith.name : '');
      if (returnWith) _get(_getPrototypeOf(DebugParser.prototype), "next", this).call(this, returnWith);
      this.stack.push(this.state);
      this.state = {
        parser: fn,
        buf: '',
        returned: null
      };
    }
  }, {
    key: "callNow",
    value: function callNow(fn, returnWith) {
      console.log('  ', this.callStack(), 'CALLNOW', fn.name, returnWith ? '-> ' + returnWith.name : '');
      if (returnWith) _get(_getPrototypeOf(DebugParser.prototype), "next", this).call(this, returnWith);
      this.stack.push(this.state);
      this.state = {
        parser: fn,
        buf: '',
        returned: null
      };
      return false;
    }
  }, {
    key: "return",
    value: function _return(value) {
      console.log('  ', this.callStack(), 'RETURN');
      return _get(_getPrototypeOf(DebugParser.prototype), "return", this).call(this, value);
    }
  }, {
    key: "returnNow",
    value: function returnNow(value) {
      console.log('  ', this.callStack(), 'RETURNNOW');

      _get(_getPrototypeOf(DebugParser.prototype), "return", this).call(this, value);

      return false;
    }
  }]);

  return DebugParser;
}(Parser);

module.exports = DebugParser;