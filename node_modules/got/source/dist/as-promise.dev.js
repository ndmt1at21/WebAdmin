'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var EventEmitter = require('events');

var getStream = require('get-stream');

var is = require('@sindresorhus/is');

var PCancelable = require('p-cancelable');

var requestAsEventEmitter = require('./request-as-event-emitter');

var _require = require('./errors'),
    HTTPError = _require.HTTPError,
    ParseError = _require.ParseError,
    ReadError = _require.ReadError;

var _require2 = require('./merge'),
    mergeOptions = _require2.options;

var _require3 = require('./normalize-arguments'),
    reNormalize = _require3.reNormalize;

var asPromise = function asPromise(options) {
  var proxy = new EventEmitter();
  var promise = new PCancelable(function (resolve, reject, onCancel) {
    var emitter = requestAsEventEmitter(options);
    onCancel(emitter.abort);
    emitter.on('response', function _callee(response) {
      var stream, data, limitStatusCode, _loop, _i, _Object$entries, _response, statusCode, parseError, error;

      return regeneratorRuntime.async(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              proxy.emit('response', response);
              stream = is["null"](options.encoding) ? getStream.buffer(response) : getStream(response, options);
              _context2.prev = 2;
              _context2.next = 5;
              return regeneratorRuntime.awrap(stream);

            case 5:
              data = _context2.sent;
              _context2.next = 12;
              break;

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](2);
              reject(new ReadError(_context2.t0, options));
              return _context2.abrupt("return");

            case 12:
              limitStatusCode = options.followRedirect ? 299 : 399;
              response.body = data;
              _context2.prev = 14;

              _loop = function _loop() {
                var _Object$entries$_i, index, hook;

                return regeneratorRuntime.async(function _loop$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), index = _Object$entries$_i[0], hook = _Object$entries$_i[1];
                        _context.next = 3;
                        return regeneratorRuntime.awrap(hook(response, function (updatedOptions) {
                          updatedOptions = reNormalize(mergeOptions(options, _objectSpread({}, updatedOptions, {
                            retry: 0,
                            throwHttpErrors: false
                          }))); // Remove any further hooks for that request, because we we'll call them anyway.
                          // The loop continues. We don't want duplicates (asPromise recursion).

                          updatedOptions.hooks.afterResponse = options.hooks.afterResponse.slice(0, index);
                          return asPromise(updatedOptions);
                        }));

                      case 3:
                        response = _context.sent;

                      case 4:
                      case "end":
                        return _context.stop();
                    }
                  }
                });
              };

              _i = 0, _Object$entries = Object.entries(options.hooks.afterResponse);

            case 17:
              if (!(_i < _Object$entries.length)) {
                _context2.next = 23;
                break;
              }

              _context2.next = 20;
              return regeneratorRuntime.awrap(_loop());

            case 20:
              _i++;
              _context2.next = 17;
              break;

            case 23:
              _context2.next = 29;
              break;

            case 25:
              _context2.prev = 25;
              _context2.t1 = _context2["catch"](14);
              reject(_context2.t1);
              return _context2.abrupt("return");

            case 29:
              _response = response, statusCode = _response.statusCode;

              if (!(options.json && response.body)) {
                _context2.next = 42;
                break;
              }

              _context2.prev = 31;
              response.body = JSON.parse(response.body);
              _context2.next = 42;
              break;

            case 35:
              _context2.prev = 35;
              _context2.t2 = _context2["catch"](31);

              if (!(statusCode >= 200 && statusCode < 300)) {
                _context2.next = 42;
                break;
              }

              parseError = new ParseError(_context2.t2, statusCode, options, data);
              Object.defineProperty(parseError, 'response', {
                value: response
              });
              reject(parseError);
              return _context2.abrupt("return");

            case 42:
              if (!(statusCode !== 304 && (statusCode < 200 || statusCode > limitStatusCode))) {
                _context2.next = 51;
                break;
              }

              error = new HTTPError(response, options);
              Object.defineProperty(error, 'response', {
                value: response
              });

              if (!(emitter.retry(error) === false)) {
                _context2.next = 50;
                break;
              }

              if (!options.throwHttpErrors) {
                _context2.next = 49;
                break;
              }

              reject(error);
              return _context2.abrupt("return");

            case 49:
              resolve(response);

            case 50:
              return _context2.abrupt("return");

            case 51:
              resolve(response);

            case 52:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, [[2, 8], [14, 25], [31, 35]]);
    });
    emitter.once('error', reject);
    ['request', 'redirect', 'uploadProgress', 'downloadProgress'].forEach(function (event) {
      return emitter.on(event, function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return proxy.emit.apply(proxy, [event].concat(args));
      });
    });
  });

  promise.on = function (name, fn) {
    proxy.on(name, fn);
    return promise;
  };

  return promise;
};

module.exports = asPromise;