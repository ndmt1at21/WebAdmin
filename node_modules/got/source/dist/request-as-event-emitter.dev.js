'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('url'),
    URL = _require.URL; // TODO: Use the `URL` global when targeting Node.js 10


var util = require('util');

var EventEmitter = require('events');

var http = require('http');

var https = require('https');

var urlLib = require('url');

var CacheableRequest = require('cacheable-request');

var toReadableStream = require('to-readable-stream');

var is = require('@sindresorhus/is');

var timer = require('@szmarczak/http-timer');

var timedOut = require('./utils/timed-out');

var getBodySize = require('./utils/get-body-size');

var getResponse = require('./get-response');

var progress = require('./progress');

var _require2 = require('./errors'),
    CacheError = _require2.CacheError,
    UnsupportedProtocolError = _require2.UnsupportedProtocolError,
    MaxRedirectsError = _require2.MaxRedirectsError,
    RequestError = _require2.RequestError,
    TimeoutError = _require2.TimeoutError;

var urlToOptions = require('./utils/url-to-options');

var getMethodRedirectCodes = new Set([300, 301, 302, 303, 304, 305, 307, 308]);
var allMethodRedirectCodes = new Set([300, 303, 307, 308]);

module.exports = function (options, input) {
  var emitter = new EventEmitter();
  var redirects = [];
  var currentRequest;
  var requestUrl;
  var redirectString;
  var uploadBodySize;
  var retryCount = 0;
  var shouldAbort = false;
  var setCookie = options.cookieJar ? util.promisify(options.cookieJar.setCookie.bind(options.cookieJar)) : null;
  var getCookieString = options.cookieJar ? util.promisify(options.cookieJar.getCookieString.bind(options.cookieJar)) : null;
  var agents = is.object(options.agent) ? options.agent : null;

  var emitError = function emitError(error) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, hook;

    return regeneratorRuntime.async(function emitError$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 4;
            _iterator = options.hooks.beforeError[Symbol.iterator]();

          case 6:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 14;
              break;
            }

            hook = _step.value;
            _context.next = 10;
            return regeneratorRuntime.awrap(hook(error));

          case 10:
            error = _context.sent;

          case 11:
            _iteratorNormalCompletion = true;
            _context.next = 6;
            break;

          case 14:
            _context.next = 20;
            break;

          case 16:
            _context.prev = 16;
            _context.t0 = _context["catch"](4);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 20:
            _context.prev = 20;
            _context.prev = 21;

            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }

          case 23:
            _context.prev = 23;

            if (!_didIteratorError) {
              _context.next = 26;
              break;
            }

            throw _iteratorError;

          case 26:
            return _context.finish(23);

          case 27:
            return _context.finish(20);

          case 28:
            emitter.emit('error', error);
            _context.next = 34;
            break;

          case 31:
            _context.prev = 31;
            _context.t1 = _context["catch"](0);
            emitter.emit('error', _context.t1);

          case 34:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[0, 31], [4, 16, 20, 28], [21,, 23, 27]]);
  };

  var get = function get(options) {
    var currentUrl, fn, protocolName, r, electron, cookieString, timings, handleResponse, handleRequest, cacheableRequest, cacheRequest;
    return regeneratorRuntime.async(function get$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            currentUrl = redirectString || requestUrl;

            if (!(options.protocol !== 'http:' && options.protocol !== 'https:')) {
              _context3.next = 3;
              break;
            }

            throw new UnsupportedProtocolError(options);

          case 3:
            decodeURI(currentUrl);

            if (is["function"](options.request)) {
              fn = {
                request: options.request
              };
            } else {
              fn = options.protocol === 'https:' ? https : http;
            }

            if (agents) {
              protocolName = options.protocol === 'https:' ? 'https' : 'http';
              options.agent = agents[protocolName] || options.agent;
            }
            /* istanbul ignore next: electron.net is broken */


            if (options.useElectronNet && process.versions.electron) {
              r = {
                x: require
              }['yx'.slice(1)]; // Trick webpack

              electron = r('electron');
              fn = electron.net || electron.remote.net;
            }

            if (!options.cookieJar) {
              _context3.next = 12;
              break;
            }

            _context3.next = 10;
            return regeneratorRuntime.awrap(getCookieString(currentUrl, {}));

          case 10:
            cookieString = _context3.sent;

            if (is.nonEmptyString(cookieString)) {
              options.headers.cookie = cookieString;
            }

          case 12:
            handleResponse = function handleResponse(response) {
              var _response, statusCode, rawCookies, redirectBuffer, redirectURL, redirectOptions, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, hook;

              return regeneratorRuntime.async(function handleResponse$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.prev = 0;

                      /* istanbul ignore next: fixes https://github.com/electron/electron/blob/cbb460d47628a7a146adf4419ed48550a98b2923/lib/browser/api/net.js#L59-L65 */
                      if (options.useElectronNet) {
                        response = new Proxy(response, {
                          get: function get(target, name) {
                            if (name === 'trailers' || name === 'rawTrailers') {
                              return [];
                            }

                            var value = target[name];
                            return is["function"](value) ? value.bind(target) : value;
                          }
                        });
                      }

                      _response = response, statusCode = _response.statusCode;
                      response.url = currentUrl;
                      response.requestUrl = requestUrl;
                      response.retryCount = retryCount;
                      response.timings = timings;
                      response.redirectUrls = redirects;
                      response.request = {
                        gotOptions: options
                      };
                      rawCookies = response.headers['set-cookie'];

                      if (!(options.cookieJar && rawCookies)) {
                        _context2.next = 13;
                        break;
                      }

                      _context2.next = 13;
                      return regeneratorRuntime.awrap(Promise.all(rawCookies.map(function (rawCookie) {
                        return setCookie(rawCookie, response.url);
                      })));

                    case 13:
                      if (!(options.followRedirect && 'location' in response.headers)) {
                        _context2.next = 54;
                        break;
                      }

                      if (!(allMethodRedirectCodes.has(statusCode) || getMethodRedirectCodes.has(statusCode) && (options.method === 'GET' || options.method === 'HEAD'))) {
                        _context2.next = 54;
                        break;
                      }

                      response.resume(); // We're being redirected, we don't care about the response.

                      if (statusCode === 303) {
                        // Server responded with "see other", indicating that the resource exists at another location,
                        // and the client should request it from that location via GET or HEAD.
                        options.method = 'GET';
                      }

                      if (!(redirects.length >= 10)) {
                        _context2.next = 19;
                        break;
                      }

                      throw new MaxRedirectsError(statusCode, redirects, options);

                    case 19:
                      // Handles invalid URLs. See https://github.com/sindresorhus/got/issues/604
                      redirectBuffer = Buffer.from(response.headers.location, 'binary').toString();
                      redirectURL = new URL(redirectBuffer, currentUrl);
                      redirectString = redirectURL.toString();
                      redirects.push(redirectString);
                      redirectOptions = _objectSpread({}, options, {}, urlToOptions(redirectURL));
                      _iteratorNormalCompletion2 = true;
                      _didIteratorError2 = false;
                      _iteratorError2 = undefined;
                      _context2.prev = 27;
                      _iterator2 = options.hooks.beforeRedirect[Symbol.iterator]();

                    case 29:
                      if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                        _context2.next = 36;
                        break;
                      }

                      hook = _step2.value;
                      _context2.next = 33;
                      return regeneratorRuntime.awrap(hook(redirectOptions));

                    case 33:
                      _iteratorNormalCompletion2 = true;
                      _context2.next = 29;
                      break;

                    case 36:
                      _context2.next = 42;
                      break;

                    case 38:
                      _context2.prev = 38;
                      _context2.t0 = _context2["catch"](27);
                      _didIteratorError2 = true;
                      _iteratorError2 = _context2.t0;

                    case 42:
                      _context2.prev = 42;
                      _context2.prev = 43;

                      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                        _iterator2["return"]();
                      }

                    case 45:
                      _context2.prev = 45;

                      if (!_didIteratorError2) {
                        _context2.next = 48;
                        break;
                      }

                      throw _iteratorError2;

                    case 48:
                      return _context2.finish(45);

                    case 49:
                      return _context2.finish(42);

                    case 50:
                      emitter.emit('redirect', response, redirectOptions);
                      _context2.next = 53;
                      return regeneratorRuntime.awrap(get(redirectOptions));

                    case 53:
                      return _context2.abrupt("return");

                    case 54:
                      getResponse(response, options, emitter);
                      _context2.next = 60;
                      break;

                    case 57:
                      _context2.prev = 57;
                      _context2.t1 = _context2["catch"](0);
                      emitError(_context2.t1);

                    case 60:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, null, null, [[0, 57], [27, 38, 42, 50], [43,, 45, 49]]);
            };

            handleRequest = function handleRequest(request) {
              if (shouldAbort) {
                request.once('error', function () {});
                request.abort();
                return;
              }

              currentRequest = request;
              request.once('error', function (error) {
                if (request.aborted) {
                  return;
                }

                if (error instanceof timedOut.TimeoutError) {
                  error = new TimeoutError(error, options);
                } else {
                  error = new RequestError(error, options);
                }

                if (emitter.retry(error) === false) {
                  emitError(error);
                }
              });
              timings = timer(request);
              progress.upload(request, emitter, uploadBodySize);

              if (options.gotTimeout) {
                timedOut(request, options.gotTimeout, options);
              }

              emitter.emit('request', request);

              var uploadComplete = function uploadComplete() {
                request.emit('upload-complete');
              };

              try {
                if (is.nodeStream(options.body)) {
                  options.body.once('end', uploadComplete);
                  options.body.pipe(request);
                  options.body = undefined;
                } else if (options.body) {
                  request.end(options.body, uploadComplete);
                } else if (input && (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH')) {
                  input.once('end', uploadComplete);
                  input.pipe(request);
                } else {
                  request.end(uploadComplete);
                }
              } catch (error) {
                emitError(new RequestError(error, options));
              }
            };

            if (options.cache) {
              cacheableRequest = new CacheableRequest(fn.request, options.cache);
              cacheRequest = cacheableRequest(options, handleResponse);
              cacheRequest.once('error', function (error) {
                if (error instanceof CacheableRequest.RequestError) {
                  emitError(new RequestError(error, options));
                } else {
                  emitError(new CacheError(error, options));
                }
              });
              cacheRequest.once('request', handleRequest);
            } else {
              // Catches errors thrown by calling fn.request(...)
              try {
                handleRequest(fn.request(options, handleResponse));
              } catch (error) {
                emitError(new RequestError(error, options));
              }
            }

          case 15:
          case "end":
            return _context3.stop();
        }
      }
    });
  };

  emitter.retry = function (error) {
    var backoff;

    try {
      backoff = options.retry.retries(++retryCount, error);
    } catch (error2) {
      emitError(error2);
      return;
    }

    if (backoff) {
      var retry = function retry(options) {
        var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, hook;

        return regeneratorRuntime.async(function retry$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context4.prev = 4;
                _iterator3 = options.hooks.beforeRetry[Symbol.iterator]();

              case 6:
                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                  _context4.next = 13;
                  break;
                }

                hook = _step3.value;
                _context4.next = 10;
                return regeneratorRuntime.awrap(hook(options, error, retryCount));

              case 10:
                _iteratorNormalCompletion3 = true;
                _context4.next = 6;
                break;

              case 13:
                _context4.next = 19;
                break;

              case 15:
                _context4.prev = 15;
                _context4.t0 = _context4["catch"](4);
                _didIteratorError3 = true;
                _iteratorError3 = _context4.t0;

              case 19:
                _context4.prev = 19;
                _context4.prev = 20;

                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }

              case 22:
                _context4.prev = 22;

                if (!_didIteratorError3) {
                  _context4.next = 25;
                  break;
                }

                throw _iteratorError3;

              case 25:
                return _context4.finish(22);

              case 26:
                return _context4.finish(19);

              case 27:
                _context4.next = 29;
                return regeneratorRuntime.awrap(get(options));

              case 29:
                _context4.next = 34;
                break;

              case 31:
                _context4.prev = 31;
                _context4.t1 = _context4["catch"](0);
                emitError(_context4.t1);

              case 34:
              case "end":
                return _context4.stop();
            }
          }
        }, null, null, [[0, 31], [4, 15, 19, 27], [20,, 22, 26]]);
      };

      setTimeout(retry, backoff, _objectSpread({}, options, {
        forceRefresh: true
      }));
      return true;
    }

    return false;
  };

  emitter.abort = function () {
    if (currentRequest) {
      currentRequest.once('error', function () {});
      currentRequest.abort();
    } else {
      shouldAbort = true;
    }
  };

  setImmediate(function _callee() {
    var body, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, hook;

    return regeneratorRuntime.async(function _callee$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.prev = 0;
            // Convert buffer to stream to receive upload progress events (#322)
            body = options.body;

            if (!is.buffer(body)) {
              _context5.next = 7;
              break;
            }

            options.body = toReadableStream(body);
            uploadBodySize = body.length;
            _context5.next = 10;
            break;

          case 7:
            _context5.next = 9;
            return regeneratorRuntime.awrap(getBodySize(options));

          case 9:
            uploadBodySize = _context5.sent;

          case 10:
            if (is.undefined(options.headers['content-length']) && is.undefined(options.headers['transfer-encoding'])) {
              if ((uploadBodySize > 0 || options.method === 'PUT') && !is["null"](uploadBodySize)) {
                options.headers['content-length'] = uploadBodySize;
              }
            }

            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            _context5.prev = 14;
            _iterator4 = options.hooks.beforeRequest[Symbol.iterator]();

          case 16:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              _context5.next = 23;
              break;
            }

            hook = _step4.value;
            _context5.next = 20;
            return regeneratorRuntime.awrap(hook(options));

          case 20:
            _iteratorNormalCompletion4 = true;
            _context5.next = 16;
            break;

          case 23:
            _context5.next = 29;
            break;

          case 25:
            _context5.prev = 25;
            _context5.t0 = _context5["catch"](14);
            _didIteratorError4 = true;
            _iteratorError4 = _context5.t0;

          case 29:
            _context5.prev = 29;
            _context5.prev = 30;

            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }

          case 32:
            _context5.prev = 32;

            if (!_didIteratorError4) {
              _context5.next = 35;
              break;
            }

            throw _iteratorError4;

          case 35:
            return _context5.finish(32);

          case 36:
            return _context5.finish(29);

          case 37:
            requestUrl = options.href || new URL(options.path, urlLib.format(options)).toString();
            _context5.next = 40;
            return regeneratorRuntime.awrap(get(options));

          case 40:
            _context5.next = 45;
            break;

          case 42:
            _context5.prev = 42;
            _context5.t1 = _context5["catch"](0);
            emitError(_context5.t1);

          case 45:
          case "end":
            return _context5.stop();
        }
      }
    }, null, null, [[0, 42], [14, 25, 29, 37], [30,, 32, 36]]);
  });
  return emitter;
};