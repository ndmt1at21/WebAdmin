'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var errors = require('./errors');

var asStream = require('./as-stream');

var asPromise = require('./as-promise');

var normalizeArguments = require('./normalize-arguments');

var merge = require('./merge');

var deepFreeze = require('./utils/deep-freeze');

var getPromiseOrStream = function getPromiseOrStream(options) {
  return options.stream ? asStream(options) : asPromise(options);
};

var aliases = ['get', 'post', 'put', 'patch', 'head', 'delete'];

var create = function create(defaults) {
  defaults = merge({}, defaults);
  normalizeArguments.preNormalize(defaults.options);

  if (!defaults.handler) {
    // This can't be getPromiseOrStream, because when merging
    // the chain would stop at this point and no further handlers would be called.
    defaults.handler = function (options, next) {
      return next(options);
    };
  }

  function got(url, options) {
    try {
      return defaults.handler(normalizeArguments(url, options, defaults), getPromiseOrStream);
    } catch (error) {
      if (options && options.stream) {
        throw error;
      } else {
        return Promise.reject(error);
      }
    }
  }

  got.create = create;

  got.extend = function (options) {
    var mutableDefaults;

    if (options && Reflect.has(options, 'mutableDefaults')) {
      mutableDefaults = options.mutableDefaults;
      delete options.mutableDefaults;
    } else {
      mutableDefaults = defaults.mutableDefaults;
    }

    return create({
      options: merge.options(defaults.options, options),
      handler: defaults.handler,
      mutableDefaults: mutableDefaults
    });
  };

  got.mergeInstances = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return create(merge.instances(args));
  };

  got.stream = function (url, options) {
    return got(url, _objectSpread({}, options, {
      stream: true
    }));
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var method = _step.value;

      got[method] = function (url, options) {
        return got(url, _objectSpread({}, options, {
          method: method
        }));
      };

      got.stream[method] = function (url, options) {
        return got.stream(url, _objectSpread({}, options, {
          method: method
        }));
      };
    };

    for (var _iterator = aliases[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  Object.assign(got, _objectSpread({}, errors, {
    mergeOptions: merge.options
  }));
  Object.defineProperty(got, 'defaults', {
    value: defaults.mutableDefaults ? defaults : deepFreeze(defaults),
    writable: defaults.mutableDefaults,
    configurable: defaults.mutableDefaults,
    enumerable: true
  });
  return got;
};

module.exports = create;