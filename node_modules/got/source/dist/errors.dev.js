'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var urlLib = require('url');

var http = require('http');

var PCancelable = require('p-cancelable');

var is = require('@sindresorhus/is');

var GotError =
/*#__PURE__*/
function (_Error) {
  _inherits(GotError, _Error);

  function GotError(message, error, options) {
    var _this;

    _classCallCheck(this, GotError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(GotError).call(this, message));
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    _this.name = 'GotError';

    if (!is.undefined(error.code)) {
      _this.code = error.code;
    }

    Object.assign(_assertThisInitialized(_this), {
      host: options.host,
      hostname: options.hostname,
      method: options.method,
      path: options.path,
      socketPath: options.socketPath,
      protocol: options.protocol,
      url: options.href,
      gotOptions: options
    });
    return _this;
  }

  return GotError;
}(_wrapNativeSuper(Error));

module.exports.GotError = GotError;

module.exports.CacheError =
/*#__PURE__*/
function (_GotError) {
  _inherits(_class, _GotError);

  function _class(error, options) {
    var _this2;

    _classCallCheck(this, _class);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, error.message, error, options));
    _this2.name = 'CacheError';
    return _this2;
  }

  return _class;
}(GotError);

module.exports.RequestError =
/*#__PURE__*/
function (_GotError2) {
  _inherits(_class2, _GotError2);

  function _class2(error, options) {
    var _this3;

    _classCallCheck(this, _class2);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(_class2).call(this, error.message, error, options));
    _this3.name = 'RequestError';
    return _this3;
  }

  return _class2;
}(GotError);

module.exports.ReadError =
/*#__PURE__*/
function (_GotError3) {
  _inherits(_class3, _GotError3);

  function _class3(error, options) {
    var _this4;

    _classCallCheck(this, _class3);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(_class3).call(this, error.message, error, options));
    _this4.name = 'ReadError';
    return _this4;
  }

  return _class3;
}(GotError);

module.exports.ParseError =
/*#__PURE__*/
function (_GotError4) {
  _inherits(_class4, _GotError4);

  function _class4(error, statusCode, options, data) {
    var _this5;

    _classCallCheck(this, _class4);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(_class4).call(this, "".concat(error.message, " in \"").concat(urlLib.format(options), "\": \n").concat(data.slice(0, 77), "..."), error, options));
    _this5.name = 'ParseError';
    _this5.statusCode = statusCode;
    _this5.statusMessage = http.STATUS_CODES[_this5.statusCode];
    return _this5;
  }

  return _class4;
}(GotError);

module.exports.HTTPError =
/*#__PURE__*/
function (_GotError5) {
  _inherits(_class5, _GotError5);

  function _class5(response, options) {
    var _this6;

    _classCallCheck(this, _class5);

    var statusCode = response.statusCode;
    var statusMessage = response.statusMessage;

    if (statusMessage) {
      statusMessage = statusMessage.replace(/\r?\n/g, ' ').trim();
    } else {
      statusMessage = http.STATUS_CODES[statusCode];
    }

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(_class5).call(this, "Response code ".concat(statusCode, " (").concat(statusMessage, ")"), {}, options));
    _this6.name = 'HTTPError';
    _this6.statusCode = statusCode;
    _this6.statusMessage = statusMessage;
    _this6.headers = response.headers;
    _this6.body = response.body;
    return _this6;
  }

  return _class5;
}(GotError);

module.exports.MaxRedirectsError =
/*#__PURE__*/
function (_GotError6) {
  _inherits(_class6, _GotError6);

  function _class6(statusCode, redirectUrls, options) {
    var _this7;

    _classCallCheck(this, _class6);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(_class6).call(this, 'Redirected 10 times. Aborting.', {}, options));
    _this7.name = 'MaxRedirectsError';
    _this7.statusCode = statusCode;
    _this7.statusMessage = http.STATUS_CODES[_this7.statusCode];
    _this7.redirectUrls = redirectUrls;
    return _this7;
  }

  return _class6;
}(GotError);

module.exports.UnsupportedProtocolError =
/*#__PURE__*/
function (_GotError7) {
  _inherits(_class7, _GotError7);

  function _class7(options) {
    var _this8;

    _classCallCheck(this, _class7);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(_class7).call(this, "Unsupported protocol \"".concat(options.protocol, "\""), {}, options));
    _this8.name = 'UnsupportedProtocolError';
    return _this8;
  }

  return _class7;
}(GotError);

module.exports.TimeoutError =
/*#__PURE__*/
function (_GotError8) {
  _inherits(_class8, _GotError8);

  function _class8(error, options) {
    var _this9;

    _classCallCheck(this, _class8);

    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(_class8).call(this, error.message, {
      code: 'ETIMEDOUT'
    }, options));
    _this9.name = 'TimeoutError';
    _this9.event = error.event;
    return _this9;
  }

  return _class8;
}(GotError);

module.exports.CancelError = PCancelable.CancelError;