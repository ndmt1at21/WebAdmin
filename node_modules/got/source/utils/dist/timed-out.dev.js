'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var net = require('net');

var TimeoutError =
/*#__PURE__*/
function (_Error) {
  _inherits(TimeoutError, _Error);

  function TimeoutError(threshold, event) {
    var _this;

    _classCallCheck(this, TimeoutError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TimeoutError).call(this, "Timeout awaiting '".concat(event, "' for ").concat(threshold, "ms")));
    _this.name = 'TimeoutError';
    _this.code = 'ETIMEDOUT';
    _this.event = event;
    return _this;
  }

  return TimeoutError;
}(_wrapNativeSuper(Error));

var reentry = Symbol('reentry');

var noop = function noop() {};

module.exports = function (request, delays, options) {
  /* istanbul ignore next: this makes sure timed-out isn't called twice */
  if (request[reentry]) {
    return;
  }

  request[reentry] = true;
  var stopNewTimeouts = false;

  var addTimeout = function addTimeout(delay, callback) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    // An error had been thrown before. Going further would result in uncaught errors.
    // See https://github.com/sindresorhus/got/issues/631#issuecomment-435675051
    if (stopNewTimeouts) {
      return noop;
    } // Event loop order is timers, poll, immediates.
    // The timed event may emit during the current tick poll phase, so
    // defer calling the handler until the poll phase completes.


    var immediate;
    var timeout = setTimeout(function () {
      immediate = setImmediate.apply(void 0, [callback, delay].concat(args));
      /* istanbul ignore next: added in node v9.7.0 */

      if (immediate.unref) {
        immediate.unref();
      }
    }, delay);
    /* istanbul ignore next: in order to support electron renderer */

    if (timeout.unref) {
      timeout.unref();
    }

    var cancel = function cancel() {
      clearTimeout(timeout);
      clearImmediate(immediate);
    };

    cancelers.push(cancel);
    return cancel;
  };

  var host = options.host,
      hostname = options.hostname;

  var timeoutHandler = function timeoutHandler(delay, event) {
    request.emit('error', new TimeoutError(delay, event));
    request.once('error', function () {}); // Ignore the `socket hung up` error made by request.abort()

    request.abort();
  };

  var cancelers = [];

  var cancelTimeouts = function cancelTimeouts() {
    stopNewTimeouts = true;
    cancelers.forEach(function (cancelTimeout) {
      return cancelTimeout();
    });
  };

  request.once('error', cancelTimeouts);
  request.once('response', function (response) {
    response.once('end', cancelTimeouts);
  });

  if (delays.request !== undefined) {
    addTimeout(delays.request, timeoutHandler, 'request');
  }

  if (delays.socket !== undefined) {
    var socketTimeoutHandler = function socketTimeoutHandler() {
      timeoutHandler(delays.socket, 'socket');
    };

    request.setTimeout(delays.socket, socketTimeoutHandler); // `request.setTimeout(0)` causes a memory leak.
    // We can just remove the listener and forget about the timer - it's unreffed.
    // See https://github.com/sindresorhus/got/issues/690

    cancelers.push(function () {
      return request.removeListener('timeout', socketTimeoutHandler);
    });
  }

  if (delays.lookup !== undefined && !request.socketPath && !net.isIP(hostname || host)) {
    request.once('socket', function (socket) {
      /* istanbul ignore next: hard to test */
      if (socket.connecting) {
        var cancelTimeout = addTimeout(delays.lookup, timeoutHandler, 'lookup');
        socket.once('lookup', cancelTimeout);
      }
    });
  }

  if (delays.connect !== undefined) {
    request.once('socket', function (socket) {
      /* istanbul ignore next: hard to test */
      if (socket.connecting) {
        var timeConnect = function timeConnect() {
          return addTimeout(delays.connect, timeoutHandler, 'connect');
        };

        if (request.socketPath || net.isIP(hostname || host)) {
          socket.once('connect', timeConnect());
        } else {
          socket.once('lookup', function (error) {
            if (error === null) {
              socket.once('connect', timeConnect());
            }
          });
        }
      }
    });
  }

  if (delays.secureConnect !== undefined && options.protocol === 'https:') {
    request.once('socket', function (socket) {
      /* istanbul ignore next: hard to test */
      if (socket.connecting) {
        socket.once('connect', function () {
          var cancelTimeout = addTimeout(delays.secureConnect, timeoutHandler, 'secureConnect');
          socket.once('secureConnect', cancelTimeout);
        });
      }
    });
  }

  if (delays.send !== undefined) {
    request.once('socket', function (socket) {
      var timeRequest = function timeRequest() {
        return addTimeout(delays.send, timeoutHandler, 'send');
      };
      /* istanbul ignore next: hard to test */


      if (socket.connecting) {
        socket.once('connect', function () {
          request.once('upload-complete', timeRequest());
        });
      } else {
        request.once('upload-complete', timeRequest());
      }
    });
  }

  if (delays.response !== undefined) {
    request.once('upload-complete', function () {
      var cancelTimeout = addTimeout(delays.response, timeoutHandler, 'response');
      request.once('response', cancelTimeout);
    });
  }
};

module.exports.TimeoutError = TimeoutError;