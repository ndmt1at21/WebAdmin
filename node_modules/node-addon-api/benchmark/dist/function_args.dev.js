"use strict";

var path = require('path');

var Benchmark = require('benchmark');

var addonName = path.basename(__filename, '.js');
[addonName, addonName + '_noexcept'].forEach(function (addonName) {
  var rootAddon = require('bindings')({
    bindings: addonName,
    module_root: __dirname
  });

  delete rootAddon.path;
  var implems = Object.keys(rootAddon);
  var maxNameLength = implems.reduce(function (soFar, value) {
    return Math.max(soFar, value.length);
  }, 0);
  var anObject = {};
  console.log("\n".concat(addonName, ": "));
  console.log('no arguments:');
  implems.reduce(function (suite, implem) {
    var fn = rootAddon[implem].noArgFunction;
    return suite.add(implem.padStart(maxNameLength, ' '), function () {
      return fn();
    });
  }, new Benchmark.Suite()).on('cycle', function (event) {
    return console.log(String(event.target));
  }).run();
  console.log('one argument:');
  implems.reduce(function (suite, implem) {
    var fn = rootAddon[implem].oneArgFunction;
    return suite.add(implem.padStart(maxNameLength, ' '), function () {
      return fn('x');
    });
  }, new Benchmark.Suite()).on('cycle', function (event) {
    return console.log(String(event.target));
  }).run();
  console.log('two arguments:');
  implems.reduce(function (suite, implem) {
    var fn = rootAddon[implem].twoArgFunction;
    return suite.add(implem.padStart(maxNameLength, ' '), function () {
      return fn('x', 12);
    });
  }, new Benchmark.Suite()).on('cycle', function (event) {
    return console.log(String(event.target));
  }).run();
  console.log('three arguments:');
  implems.reduce(function (suite, implem) {
    var fn = rootAddon[implem].threeArgFunction;
    return suite.add(implem.padStart(maxNameLength, ' '), function () {
      return fn('x', 12, true);
    });
  }, new Benchmark.Suite()).on('cycle', function (event) {
    return console.log(String(event.target));
  }).run();
  console.log('four arguments:');
  implems.reduce(function (suite, implem) {
    var fn = rootAddon[implem].fourArgFunction;
    return suite.add(implem.padStart(maxNameLength, ' '), function () {
      return fn('x', 12, true, anObject);
    });
  }, new Benchmark.Suite()).on('cycle', function (event) {
    return console.log(String(event.target));
  }).run();
});