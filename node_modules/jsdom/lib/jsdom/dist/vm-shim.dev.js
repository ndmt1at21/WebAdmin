"use strict";
/* eslint-disable no-new-func */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var acorn = require("acorn");

var findGlobals = require("acorn-globals");

var escodegen = require("escodegen"); // We can't use the default browserify vm shim because it doesn't work in a web worker.
// From ES spec table of contents. Also, don't forget the Annex B additions.
// If someone feels ambitious maybe make this into an npm package.


var builtInConsts = ["Infinity", "NaN", "undefined"];
var otherBuiltIns = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "Array", "ArrayBuffer", "Boolean", "DataView", "Date", "Error", "EvalError", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Number", "Object", "Proxy", "Promise", "RangeError", "ReferenceError", "RegExp", "Set", "String", "Symbol", "SyntaxError", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "URIError", "WeakMap", "WeakSet", "JSON", "Math", "Reflect", "escape", "unescape"];

exports.createContext = function (sandbox) {
  Object.defineProperty(sandbox, "__isVMShimContext", {
    value: true,
    writable: true,
    configurable: true,
    enumerable: false
  });
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = builtInConsts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var builtIn = _step.value;
      Object.defineProperty(sandbox, builtIn, {
        value: global[builtIn],
        writable: false,
        configurable: false,
        enumerable: false
      });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = otherBuiltIns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _builtIn = _step2.value;
      Object.defineProperty(sandbox, _builtIn, {
        value: global[_builtIn],
        writable: true,
        configurable: true,
        enumerable: false
      });
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  Object.defineProperty(sandbox, "eval", {
    value: function value(code) {
      return exports.runInContext(code, sandbox);
    },
    writable: true,
    configurable: true,
    enumerable: false
  });
};

exports.isContext = function (sandbox) {
  return sandbox.__isVMShimContext;
};

exports.runInContext = function (code, contextifiedSandbox, options) {
  if (code === "this") {
    // Special case for during window creation.
    return contextifiedSandbox;
  }

  if (options === undefined) {
    options = {};
  }

  var comments = [];
  var tokens = [];
  var ast = acorn.parse(code, {
    allowReturnOutsideFunction: true,
    ranges: true,
    // collect comments in Esprima's format
    onComment: comments,
    // collect token ranges
    onToken: tokens
  }); // make sure we keep comments

  escodegen.attachComments(ast, comments, tokens);
  var globals = findGlobals(ast);

  for (var i = 0; i < globals.length; ++i) {
    if (globals[i].name === "window" || globals[i].name === "this") {
      continue;
    }

    var nodes = globals[i].nodes;

    for (var j = 0; j < nodes.length; ++j) {
      var _nodes$j = nodes[j],
          type = _nodes$j.type,
          name = _nodes$j.name;
      nodes[j].type = "MemberExpression";
      nodes[j].property = {
        name: name,
        type: type
      };
      nodes[j].computed = false;
      nodes[j].object = {
        name: "window",
        type: "Identifier"
      };
    }
  }

  var lastNode = ast.body[ast.body.length - 1];

  if (lastNode.type === "ExpressionStatement") {
    lastNode.type = "ReturnStatement";
    lastNode.argument = lastNode.expression;
    delete lastNode.expression;
  }

  var rewrittenCode = escodegen.generate(ast, {
    comment: true
  });
  var suffix = options.filename !== undefined ? "\n//# sourceURL=" + options.filename : "";
  return Function("window", rewrittenCode + suffix).bind(contextifiedSandbox)(contextifiedSandbox);
};

exports.Script =
/*#__PURE__*/
function () {
  function VMShimScript(code, options) {
    _classCallCheck(this, VMShimScript);

    this._code = code;
    this._options = options;
  }

  _createClass(VMShimScript, [{
    key: "runInContext",
    value: function runInContext(sandbox, options) {
      return exports.runInContext(this._code, sandbox, Object.assign({}, this._options, options));
    }
  }]);

  return VMShimScript;
}();