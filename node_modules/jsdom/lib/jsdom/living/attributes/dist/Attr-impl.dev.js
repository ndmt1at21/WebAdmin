"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var attributes = require("../attributes.js");

exports.implementation =
/*#__PURE__*/
function () {
  function AttrImpl(_, privateData) {
    _classCallCheck(this, AttrImpl);

    this._namespace = privateData.namespace !== undefined ? privateData.namespace : null;
    this._namespacePrefix = privateData.namespacePrefix !== undefined ? privateData.namespacePrefix : null;
    this._localName = privateData.localName;
    this._value = privateData.value !== undefined ? privateData.value : "";
    this._element = privateData.element !== undefined ? privateData.element : null;
    this.specified = true;
  }

  _createClass(AttrImpl, [{
    key: "namespaceURI",
    get: function get() {
      return this._namespace;
    }
  }, {
    key: "prefix",
    get: function get() {
      return this._namespacePrefix;
    }
  }, {
    key: "localName",
    get: function get() {
      return this._localName;
    }
  }, {
    key: "name",
    get: function get() {
      return this._qualifiedName;
    }
  }, {
    key: "nodeName",
    get: function get() {
      return this._qualifiedName;
    }
  }, {
    key: "value",
    get: function get() {
      return this._value;
    },
    set: function set(v) {
      if (this._element === null) {
        this._value = v;
      } else {
        attributes.changeAttribute(this._element, this, v);
      }
    } // Delegate to value

  }, {
    key: "nodeValue",
    get: function get() {
      return this.value;
    },
    set: function set(v) {
      this.value = v;
    } // Delegate to value

  }, {
    key: "textContent",
    get: function get() {
      return this.value;
    },
    set: function set(v) {
      this.value = v;
    }
  }, {
    key: "ownerElement",
    get: function get() {
      return this._element;
    }
  }, {
    key: "_qualifiedName",
    get: function get() {
      // https://dom.spec.whatwg.org/#concept-attribute-qualified-name
      if (this._namespacePrefix === null) {
        return this._localName;
      }

      return this._namespacePrefix + ":" + this._localName;
    }
  }]);

  return AttrImpl;
}();