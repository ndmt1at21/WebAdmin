"use strict";

var asciiWhitespaceRe = /^[\t\n\f\r ]$/;
exports.asciiWhitespaceRe = asciiWhitespaceRe; // https://infra.spec.whatwg.org/#ascii-lowercase

exports.asciiLowercase = function (s) {
  return s.replace(/[A-Z]/g, function (l) {
    return l.toLowerCase();
  });
}; // https://infra.spec.whatwg.org/#strip-newlines


exports.stripNewlines = function (s) {
  return s.replace(/[\n\r]+/g, "");
}; // https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace


exports.stripLeadingAndTrailingASCIIWhitespace = function (s) {
  return s.replace(/^[ \t\n\f\r]+/, "").replace(/[ \t\n\f\r]+$/, "");
}; // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace


exports.stripAndCollapseASCIIWhitespace = function (s) {
  return s.replace(/[ \t\n\f\r]+/g, " ").replace(/^[ \t\n\f\r]+/, "").replace(/[ \t\n\f\r]+$/, "");
}; // https://html.spec.whatwg.org/multipage/infrastructure.html#valid-simple-colour


exports.isValidSimpleColor = function (s) {
  return /^#[a-fA-F\d]{6}$/.test(s);
}; // https://infra.spec.whatwg.org/#ascii-case-insensitive


exports.asciiCaseInsensitiveMatch = function (a, b) {
  if (a.length !== b.length) {
    return false;
  }

  for (var i = 0; i < a.length; ++i) {
    if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {
      return false;
    }
  }

  return true;
}; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number


var floatingPointNumRe = /^-?(?:\d+|\d*\.\d+)(?:[eE][-+]?\d+)?$/;

exports.isValidFloatingPointNumber = function (str) {
  return floatingPointNumRe.test(str);
}; // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values


exports.parseFloatingPointNumber = function (str) {
  var parsed = parseFloat(str);
  return isFinite(parsed) ? parsed : NaN;
}; // https://infra.spec.whatwg.org/#split-on-ascii-whitespace


exports.splitOnASCIIWhitespace = function (str) {
  var position = 0;
  var tokens = [];

  while (position < str.length && asciiWhitespaceRe.test(str[position])) {
    position++;
  }

  if (position === str.length) {
    return tokens;
  }

  while (position < str.length) {
    var start = position;

    while (position < str.length && !asciiWhitespaceRe.test(str[position])) {
      position++;
    }

    tokens.push(str.slice(start, position));

    while (position < str.length && asciiWhitespaceRe.test(str[position])) {
      position++;
    }
  }

  return tokens;
}; // https://infra.spec.whatwg.org/#split-on-commas


exports.splitOnCommas = function (str) {
  var position = 0;
  var tokens = [];

  while (position < str.length) {
    var start = position;

    while (position < str.length && str[position] !== ",") {
      position++;
    }

    var end = position;

    while (start < str.length && asciiWhitespaceRe.test(str[start])) {
      start++;
    }

    while (end > start && asciiWhitespaceRe.test(str[end - 1])) {
      end--;
    }

    tokens.push(str.slice(start, end));

    if (position < str.length) {
      position++;
    }
  }

  return tokens;
};