"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("../helpers/internal-constants"),
    domSymbolTree = _require.domSymbolTree;

var _require2 = require("../helpers/namespaces"),
    SVG_NS = _require2.SVG_NS;

var _require3 = require("../../utils"),
    mixin = _require3.mixin;

var SVGAnimatedString = require("../generated/SVGAnimatedString");

var ElementImpl = require("./Element-impl").implementation;

var ElementCSSInlineStyleImpl = require("./ElementCSSInlineStyle-impl").implementation;

var GlobalEventHandlersImpl = require("./GlobalEventHandlers-impl").implementation;

var HTMLAndSVGElementSharedImpl = require("./HTMLAndSVGElementShared-impl").implementation;

var SVGElementImpl =
/*#__PURE__*/
function (_ElementImpl) {
  _inherits(SVGElementImpl, _ElementImpl);

  function SVGElementImpl(args, privateData) {
    var _this;

    _classCallCheck(this, SVGElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SVGElementImpl).call(this, args, privateData));

    _this._initHTMLAndSVGElement();

    _this._initElementCSSInlineStyle();

    _this._initGlobalEvents();

    return _this;
  }

  _createClass(SVGElementImpl, [{
    key: "className",
    get: function get() {
      return SVGAnimatedString.createImpl([], {
        element: this,
        attribute: "class"
      });
    }
  }, {
    key: "ownerSVGElement",
    get: function get() {
      var e = domSymbolTree.parent(this);

      while (e && e.namespaceURI === SVG_NS) {
        if (e.localName === "svg") {
          return e;
        }

        e = domSymbolTree.parent(e);
      }

      return null;
    }
  }, {
    key: "viewportElement",
    get: function get() {
      // TODO: <symbol>/<use> may make this different from ownerSVGElement.
      return this.ownerSVGElement;
    }
  }]);

  return SVGElementImpl;
}(ElementImpl);

SVGElementImpl.attributeRegistry = new Map();
mixin(SVGElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);
mixin(SVGElementImpl.prototype, GlobalEventHandlersImpl.prototype);
mixin(SVGElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);
exports.implementation = SVGElementImpl;