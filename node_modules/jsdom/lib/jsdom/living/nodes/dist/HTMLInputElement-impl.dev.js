"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var DOMException = require("domexception");

var FileList = require("../generated/FileList");

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var idlUtils = require("../generated/utils");

var DefaultConstraintValidationImpl = require("../constraint-validation/DefaultConstraintValidation-impl").implementation;

var ValidityState = require("../generated/ValidityState");

var _require = require("../../utils"),
    mixin = _require.mixin;

var _require2 = require("../helpers/internal-constants"),
    domSymbolTree = _require2.domSymbolTree,
    cloningSteps = _require2.cloningSteps;

var _require3 = require("../helpers/form-controls"),
    getLabelsForLabelable = _require3.getLabelsForLabelable,
    formOwner = _require3.formOwner;

var _require4 = require("../helpers/events"),
    fireAnEvent = _require4.fireAnEvent;

var _require5 = require("../helpers/form-controls"),
    isDisabled = _require5.isDisabled,
    isValidEmailAddress = _require5.isValidEmailAddress,
    isValidAbsoluteURL = _require5.isValidAbsoluteURL,
    sanitizeValueByType = _require5.sanitizeValueByType;

var _require6 = require("../helpers/strings"),
    parseFloatingPointNumber = _require6.parseFloatingPointNumber,
    asciiCaseInsensitiveMatch = _require6.asciiCaseInsensitiveMatch,
    splitOnCommas = _require6.splitOnCommas;

var _require7 = require("../helpers/dates-and-times"),
    parseDateString = _require7.parseDateString,
    parseLocalDateAndTimeString = _require7.parseLocalDateAndTimeString,
    parseMonthString = _require7.parseMonthString,
    parseTimeString = _require7.parseTimeString,
    parseWeekString = _require7.parseWeekString;

var filesSymbol = Symbol("files");
var selectAllowedTypes = new Set(["text", "search", "tel", "url", "password", "email", "date", "month", "week", "time", "datetime-local", "color", "file", "number"]);
var variableLengthSelectionAllowedTypes = new Set(["text", "search", "tel", "url", "password"]);
var maxMinStepTypes = new Set(["date", "month", "week", "time", "datetime-local", "number", "range", "datetime"]); // https://html.spec.whatwg.org/multipage/input.html#concept-input-apply

var applicableTypesForAttribute = {
  max: maxMinStepTypes,
  min: maxMinStepTypes,
  step: maxMinStepTypes,
  pattern: new Set(["text", "search", "tel", "url", "email", "password"])
};

function allowSelect(type) {
  return selectAllowedTypes.has(type.toLowerCase());
}

function allowVariableLengthSelection(type) {
  return variableLengthSelectionAllowedTypes.has(type.toLowerCase());
}

var valueAttributeDefaultMode = new Set(["hidden", "submit", "image", "reset", "button"]);
var valueAttributeDefaultOnMode = new Set(["checkbox", "radio"]);

function valueAttributeMode(type) {
  if (valueAttributeDefaultMode.has(type)) {
    return "default";
  }

  if (valueAttributeDefaultOnMode.has(type)) {
    return "default/on";
  }

  if (type === "file") {
    return "filename";
  }

  return "value";
} // Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].


function getUTCMs(year) {
  var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var hour = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var minute = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var second = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  var millisecond = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

  if (year > 99 || year < 0) {
    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);
  }

  var d = new Date(0);
  d.setUTCFullYear(year);
  d.setUTCMonth(month - 1);
  d.setUTCDate(day);
  d.setUTCHours(hour);
  d.setUTCMinutes(minute);
  d.setUTCSeconds(second, millisecond);
  return d.valueOf();
}

var dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];
var convertStringToNumberByTypeMap = new Map([[// https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number
"date", function (input) {
  var date = parseDateString(input);

  if (date === null) {
    return NaN;
  }

  return getUTCMs(date.year, date.month, date.day);
}], [// https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number
"month", function (input) {
  var date = parseMonthString(input);

  if (date === null) {
    return NaN;
  }

  return (date.year - 1970) * 12 + (date.month - 1);
}], [// https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number
"week", function (input) {
  var date = parseWeekString(input);

  if (date === null) {
    return NaN;
  }

  var dateObj = new Date(getUTCMs(date.year)); // An HTML week starts on Monday, while 0 represents Sunday. Account for such.

  var dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];
  return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);
}], [// https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number
"time", function (input) {
  var time = parseTimeString(input);

  if (time === null) {
    return NaN;
  }

  return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;
}], [// https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number
"datetime-local", function (input) {
  var dateAndTime = parseLocalDateAndTimeString(input);

  if (dateAndTime === null) {
    return NaN;
  }

  var _dateAndTime$date = dateAndTime.date,
      year = _dateAndTime$date.year,
      month = _dateAndTime$date.month,
      day = _dateAndTime$date.day,
      _dateAndTime$time = dateAndTime.time,
      hour = _dateAndTime$time.hour,
      minute = _dateAndTime$time.minute,
      second = _dateAndTime$time.second,
      millisecond = _dateAndTime$time.millisecond; // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.

  return getUTCMs(year, month, day, hour, minute, second, millisecond);
}], // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number
["number", parseFloatingPointNumber], // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number
["range", parseFloatingPointNumber]]);

var HTMLInputElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLInputElementImpl, _HTMLElementImpl);

  function HTMLInputElementImpl(args, privateData) {
    var _this;

    _classCallCheck(this, HTMLInputElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLInputElementImpl).call(this, args, privateData));
    _this._selectionStart = _this._selectionEnd = 0;
    _this._selectionDirection = "none";
    _this._value = null;
    _this._dirtyValue = false;
    _this._checkedness = false;
    _this._dirtyCheckedness = false;
    _this._preCheckedRadioState = null;
    _this.indeterminate = false;
    _this._customValidityErrorMessage = "";
    _this._labels = null;
    _this._hasActivationBehavior = true;
    return _this;
  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number


  _createClass(HTMLInputElementImpl, [{
    key: "_getValue",
    value: function _getValue() {
      return this._value;
    }
  }, {
    key: "_legacyPreActivationBehavior",
    value: function _legacyPreActivationBehavior() {
      if (this.type === "checkbox") {
        this.checked = !this.checked;
      } else if (this.type === "radio") {
        this._preCheckedRadioState = this.checked;
        this.checked = true;
      }
    }
  }, {
    key: "_legacyCanceledActivationBehavior",
    value: function _legacyCanceledActivationBehavior() {
      if (this.type === "checkbox") {
        this.checked = !this.checked;
      } else if (this.type === "radio") {
        if (this._preCheckedRadioState !== null) {
          this.checked = this._preCheckedRadioState;
          this._preCheckedRadioState = null;
        }
      }
    }
  }, {
    key: "_activationBehavior",
    value: function _activationBehavior() {
      if (isDisabled(this)) {
        return;
      }

      var form = this.form;

      if (this.type === "checkbox" || this.type === "radio" && !this._preCheckedRadioState) {
        fireAnEvent("input", this, undefined, {
          bubbles: true
        });
        fireAnEvent("change", this, undefined, {
          bubbles: true
        });
      } else if (form && this.type === "submit") {
        form._doSubmit();
      } else if (form && this.type === "reset") {
        form._doReset();
      }
    }
  }, {
    key: "_attrModified",
    value: function _attrModified(name) {
      var wrapper = idlUtils.wrapperForImpl(this);

      if (!this._dirtyValue && name === "value") {
        this._value = sanitizeValueByType(this, wrapper.defaultValue);
      }

      if (!this._dirtyCheckedness && name === "checked") {
        this._checkedness = wrapper.defaultChecked;

        if (this._checkedness) {
          this._removeOtherRadioCheckedness();
        }
      }

      if (name === "name" || name === "type") {
        if (this._checkedness) {
          this._removeOtherRadioCheckedness();
        }
      }

      _get(_getPrototypeOf(HTMLInputElementImpl.prototype), "_attrModified", this).apply(this, arguments);
    }
  }, {
    key: "_formReset",
    value: function _formReset() {
      var wrapper = idlUtils.wrapperForImpl(this);
      this._value = sanitizeValueByType(this, wrapper.defaultValue);
      this._dirtyValue = false;
      this._checkedness = wrapper.defaultChecked;
      this._dirtyCheckedness = false;

      if (this._checkedness) {
        this._removeOtherRadioCheckedness();
      }
    }
  }, {
    key: "_changedFormOwner",
    value: function _changedFormOwner() {
      if (this._checkedness) {
        this._removeOtherRadioCheckedness();
      }
    }
  }, {
    key: "_removeOtherRadioCheckedness",
    value: function _removeOtherRadioCheckedness() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._otherRadioGroupElements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var radioGroupElement = _step.value;
          radioGroupElement._checkedness = false;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "_isRadioGroupChecked",
    value: function _isRadioGroupChecked() {
      if (this.checked) {
        return true;
      }

      return this._otherRadioGroupElements.some(function (radioGroupElement) {
        return radioGroupElement.checked;
      });
    }
  }, {
    key: "_dispatchSelectEvent",
    value: function _dispatchSelectEvent() {
      fireAnEvent("select", this, undefined, {
        bubbles: true,
        cancelable: true
      });
    }
  }, {
    key: "_getValueLength",
    value: function _getValueLength() {
      return typeof this.value === "string" ? this.value.length : 0;
    }
  }, {
    key: "select",
    value: function select() {
      if (!allowSelect(this.type)) {
        return;
      }

      this._selectionStart = 0;
      this._selectionEnd = this._getValueLength();
      this._selectionDirection = "none";

      this._dispatchSelectEvent();
    }
  }, {
    key: "setSelectionRange",
    value: function setSelectionRange(start, end, dir) {
      if (!allowVariableLengthSelection(this.type)) {
        throw new DOMException("The object is in an invalid state.", "InvalidStateError");
      }

      this._selectionEnd = Math.min(end, this._getValueLength());
      this._selectionStart = Math.min(start, this._selectionEnd);
      this._selectionDirection = dir === "forward" || dir === "backward" ? dir : "none";

      this._dispatchSelectEvent();
    }
  }, {
    key: "setRangeText",
    value: function setRangeText(repl, start, end) {
      var selectionMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "preserve";

      if (!allowVariableLengthSelection(this.type)) {
        throw new DOMException("The object is in an invalid state.", "InvalidStateError");
      }

      if (arguments.length < 2) {
        start = this._selectionStart;
        end = this._selectionEnd;
      } else if (start > end) {
        throw new DOMException("The index is not in the allowed range.", "IndexSizeError");
      }

      start = Math.min(start, this._getValueLength());
      end = Math.min(end, this._getValueLength());
      var val = this.value;
      var selStart = this._selectionStart;
      var selEnd = this._selectionEnd;
      this.value = val.slice(0, start) + repl + val.slice(end);
      var newEnd = start + this.value.length;

      if (selectionMode === "select") {
        this.setSelectionRange(start, newEnd);
      } else if (selectionMode === "start") {
        this.setSelectionRange(start, start);
      } else if (selectionMode === "end") {
        this.setSelectionRange(newEnd, newEnd);
      } else {
        // preserve
        var delta = repl.length - (end - start);

        if (selStart > end) {
          selStart += delta;
        } else if (selStart > start) {
          selStart = start;
        }

        if (selEnd > end) {
          selEnd += delta;
        } else if (selEnd > start) {
          selEnd = newEnd;
        }

        this.setSelectionRange(selStart, selEnd);
      }
    } // https://html.spec.whatwg.org/multipage/input.html#the-list-attribute

  }, {
    key: "_attributeApplies",
    value: function _attributeApplies(attribute) {
      return applicableTypesForAttribute[attribute].has(this.type);
    }
  }, {
    key: "_barredFromConstraintValidationSpecialization",
    value: function _barredFromConstraintValidationSpecialization() {
      // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)
      // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)
      // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)
      var willNotValidateTypes = new Set(["hidden", "reset", "button"]); // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly

      var readOnly = this.hasAttributeNS(null, "readonly"); // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled

      return willNotValidateTypes.has(this.type) || readOnly;
    }
  }, {
    key: cloningSteps,
    value: function value(copy, node) {
      copy._value = node._value;
      copy._checkedness = node._checkedness;
      copy._dirtyValue = node._dirtyValue;
      copy._dirtyCheckedness = node._dirtyCheckedness;
    }
  }, {
    key: "_convertStringToNumber",
    get: function get() {
      return convertStringToNumberByTypeMap.get(this.type);
    }
  }, {
    key: "_otherRadioGroupElements",
    get: function get() {
      var wrapper = idlUtils.wrapperForImpl(this);
      var root = this._radioButtonGroupRoot;

      if (!root) {
        return [];
      }

      var result = [];
      var descendants = domSymbolTree.treeIterator(root);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = descendants[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var candidate = _step2.value;

          if (candidate._radioButtonGroupRoot !== root) {
            continue;
          }

          var candidateWrapper = idlUtils.wrapperForImpl(candidate);

          if (!candidateWrapper.name || candidateWrapper.name !== wrapper.name) {
            continue;
          }

          if (candidate !== this) {
            result.push(candidate);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return result;
    }
  }, {
    key: "_radioButtonGroupRoot",
    get: function get() {
      var wrapper = idlUtils.wrapperForImpl(this);

      if (this.type !== "radio" || !wrapper.name) {
        return null;
      }

      var e = domSymbolTree.parent(this);

      while (e) {
        // root node of this home sub tree
        // or the form element we belong to
        if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === "FORM") {
          return e;
        }

        e = domSymbolTree.parent(e);
      }

      return null;
    }
  }, {
    key: "labels",
    get: function get() {
      return getLabelsForLabelable(this);
    }
  }, {
    key: "form",
    get: function get() {
      return formOwner(this);
    }
  }, {
    key: "checked",
    get: function get() {
      return this._checkedness;
    },
    set: function set(checked) {
      this._checkedness = Boolean(checked);
      this._dirtyCheckedness = true;

      if (this._checkedness) {
        this._removeOtherRadioCheckedness();
      }
    }
  }, {
    key: "value",
    get: function get() {
      switch (valueAttributeMode(this.type)) {
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value
        case "value":
          return this._value !== null ? this._value : "";
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default

        case "default":
          {
            var attr = this.getAttributeNS(null, "value");
            return attr !== null ? attr : "";
          }
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on

        case "default/on":
          {
            var _attr = this.getAttributeNS(null, "value");

            return _attr !== null ? _attr : "on";
          }
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename

        case "filename":
          return this.files.length ? "C:\\fakepath\\" + this.files[0].name : "";

        default:
          throw new Error("jsdom internal error: unknown value attribute mode");
      }
    },
    set: function set(val) {
      switch (valueAttributeMode(this.type)) {
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value
        case "value":
          {
            var oldValue = this._value;

            if (val === null) {
              this._value = null;
            } else {
              this._value = sanitizeValueByType(this, String(val));
            }

            this._dirtyValue = true;

            if (oldValue !== this._value) {
              this._selectionStart = 0;
              this._selectionEnd = 0;
              this._selectionDirection = "none";
            }

            break;
          }
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on

        case "default":
        case "default/on":
          this.setAttributeNS(null, "value", val);
          break;
        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename

        case "filename":
          if (val === "") {
            this.files.length = 0;
          } else {
            throw new DOMException("This input element accepts a filename, which may only be programmatically set to " + "the empty string.", "InvalidStateError");
          }

          break;

        default:
          throw new Error("jsdom internal error: unknown value attribute mode");
      }
    }
  }, {
    key: "files",
    get: function get() {
      if (this.type === "file") {
        this[filesSymbol] = this[filesSymbol] || FileList.createImpl();
      } else {
        this[filesSymbol] = null;
      }

      return this[filesSymbol];
    },
    set: function set(value) {
      if (this.type === "file" && value !== null) {
        this[filesSymbol] = value;
      }
    }
  }, {
    key: "type",
    get: function get() {
      var type = this.getAttributeNS(null, "type");
      return type ? type.toLowerCase() : "text";
    },
    set: function set(type) {
      this.setAttributeNS(null, "type", type);
    }
  }, {
    key: "selectionStart",
    get: function get() {
      if (!allowVariableLengthSelection(this.type)) {
        return null;
      }

      return this._selectionStart;
    },
    set: function set(start) {
      if (!allowVariableLengthSelection(this.type)) {
        throw new DOMException("The object is in an invalid state.", "InvalidStateError");
      }

      this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);
    }
  }, {
    key: "selectionEnd",
    get: function get() {
      if (!allowVariableLengthSelection(this.type)) {
        return null;
      }

      return this._selectionEnd;
    },
    set: function set(end) {
      if (!allowVariableLengthSelection(this.type)) {
        throw new DOMException("The object is in an invalid state.", "InvalidStateError");
      }

      this.setSelectionRange(this._selectionStart, end, this._selectionDirection);
    }
  }, {
    key: "selectionDirection",
    get: function get() {
      if (!allowVariableLengthSelection(this.type)) {
        return null;
      }

      return this._selectionDirection;
    },
    set: function set(dir) {
      if (!allowVariableLengthSelection(this.type)) {
        throw new DOMException("The object is in an invalid state.", "InvalidStateError");
      }

      this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);
    }
  }, {
    key: "list",
    get: function get() {
      var id = this.getAttributeNS(null, "list");
      var el = this.getRootNode({}).getElementById(id);

      if (el && el.localName === "datalist") {
        return el;
      }

      return null;
    }
  }, {
    key: "maxLength",
    set: function set(value) {
      if (value < 0) {
        throw new DOMException("The index is not in the allowed range.", "IndexSizeError");
      }

      this.setAttributeNS(null, "maxlength", String(value));
    },
    get: function get() {
      if (!this.hasAttributeNS(null, "maxlength")) {
        return 524288; // stole this from chrome
      }

      return parseInt(this.getAttributeNS(null, "maxlength"));
    }
  }, {
    key: "minLength",
    set: function set(value) {
      if (value < 0) {
        throw new DOMException("The index is not in the allowed range.", "IndexSizeError");
      }

      this.setAttributeNS(null, "minlength", String(value));
    },
    get: function get() {
      if (!this.hasAttributeNS(null, "minlength")) {
        return 0;
      }

      return parseInt(this.getAttributeNS(null, "minlength"));
    }
  }, {
    key: "size",
    get: function get() {
      if (!this.hasAttributeNS(null, "size")) {
        return 20;
      }

      return parseInt(this.getAttributeNS(null, "size"));
    },
    set: function set(value) {
      if (value <= 0) {
        throw new DOMException("The index is not in the allowed range.", "IndexSizeError");
      }

      this.setAttributeNS(null, "size", String(value));
    }
  }, {
    key: "src",
    get: function get() {
      return conversions.USVString(this.getAttributeNS(null, "src"));
    },
    set: function set(value) {
      this.setAttributeNS(null, "src", value);
    } // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes

  }, {
    key: "_minimum",
    get: function get() {
      var min = this._defaultMinimum;
      var attr = this.getAttributeNS(null, "min");
      var convertStringToNumber = this._convertStringToNumber;

      if (attr !== null && convertStringToNumber !== undefined) {
        var parsed = convertStringToNumber(attr);

        if (!isNaN(parsed)) {
          min = parsed;
        }
      }

      return min;
    }
  }, {
    key: "_maximum",
    get: function get() {
      var max = this._defaultMaximum;
      var attr = this.getAttributeNS(null, "max");
      var convertStringToNumber = this._convertStringToNumber;

      if (attr !== null && convertStringToNumber !== undefined) {
        var parsed = convertStringToNumber(attr);

        if (!isNaN(parsed)) {
          max = parsed;
        }
      }

      return max;
    }
  }, {
    key: "_defaultMinimum",
    get: function get() {
      if (this.type === "range") {
        return 0;
      }

      return null;
    }
  }, {
    key: "_defaultMaximum",
    get: function get() {
      if (this.type === "range") {
        return 100;
      }

      return null;
    }
  }, {
    key: "_parsedValue",
    get: function get() {
      var converter = this._convertStringToNumber;

      if (converter !== undefined) {
        return converter(this.value);
      }

      return this.value;
    } // https://html.spec.whatwg.org/multipage/input.html#attr-input-step

  }, {
    key: "_step",
    get: function get() {
      var step = this._defaultStep;

      if (this.hasAttributeNS(null, "step") && !asciiCaseInsensitiveMatch(this.getAttributeNS(null, "step"), "any")) {
        var parsedStep = parseFloatingPointNumber(this.getAttributeNS(null, "step"));

        if (!isNaN(parsedStep) && parsedStep > 0) {
          step = parsedStep;
        }
      }

      return step;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale

  }, {
    key: "_stepScaleFactor",
    get: function get() {
      var dayInMilliseconds = 24 * 60 * 60 * 1000;

      switch (this.type) {
        case "week":
          return 7 * dayInMilliseconds;

        case "date":
          return dayInMilliseconds;

        case "datetime-local":
        case "datetime":
        case "time":
          return 1000;
      }

      return 1;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default

  }, {
    key: "_defaultStep",
    get: function get() {
      if (this.type === "datetime-local" || this.type === "datetime" || this.type === "time") {
        return 60;
      }

      return 1;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero

  }, {
    key: "_stepBase",
    get: function get() {
      var _this2 = this;

      var parseAttribute = function parseAttribute(attributeName) {
        return parseFloatingPointNumber(_this2.getAttributeNS(null, attributeName));
      };

      if (this.hasAttributeNS(null, "min")) {
        var min = parseAttribute("min");

        if (!isNaN(min)) {
          return min;
        }
      }

      if (this.hasAttributeNS(null, "value")) {
        var value = parseAttribute("value");

        if (!isNaN(value)) {
          return value;
        }
      }

      return this._defaultStepBase;
    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base

  }, {
    key: "_defaultStepBase",
    get: function get() {
      if (this.type === "week") {
        // The start of week 1970-W01
        return 259200000;
      }

      return 0;
    }
  }, {
    key: "validity",
    get: function get() {
      var _this3 = this;

      if (!this._validity) {
        this._validity = ValidityState.createImpl(this, {
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing
          valueMissing: function valueMissing() {
            if (!_this3.hasAttributeNS(null, "required")) {
              return false;
            }

            if (_this3.type === "checkbox") {
              // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)
              // Constraint validation: If the element is required and its checkedness is
              // false, then the element is suffering from being missing.
              return !_this3.checked;
            } else if (_this3.type === "radio") {
              // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)
              // Constraint validation: If an element in the radio button group is required,
              // and all of the input elements in the radio button group have a checkedness
              // that is false, then the element is suffering from being missing.
              return !_this3._isRadioGroupChecked();
            }

            return _this3.value === "";
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength
          // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have
          // to be set to false.
          tooLong: function tooLong() {
            return false;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength
          tooShort: function tooShort() {
            return false;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow
          // https://html.spec.whatwg.org/multipage/input.html#attr-input-max
          rangeOverflow: function rangeOverflow() {
            return _this3._attributeApplies("max") && _this3._maximum !== null && _this3._parsedValue > _this3._maximum;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow
          // https://html.spec.whatwg.org/multipage/input.html#attr-input-min
          rangeUnderflow: function rangeUnderflow() {
            return _this3._attributeApplies("min") && _this3._minimum !== null && _this3._parsedValue < _this3._minimum;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch
          patternMismatch: function patternMismatch() {
            if (!_this3.hasAttributeNS(null, "pattern") || !_this3._attributeApplies("pattern") || _this3.value === "") {
              return false;
            }

            var regExp;

            try {
              regExp = new RegExp(_this3.getAttributeNS(null, "pattern"), "u");
            } catch (e) {
              return false;
            }

            if (_this3.type === "email" && _this3.hasAttributeNS(null, "multiple")) {
              return splitOnCommas(_this3.value).every(function (value) {
                return regExp.test(value);
              });
            }

            return !regExp.test(_this3.value);
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch
          // https://html.spec.whatwg.org/multipage/input.html#attr-input-step
          stepMismatch: function stepMismatch() {
            // Constraint validation: When the element has an allowed value step, and the result of applying
            // the algorithm to convert a string to a number to the string given by the element's value is a
            // number, and that number subtracted from the step base is not an integral multiple of the
            // allowed value step, the element is suffering from a step mismatch.
            if (!_this3._attributeApplies("step")) {
              return false;
            }

            var step = parseFloatingPointNumber(_this3.getAttributeNS(null, "step"));

            if (isNaN(step) || step <= 0) {
              return false;
            }

            var number = _this3._parsedValue;

            if (isNaN(number) || _this3.value === "") {
              return false;
            }

            if (_this3._type === "month") {
              number = parseMonthString(_this3.value).month - 1;
            }

            return number % (_this3._stepBase - _this3._step * _this3._stepScaleFactor) !== 0;
          },
          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch
          typeMismatch: function typeMismatch() {
            if (_this3.value === "") {
              return false;
            }

            if (_this3.type === "email") {
              // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)
              // Constraint validation [multiple=false]: While the value of the element is neither the empty
              // string nor a single valid e - mail address, the element is suffering from a type mismatch.
              // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,
              // the element is suffering from a type mismatch.
              return !isValidEmailAddress(_this3.value, _this3.hasAttributeNS(null, "multiple"));
            } else if (_this3.type === "url") {
              // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)
              // Constraint validation: While the value of the element is neither the empty string
              // nor a valid absolute URL, the element is suffering from a type mismatch.
              return !isValidAbsoluteURL(_this3.value);
            }

            return false;
          }
        });
      }

      return this._validity;
    }
  }]);

  return HTMLInputElementImpl;
}(HTMLElementImpl);

mixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);
module.exports = {
  implementation: HTMLInputElementImpl
};