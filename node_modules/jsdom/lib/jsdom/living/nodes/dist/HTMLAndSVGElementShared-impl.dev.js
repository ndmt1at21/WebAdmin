"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var focusing = require("../helpers/focusing");

var DOMStringMap = require("../generated/DOMStringMap");

var HTMLAndSVGElementSharedImpl =
/*#__PURE__*/
function () {
  function HTMLAndSVGElementSharedImpl() {
    _classCallCheck(this, HTMLAndSVGElementSharedImpl);
  }

  _createClass(HTMLAndSVGElementSharedImpl, [{
    key: "_initHTMLAndSVGElement",
    value: function _initHTMLAndSVGElement() {
      this._tabIndex = 0;
      this._dataset = DOMStringMap.createImpl([], {
        element: this
      });
    }
  }, {
    key: "focus",
    value: function focus() {
      if (!focusing.isFocusableAreaElement(this)) {
        return;
      }

      var previous = this._ownerDocument._lastFocusedElement;
      focusing.fireFocusEventWithTargetAdjustment("blur", previous, this);
      this._ownerDocument._lastFocusedElement = this;
      focusing.fireFocusEventWithTargetAdjustment("focus", this, previous);

      if (this._ownerDocument._defaultView._frameElement) {
        this._ownerDocument._defaultView._frameElement.focus();
      }
    }
  }, {
    key: "blur",
    value: function blur() {
      if (this._ownerDocument._lastFocusedElement !== this || !focusing.isFocusableAreaElement(this)) {
        return;
      }

      focusing.fireFocusEventWithTargetAdjustment("blur", this, this._ownerDocument);
      this._ownerDocument._lastFocusedElement = null;
      focusing.fireFocusEventWithTargetAdjustment("focus", this._ownerDocument, this);
    }
  }, {
    key: "dataset",
    get: function get() {
      return this._dataset;
    } // TODO this should be [Reflect]able if we added default value support to webidl2js's [Reflect]

  }, {
    key: "tabIndex",
    get: function get() {
      if (!this.hasAttributeNS(null, "tabindex")) {
        return focusing.isFocusableAreaElement(this) ? 0 : -1;
      }

      return conversions["long"](this.getAttributeNS(null, "tabindex"));
    },
    set: function set(value) {
      this.setAttributeNS(null, "tabindex", String(value));
    }
  }]);

  return HTMLAndSVGElementSharedImpl;
}();

exports.implementation = HTMLAndSVGElementSharedImpl;