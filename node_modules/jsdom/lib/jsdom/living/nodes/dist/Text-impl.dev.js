"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SlotableMixinImpl = require("./Slotable-impl").implementation;

var CharacterDataImpl = require("./CharacterData-impl").implementation;

var _require = require("../helpers/internal-constants"),
    domSymbolTree = _require.domSymbolTree;

var DOMException = require("domexception");

var NODE_TYPE = require("../node-type");

var _require2 = require("../../utils"),
    mixin = _require2.mixin;

var TextImpl =
/*#__PURE__*/
function (_CharacterDataImpl) {
  _inherits(TextImpl, _CharacterDataImpl);

  function TextImpl(args, privateData) {
    var _this;

    _classCallCheck(this, TextImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextImpl).call(this, args, privateData));

    _this._initSlotableMixin();

    _this.nodeType = NODE_TYPE.TEXT_NODE;
    return _this;
  }

  _createClass(TextImpl, [{
    key: "splitText",
    value: function splitText(offset) {
      offset >>>= 0;
      var length = this.length;

      if (offset > length) {
        throw new DOMException("The index is not in the allowed range.", "IndexSizeError");
      }

      var count = length - offset;
      var newData = this.substringData(offset, count);

      var newNode = this._ownerDocument.createTextNode(newData);

      var parent = domSymbolTree.parent(this);

      if (parent !== null) {
        parent._insert(newNode, this.nextSibling);
      }

      this.replaceData(offset, count, "");
      return newNode; // TODO: range stuff
    }
  }, {
    key: "wholeText",
    get: function get() {
      var wholeText = this.textContent;
      var next;
      var current = this;

      while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {
        wholeText = next.textContent + wholeText;
        current = next;
      }

      current = this;

      while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {
        wholeText += next.textContent;
        current = next;
      }

      return wholeText;
    }
  }]);

  return TextImpl;
}(CharacterDataImpl);

mixin(TextImpl.prototype, SlotableMixinImpl.prototype);
module.exports = {
  implementation: TextImpl
};