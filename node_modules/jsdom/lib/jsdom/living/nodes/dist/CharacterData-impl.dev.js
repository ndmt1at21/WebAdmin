"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DOMException = require("domexception");

var _require = require("../../utils"),
    mixin = _require.mixin;

var NodeImpl = require("./Node-impl").implementation;

var ChildNodeImpl = require("./ChildNode-impl").implementation;

var NonDocumentTypeChildNodeImpl = require("./NonDocumentTypeChildNode-impl").implementation;

var _require2 = require("../node-type"),
    TEXT_NODE = _require2.TEXT_NODE;

var _require3 = require("../helpers/mutation-observers"),
    MUTATION_TYPE = _require3.MUTATION_TYPE,
    queueMutationRecord = _require3.queueMutationRecord;

var CharacterDataImpl =
/*#__PURE__*/
function (_NodeImpl) {
  _inherits(CharacterDataImpl, _NodeImpl);

  function CharacterDataImpl(args, privateData) {
    var _this;

    _classCallCheck(this, CharacterDataImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CharacterDataImpl).call(this, args, privateData));
    _this._data = privateData.data;
    return _this;
  }

  _createClass(CharacterDataImpl, [{
    key: "substringData",
    value: function substringData(offset, count) {
      var length = this.length;

      if (offset > length) {
        throw new DOMException("The index is not in the allowed range.", "IndexSizeError");
      }

      if (offset + count > length) {
        return this._data.slice(offset);
      }

      return this._data.slice(offset, offset + count);
    }
  }, {
    key: "appendData",
    value: function appendData(data) {
      this.replaceData(this.length, 0, data);
    }
  }, {
    key: "insertData",
    value: function insertData(offset, data) {
      this.replaceData(offset, 0, data);
    }
  }, {
    key: "deleteData",
    value: function deleteData(offset, count) {
      this.replaceData(offset, count, "");
    }
  }, {
    key: "replaceData",
    value: function replaceData(offset, count, data) {
      var length = this.length;

      if (offset > length) {
        throw new DOMException("The index is not in the allowed range.", "IndexSizeError");
      }

      if (offset + count > length) {
        count = length - offset;
      }

      var start = this._data.slice(0, offset);

      var end = this._data.slice(offset + count);

      queueMutationRecord(MUTATION_TYPE.CHARACTER_DATA, this, null, null, this._data, [], [], null, null);
      this._data = start + data + end; // TODO: range stuff

      if (this.nodeType === TEXT_NODE && this.parentNode) {
        this.parentNode._childTextContentChangeSteps();
      }
    }
  }, {
    key: "data",
    get: function get() {
      return this._data;
    },
    set: function set(data) {
      this.replaceData(0, this.length, data);
    }
  }, {
    key: "length",
    get: function get() {
      return this._data.length;
    }
  }]);

  return CharacterDataImpl;
}(NodeImpl);

mixin(CharacterDataImpl.prototype, NonDocumentTypeChildNodeImpl.prototype);
mixin(CharacterDataImpl.prototype, ChildNodeImpl.prototype);
module.exports = {
  implementation: CharacterDataImpl
};