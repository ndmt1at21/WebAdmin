"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HTMLElementImpl = require("./HTMLElement-impl").implementation;

var MouseEvent = require("../generated/MouseEvent");

var _require = require("../helpers/internal-constants"),
    domSymbolTree = _require.domSymbolTree;

var NODE_TYPE = require("../node-type");

var _require2 = require("../helpers/form-controls"),
    isLabelable = _require2.isLabelable,
    isDisabled = _require2.isDisabled;

var _require3 = require("../helpers/events"),
    fireAnEvent = _require3.fireAnEvent;

function sendClickToAssociatedNode(node) {
  fireAnEvent("click", node, MouseEvent, {
    bubbles: true,
    cancelable: true,
    view: node.ownerDocument ? node.ownerDocument.defaultView : null,
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    button: 0,
    detail: 1,
    relatedTarget: null
  });
}

var HTMLLabelElementImpl =
/*#__PURE__*/
function (_HTMLElementImpl) {
  _inherits(HTMLLabelElementImpl, _HTMLElementImpl);

  function HTMLLabelElementImpl(args, privateData) {
    var _this;

    _classCallCheck(this, HTMLLabelElementImpl);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTMLLabelElementImpl).call(this, args, privateData));
    _this._hasActivationBehavior = true;
    return _this;
  }

  _createClass(HTMLLabelElementImpl, [{
    key: "_activationBehavior",
    value: function _activationBehavior() {
      var node = this.control;

      if (node && !isDisabled(node)) {
        sendClickToAssociatedNode(node);
      }
    }
  }, {
    key: "control",
    get: function get() {
      if (this.hasAttributeNS(null, "for")) {
        var forValue = this.getAttributeNS(null, "for");

        if (forValue === "") {
          return null;
        }

        var root = this.getRootNode({});
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = domSymbolTree.treeIterator(root)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var descendant = _step.value;

            if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttributeNS(null, "id") === forValue) {
              return isLabelable(descendant) ? descendant : null;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return null;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = domSymbolTree.treeIterator(this)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _descendant = _step2.value;

          if (isLabelable(_descendant)) {
            return _descendant;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return null;
    }
  }, {
    key: "form",
    get: function get() {
      var node = this.control;

      if (node) {
        return node.form;
      }

      return null;
    }
  }]);

  return HTMLLabelElementImpl;
}(HTMLElementImpl);

module.exports = {
  implementation: HTMLLabelElementImpl
};