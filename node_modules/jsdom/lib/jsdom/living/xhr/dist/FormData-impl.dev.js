"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var idlUtils = require("../generated/utils");

var _require = require("../helpers/traversal"),
    closest = _require.closest;

var _require2 = require("../helpers/form-controls"),
    isDisabled = _require2.isDisabled,
    isSubmittable = _require2.isSubmittable,
    isButton = _require2.isButton,
    normalizeToCRLF = _require2.normalizeToCRLF;

var Blob = require("../generated/Blob.js");

var File = require("../generated/File.js");

var conversions = require("webidl-conversions");

exports.implementation =
/*#__PURE__*/
function () {
  function FormDataImpl(args) {
    _classCallCheck(this, FormDataImpl);

    this._entries = [];

    if (args[0] !== undefined) {
      this._entries = constructTheFormDataSet(args[0]);
    }
  }

  _createClass(FormDataImpl, [{
    key: "append",
    value: function append(name, value, filename) {
      var entry = createAnEntry(name, value, filename);

      this._entries.push(entry);
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      this._entries = this._entries.filter(function (entry) {
        return entry.name !== name;
      });
    }
  }, {
    key: "get",
    value: function get(name) {
      var foundEntry = this._entries.find(function (entry) {
        return entry.name === name;
      });

      return foundEntry !== undefined ? foundEntry.value : null;
    }
  }, {
    key: "getAll",
    value: function getAll(name) {
      return this._entries.filter(function (entry) {
        return entry.name === name;
      }).map(function (entry) {
        return entry.value;
      });
    }
  }, {
    key: "has",
    value: function has(name) {
      return this._entries.findIndex(function (entry) {
        return entry.name === name;
      }) !== -1;
    }
  }, {
    key: "set",
    value: function set(name, value, filename) {
      var entry = createAnEntry(name, value, filename);

      var foundIndex = this._entries.findIndex(function (e) {
        return e.name === name;
      });

      if (foundIndex !== -1) {
        this._entries[foundIndex] = entry;
        this._entries = this._entries.filter(function (e, i) {
          return e.name !== name || i === foundIndex;
        });
      } else {
        this._entries.push(entry);
      }
    }
  }, {
    key: Symbol.iterator,
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function value() {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;

      return regeneratorRuntime.wrap(function value$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 3;
              _iterator = this._entries[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 12;
                break;
              }

              entry = _step.value;
              _context.next = 9;
              return [entry.name, idlUtils.tryWrapperForImpl(entry.value)];

            case 9:
              _iteratorNormalCompletion = true;
              _context.next = 5;
              break;

            case 12:
              _context.next = 18;
              break;

            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](3);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 18:
              _context.prev = 18;
              _context.prev = 19;

              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }

            case 21:
              _context.prev = 21;

              if (!_didIteratorError) {
                _context.next = 24;
                break;
              }

              throw _iteratorError;

            case 24:
              return _context.finish(21);

            case 25:
              return _context.finish(18);

            case 26:
            case "end":
              return _context.stop();
          }
        }
      }, value, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }]);

  return FormDataImpl;
}();

function createAnEntry(name, value, filename) {
  var entry = {
    name: name
  }; // https://github.com/whatwg/xhr/issues/75

  if (Blob.isImpl(value) && !File.isImpl(value)) {
    var oldValue = value;
    value = File.createImpl([[], "blob", {
      type: oldValue.type
    }]); // "representing the same bytes"

    value._buffer = oldValue._buffer;
  }

  if (File.isImpl(value) && filename !== undefined) {
    var _oldValue = value;
    value = File.createImpl([[], filename, // spec makes no mention of `lastModified`; assume it is inherited
    // (Chrome's behavior)
    {
      type: _oldValue.type,
      lastModified: _oldValue.lastModified
    }]); // "representing the same bytes"

    value._buffer = _oldValue._buffer;
  }

  entry.value = value;
  return entry;
}

function constructTheFormDataSet(form, submitter) {
  // https://html.spec.whatwg.org/multipage/forms.html#constructing-form-data-set
  var controls = form.elements.filter(isSubmittable); // submittable is a subset of listed

  var formDataSet = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = controls[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var fieldWrapper = _step2.value;
      var field = fieldWrapper;

      if (closest(field, "datalist") !== null) {
        continue;
      }

      if (isDisabled(field)) {
        continue;
      }

      if (isButton(field) && field !== submitter) {
        continue;
      }

      if (field.type === "checkbox" && field._checkedness === false) {
        continue;
      }

      if (field.type === "radio" && field._checkedness === false) {
        continue;
      }

      if (field.type !== "image" && (!field.hasAttributeNS(null, "name") || field.getAttributeNS(null, "name") === "")) {
        continue;
      }

      if (field.localName === "object") {
        // in jsdom, no objects are "using a plugin"
        continue;
      }

      var type = field.type; // Omit special processing of <input type="image"> since so far we don't actually ever pass submitter

      var nameAttr = field.getAttributeNS(null, "name");
      var name = nameAttr === null ? "" : nameAttr;

      if (field.localName === "select") {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = field.options[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var option = _step3.value;

            if (option._selectedness === true && !isDisabled(field)) {
              formDataSet.push({
                name: name,
                value: option.value,
                type: type
              });
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      } else if (field.localName === "input" && (type === "checkbox" || type === "radio")) {
        var _value = field.hasAttributeNS(null, "value") ? field.getAttributeNS(null, "value") : "on";

        formDataSet.push({
          name: name,
          value: _value,
          type: type
        });
      } else if (type === "file") {
        for (var i = 0; i < field.files.length; ++i) {
          formDataSet.push({
            name: name,
            value: field.files.item(i),
            type: type
          });
        }

        if (field.files.length === 0) {
          formDataSet.push({
            name: name,
            value: "",
            type: "application/octet-stream"
          });
        }
      }
      /* skip plugins */
      else {
          formDataSet.push({
            name: name,
            value: field._getValue(),
            type: type
          });
        }

      var dirname = field.getAttributeNS(null, "dirname");

      if (dirname !== null && dirname !== "") {
        var dir = "ltr"; // jsdom does not (yet?) implement actual directionality

        formDataSet.push({
          name: dirname,
          value: dir,
          type: "direction"
        });
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  for (var _i = 0, _formDataSet = formDataSet; _i < _formDataSet.length; _i++) {
    var entry = _formDataSet[_i];
    entry.name = conversions.USVString(normalizeToCRLF(entry.name));

    if (entry.type !== "file" && entry.type !== "textarea") {
      entry.value = normalizeToCRLF(entry.value);
    }

    if (entry.type !== "file") {
      entry.value = conversions.USVString(entry.value);
    }
  }

  return formDataSet;
}