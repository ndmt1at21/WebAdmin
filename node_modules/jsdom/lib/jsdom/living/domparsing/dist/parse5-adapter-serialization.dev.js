"use strict";

var idlUtils = require("../generated/utils");

var nodeTypes = require("../node-type");

var _require = require("../helpers/internal-constants"),
    domSymbolTree = _require.domSymbolTree; // Serialization only requires a subset of the tree adapter interface.
// Tree traversing


exports.getFirstChild = function (node) {
  return node.firstChild;
};

exports.getChildNodes = function (node) {
  return node.childNodesForSerializing || domSymbolTree.childrenToArray(node);
};

exports.getParentNode = function (node) {
  return node.parentNode;
};

exports.getAttrList = function (node) {
  return idlUtils.wrapperForImpl(node._attributes);
}; // Node data


exports.getTagName = function (element) {
  return element._qualifiedName;
}; // https://github.com/inikulin/parse5/issues/231


exports.getNamespaceURI = function (element) {
  return element.namespaceURI;
};

exports.getTextNodeContent = exports.getCommentNodeContent = function (node) {
  return node.data;
};

exports.getDocumentTypeNodeName = function (node) {
  return node.name;
};

exports.getDocumentTypeNodePublicId = function (node) {
  return node.publicId;
};

exports.getDocumentTypeNodeSystemId = function (node) {
  return node.systemId;
};

exports.getTemplateContent = function (templateElement) {
  return templateElement._templateContents;
};

exports.getDocumentMode = function (document) {
  return document._mode;
}; // Node types


exports.isTextNode = function (node) {
  return node.nodeType === nodeTypes.TEXT_NODE;
};

exports.isCommentNode = function (node) {
  return node.nodeType === nodeTypes.COMMENT_NODE;
};

exports.isDocumentTypeNode = function (node) {
  return node.nodeType === nodeTypes.DOCUMENT_TYPE_NODE;
};

exports.isElementNode = function (node) {
  return node.nodeType === nodeTypes.ELEMENT_NODE;
}; // Source code location


exports.setNodeSourceCodeLocation = function (node, location) {
  node.sourceCodeLocation = location;
};

exports.getNodeSourceCodeLocation = function (node) {
  return node.sourceCodeLocation;
};