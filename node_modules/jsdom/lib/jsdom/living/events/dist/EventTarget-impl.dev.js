"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DOMException = require("domexception");

var reportException = require("../helpers/runtime-script-errors");

var idlUtils = require("../generated/utils");

var _require = require("../helpers/shadow-dom"),
    isNode = _require.isNode,
    isShadowRoot = _require.isShadowRoot,
    isSlotable = _require.isSlotable,
    getRoot = _require.getRoot,
    getEventTargetParent = _require.getEventTargetParent,
    isShadowInclusiveAncestor = _require.isShadowInclusiveAncestor,
    retarget = _require.retarget;

var Event = require("../generated/Event")["interface"];

var MouseEvent = require("../generated/MouseEvent");

var EventTargetImpl =
/*#__PURE__*/
function () {
  function EventTargetImpl() {
    _classCallCheck(this, EventTargetImpl);

    this._eventListeners = Object.create(null);
  }

  _createClass(EventTargetImpl, [{
    key: "addEventListener",
    value: function addEventListener(type, callback, options) {
      // webidl2js currently can't handle neither optional arguments nor callback interfaces
      if (callback === undefined || callback === null) {
        callback = null;
      } else if (_typeof(callback) !== "object" && typeof callback !== "function") {
        throw new TypeError("Only undefined, null, an object, or a function are allowed for the callback parameter");
      }

      options = normalizeEventHandlerOptions(options, ["capture", "once", "passive"]);

      if (callback === null) {
        return;
      }

      if (!this._eventListeners[type]) {
        this._eventListeners[type] = [];
      }

      for (var i = 0; i < this._eventListeners[type].length; ++i) {
        var listener = this._eventListeners[type][i];

        if (listener.options.capture === options.capture && listener.callback === callback) {
          return;
        }
      }

      this._eventListeners[type].push({
        callback: callback,
        options: options
      });
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, callback, options) {
      if (callback === undefined || callback === null) {
        callback = null;
      } else if (_typeof(callback) !== "object" && typeof callback !== "function") {
        throw new TypeError("Only undefined, null, an object, or a function are allowed for the callback parameter");
      }

      options = normalizeEventHandlerOptions(options, ["capture"]);

      if (callback === null) {
        // Optimization, not in the spec.
        return;
      }

      if (!this._eventListeners[type]) {
        return;
      }

      for (var i = 0; i < this._eventListeners[type].length; ++i) {
        var listener = this._eventListeners[type][i];

        if (listener.callback === callback && listener.options.capture === options.capture) {
          this._eventListeners[type].splice(i, 1);

          break;
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(eventImpl) {
      if (eventImpl._dispatchFlag || !eventImpl._initializedFlag) {
        throw new DOMException("Tried to dispatch an uninitialized event", "InvalidStateError");
      }

      if (eventImpl.eventPhase !== Event.NONE) {
        throw new DOMException("Tried to dispatch a dispatching event", "InvalidStateError");
      }

      eventImpl.isTrusted = false;
      return this._dispatch(eventImpl);
    } // https://dom.spec.whatwg.org/#get-the-parent

  }, {
    key: "_getTheParent",
    value: function _getTheParent() {
      return null;
    } // https://dom.spec.whatwg.org/#concept-event-dispatch
    // legacyOutputDidListenersThrowFlag optional parameter is not necessary here since it is only used by indexDB.

  }, {
    key: "_dispatch",
    value: function _dispatch(eventImpl, targetOverride
    /* , legacyOutputDidListenersThrowFlag */
    ) {
      var targetImpl = this;
      var clearTargets = false;
      var activationTarget = null;
      eventImpl._dispatchFlag = true;
      targetOverride = targetOverride || targetImpl;
      var relatedTarget = retarget(eventImpl.relatedTarget, targetImpl);

      if (targetImpl !== relatedTarget || targetImpl === eventImpl.relatedTarget) {
        var touchTargets = [];
        appendToEventPath(eventImpl, targetImpl, targetOverride, relatedTarget, touchTargets, false);
        var isActivationEvent = MouseEvent.isImpl(eventImpl) && eventImpl.type === "click";

        if (isActivationEvent && targetImpl._hasActivationBehavior) {
          activationTarget = targetImpl;
        }

        var slotInClosedTree = false;
        var slotable = isSlotable(targetImpl) && targetImpl._assignedSlot ? targetImpl : null;
        var parent = getEventTargetParent(targetImpl, eventImpl); // Populate event path
        // https://dom.spec.whatwg.org/#event-path

        while (parent !== null) {
          if (slotable !== null) {
            if (parent.localName !== "slot") {
              throw new Error("JSDOM Internal Error: Expected parent to be a Slot");
            }

            slotable = null;
            var parentRoot = getRoot(parent);

            if (isShadowRoot(parentRoot) && parentRoot.mode === "closed") {
              slotInClosedTree = true;
            }
          }

          if (isSlotable(parent) && parent._assignedSlot) {
            slotable = parent;
          }

          relatedTarget = retarget(eventImpl.relatedTarget, parent);

          if (isNode(parent) && isShadowInclusiveAncestor(getRoot(targetImpl), parent) || idlUtils.wrapperForImpl(parent).constructor.name === "Window") {
            if (isActivationEvent && eventImpl.bubbles && activationTarget === null && parent._hasActivationBehavior) {
              activationTarget = parent;
            }

            appendToEventPath(eventImpl, parent, null, relatedTarget, touchTargets, slotInClosedTree);
          } else if (parent === relatedTarget) {
            parent = null;
          } else {
            targetImpl = parent;

            if (isActivationEvent && activationTarget === null && targetImpl._hasActivationBehavior) {
              activationTarget = targetImpl;
            }

            appendToEventPath(eventImpl, parent, targetImpl, relatedTarget, touchTargets, slotInClosedTree);
          }

          if (parent !== null) {
            parent = getEventTargetParent(parent, eventImpl);
          }

          slotInClosedTree = false;
        }

        var clearTargetsTupleIndex = -1;

        for (var i = eventImpl._path.length - 1; i >= 0 && clearTargetsTupleIndex === -1; i--) {
          if (eventImpl._path[i].target !== null) {
            clearTargetsTupleIndex = i;
          }
        }

        var clearTargetsTuple = eventImpl._path[clearTargetsTupleIndex];
        clearTargets = isNode(clearTargetsTuple.target) && isShadowRoot(getRoot(clearTargetsTuple.target)) || isNode(clearTargetsTuple.relatedTarget) && isShadowRoot(getRoot(clearTargetsTuple.relatedTarget));
        eventImpl.eventPhase = Event.CAPTURING_PHASE;

        if (activationTarget !== null && activationTarget._legacyPreActivationBehavior) {
          activationTarget._legacyPreActivationBehavior();
        }

        for (var _i = eventImpl._path.length - 1; _i >= 0; --_i) {
          var tuple = eventImpl._path[_i];

          if (tuple.target === null) {
            invokeEventListeners(tuple, eventImpl);
          }
        }

        for (var _i2 = 0; _i2 < eventImpl._path.length; _i2++) {
          var _tuple = eventImpl._path[_i2];

          if (_tuple.target !== null) {
            eventImpl.eventPhase = Event.AT_TARGET;
          } else {
            eventImpl.eventPhase = Event.BUBBLING_PHASE;
          }

          if (eventImpl.eventPhase === Event.BUBBLING_PHASE && eventImpl.bubbles || eventImpl.eventPhase === Event.AT_TARGET) {
            invokeEventListeners(_tuple, eventImpl);
          }
        }
      }

      eventImpl.eventPhase = Event.NONE;
      eventImpl.currentTarget = null;
      eventImpl._path = [];
      eventImpl._dispatchFlag = false;
      eventImpl._stopPropagationFlag = false;
      eventImpl._stopImmediatePropagationFlag = false;

      if (clearTargets) {
        eventImpl.target = null;
        eventImpl.relatedTarget = null;
      }

      if (activationTarget !== null) {
        if (!eventImpl._canceledFlag) {
          activationTarget._activationBehavior();
        } else if (activationTarget._legacyCanceledActivationBehavior) {
          activationTarget._legacyCanceledActivationBehavior();
        }
      }

      return !eventImpl._canceledFlag;
    }
  }]);

  return EventTargetImpl;
}();

module.exports = {
  implementation: EventTargetImpl
}; // https://dom.spec.whatwg.org/#concept-event-listener-invoke

function invokeEventListeners(tuple, eventImpl) {
  var tupleIndex = eventImpl._path.indexOf(tuple);

  for (var i = tupleIndex; i >= 0; i--) {
    var t = eventImpl._path[i];

    if (t.target) {
      eventImpl.target = t.target;
      break;
    }
  }

  eventImpl.relatedTarget = idlUtils.wrapperForImpl(tuple.relatedTarget);

  if (eventImpl._stopPropagationFlag) {
    return;
  }

  eventImpl.currentTarget = idlUtils.wrapperForImpl(tuple.item);
  var listeners = tuple.item._eventListeners;
  innerInvokeEventListeners(eventImpl, listeners);
} // https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke


function innerInvokeEventListeners(eventImpl, listeners) {
  var found = false;
  var type = eventImpl.type,
      target = eventImpl.target;
  var wrapper = idlUtils.wrapperForImpl(target);

  if (!listeners || !listeners[type]) {
    return found;
  } // Copy event listeners before iterating since the list can be modified during the iteration.


  var handlers = listeners[type].slice();

  for (var i = 0; i < handlers.length; i++) {
    var listener = handlers[i];
    var _listener$options = listener.options,
        capture = _listener$options.capture,
        once = _listener$options.once,
        passive = _listener$options.passive; // Check if the event listener has been removed since the listeners has been cloned.

    if (!listeners[type].includes(listener)) {
      continue;
    }

    found = true;

    if (eventImpl.eventPhase === Event.CAPTURING_PHASE && !capture || eventImpl.eventPhase === Event.BUBBLING_PHASE && capture) {
      continue;
    }

    if (once) {
      listeners[type].splice(listeners[type].indexOf(listener), 1);
    }

    if (passive) {
      eventImpl._inPassiveListenerFlag = true;
    }

    try {
      if (_typeof(listener.callback) === "object") {
        if (typeof listener.callback.handleEvent === "function") {
          listener.callback.handleEvent(idlUtils.wrapperForImpl(eventImpl));
        }
      } else {
        listener.callback.call(eventImpl.currentTarget, idlUtils.wrapperForImpl(eventImpl));
      }
    } catch (e) {
      var window = null;

      if (wrapper && wrapper._document) {
        // Triggered by Window
        window = wrapper;
      } else if (target._ownerDocument) {
        // Triggered by most webidl2js'ed instances
        window = target._ownerDocument._defaultView;
      } else if (wrapper._ownerDocument) {
        // Currently triggered by XHR and some other non-webidl2js things
        window = wrapper._ownerDocument._defaultView;
      }

      if (window) {
        reportException(window, e);
      } // Errors in window-less documents just get swallowed... can you think of anything better?

    }

    eventImpl._inPassiveListenerFlag = false;

    if (eventImpl._stopImmediatePropagationFlag) {
      return found;
    }
  }

  return found;
}
/**
 * Normalize the event listeners options argument in order to get always a valid options object
 * @param   {Object} options         - user defined options
 * @param   {Array} defaultBoolKeys  - boolean properties that should belong to the options object
 * @returns {Object} object containing at least the "defaultBoolKeys"
 */


function normalizeEventHandlerOptions(options, defaultBoolKeys) {
  var returnValue = {}; // no need to go further here

  if (typeof options === "boolean" || options === null || typeof options === "undefined") {
    returnValue.capture = Boolean(options);
    return returnValue;
  } // non objects options so we typecast its value as "capture" value


  if (_typeof(options) !== "object") {
    returnValue.capture = Boolean(options); // at this point we don't need to loop the "capture" key anymore

    defaultBoolKeys = defaultBoolKeys.filter(function (k) {
      return k !== "capture";
    });
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = defaultBoolKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;
      returnValue[key] = Boolean(options[key]);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return returnValue;
} // https://dom.spec.whatwg.org/#concept-event-path-append


function appendToEventPath(eventImpl, target, targetOverride, relatedTarget, touchTargets, slotInClosedTree) {
  var itemInShadowTree = isNode(target) && isShadowRoot(getRoot(target));
  var rootOfClosedTree = isShadowRoot(target) && target.mode === "closed";

  eventImpl._path.push({
    item: target,
    itemInShadowTree: itemInShadowTree,
    target: targetOverride,
    relatedTarget: relatedTarget,
    touchTargets: touchTargets,
    rootOfClosedTree: rootOfClosedTree,
    slotInClosedTree: slotInClosedTree
  });
}