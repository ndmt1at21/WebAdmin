"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var impl = utils.implSymbol;

var NavigatorID = require("./NavigatorID.js");

var NavigatorLanguage = require("./NavigatorLanguage.js");

var NavigatorOnLine = require("./NavigatorOnLine.js");

var NavigatorCookies = require("./NavigatorCookies.js");

var NavigatorPlugins = require("./NavigatorPlugins.js");

var NavigatorConcurrentHardware = require("./NavigatorConcurrentHardware.js");

var Navigator =
/*#__PURE__*/
function () {
  function Navigator() {
    _classCallCheck(this, Navigator);

    throw new TypeError("Illegal constructor");
  }

  _createClass(Navigator, [{
    key: "javaEnabled",
    value: function javaEnabled() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].javaEnabled();
    }
  }, {
    key: "appCodeName",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["appCodeName"];
    }
  }, {
    key: "appName",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["appName"];
    }
  }, {
    key: "appVersion",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["appVersion"];
    }
  }, {
    key: "platform",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["platform"];
    }
  }, {
    key: "product",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["product"];
    }
  }, {
    key: "productSub",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["productSub"];
    }
  }, {
    key: "userAgent",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["userAgent"];
    }
  }, {
    key: "vendor",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["vendor"];
    }
  }, {
    key: "vendorSub",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["vendorSub"];
    }
  }, {
    key: "language",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["language"];
    }
  }, {
    key: "languages",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["languages"]);
    }
  }, {
    key: "onLine",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["onLine"];
    }
  }, {
    key: "cookieEnabled",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["cookieEnabled"];
    }
  }, {
    key: "plugins",
    get: function get() {
      var _this = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "plugins", function () {
        return utils.tryWrapperForImpl(_this[impl]["plugins"]);
      });
    }
  }, {
    key: "mimeTypes",
    get: function get() {
      var _this2 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "mimeTypes", function () {
        return utils.tryWrapperForImpl(_this2[impl]["mimeTypes"]);
      });
    }
  }, {
    key: "hardwareConcurrency",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["hardwareConcurrency"];
    }
  }]);

  return Navigator;
}();

Object.defineProperties(Navigator.prototype, _defineProperty({
  javaEnabled: {
    enumerable: true
  },
  appCodeName: {
    enumerable: true
  },
  appName: {
    enumerable: true
  },
  appVersion: {
    enumerable: true
  },
  platform: {
    enumerable: true
  },
  product: {
    enumerable: true
  },
  productSub: {
    enumerable: true
  },
  userAgent: {
    enumerable: true
  },
  vendor: {
    enumerable: true
  },
  vendorSub: {
    enumerable: true
  },
  language: {
    enumerable: true
  },
  languages: {
    enumerable: true
  },
  onLine: {
    enumerable: true
  },
  cookieEnabled: {
    enumerable: true
  },
  plugins: {
    enumerable: true
  },
  mimeTypes: {
    enumerable: true
  },
  hardwareConcurrency: {
    enumerable: true
  }
}, Symbol.toStringTag, {
  value: "Navigator",
  configurable: true
}));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'Navigator'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(Navigator.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(Navigator.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {},
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": Navigator,
  expose: {
    Window: {
      Navigator: Navigator
    }
  }
}; // iface

module.exports = iface;

NavigatorID._mixedIntoPredicates.push(module.exports.is);

NavigatorLanguage._mixedIntoPredicates.push(module.exports.is);

NavigatorOnLine._mixedIntoPredicates.push(module.exports.is);

NavigatorCookies._mixedIntoPredicates.push(module.exports.is);

NavigatorPlugins._mixedIntoPredicates.push(module.exports.is);

NavigatorConcurrentHardware._mixedIntoPredicates.push(module.exports.is);

var Impl = require("../navigator/Navigator-impl.js");