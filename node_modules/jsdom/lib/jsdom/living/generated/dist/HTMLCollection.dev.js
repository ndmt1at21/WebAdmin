"use strict";

var _Object$definePropert;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var impl = utils.implSymbol;

var HTMLCollection =
/*#__PURE__*/
function () {
  function HTMLCollection() {
    _classCallCheck(this, HTMLCollection);

    throw new TypeError("Illegal constructor");
  }

  _createClass(HTMLCollection, [{
    key: "item",
    value: function item(index) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'item' on 'HTMLCollection': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["unsigned long"](curArg, {
          context: "Failed to execute 'item' on 'HTMLCollection': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl = this[impl]).item.apply(_this$impl, args));
    }
  }, {
    key: "namedItem",
    value: function namedItem(name) {
      var _this$impl2;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'namedItem' on 'HTMLCollection': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'namedItem' on 'HTMLCollection': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).namedItem.apply(_this$impl2, args));
    }
  }, {
    key: "length",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["length"];
    }
  }]);

  return HTMLCollection;
}();

Object.defineProperties(HTMLCollection.prototype, (_Object$definePropert = {
  item: {
    enumerable: true
  },
  namedItem: {
    enumerable: true
  },
  length: {
    enumerable: true
  }
}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
  value: "HTMLCollection",
  configurable: true
}), _defineProperty(_Object$definePropert, Symbol.iterator, {
  value: Array.prototype[Symbol.iterator],
  configurable: true,
  writable: true
}), _Object$definePropert));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'HTMLCollection'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(HTMLCollection.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(HTMLCollection.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {},
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj = new Proxy(obj, {
      get: function get(target, P, receiver) {
        if (_typeof(P) === "symbol") {
          return Reflect.get(target, P, receiver);
        }

        var desc = this.getOwnPropertyDescriptor(target, P);

        if (desc === undefined) {
          var parent = Object.getPrototypeOf(target);

          if (parent === null) {
            return undefined;
          }

          return Reflect.get(target, P, receiver);
        }

        if (!desc.get && !desc.set) {
          return desc.value;
        }

        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return Reflect.apply(getter, receiver, []);
      },
      has: function has(target, P) {
        if (_typeof(P) === "symbol") {
          return Reflect.has(target, P);
        }

        var desc = this.getOwnPropertyDescriptor(target, P);

        if (desc !== undefined) {
          return true;
        }

        var parent = Object.getPrototypeOf(target);

        if (parent !== null) {
          return Reflect.has(parent, P);
        }

        return false;
      },
      ownKeys: function ownKeys(target) {
        var keys = new Set();
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = target[impl][utils.supportedPropertyIndices][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var key = _step3.value;
            keys.add("".concat(key));
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = target[impl][utils.supportedPropertyNames][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _key = _step4.value;

            if (!(_key in target)) {
              keys.add("".concat(_key));
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = Reflect.ownKeys(target)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _key2 = _step5.value;
            keys.add(_key2);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        return _toConsumableArray(keys);
      },
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, P) {
        if (_typeof(P) === "symbol") {
          return Reflect.getOwnPropertyDescriptor(target, P);
        }

        var ignoreNamedProps = false;

        if (utils.isArrayIndexPropName(P)) {
          var index = P >>> 0;
          var indexedValue = target[impl].item(index);

          if (indexedValue !== null) {
            return {
              writable: false,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }

          ignoreNamedProps = true;
        }

        var namedValue = target[impl].namedItem(P);

        if (namedValue !== null && !(P in target) && !ignoreNamedProps) {
          return {
            writable: false,
            enumerable: false,
            configurable: true,
            value: utils.tryWrapperForImpl(namedValue)
          };
        }

        return Reflect.getOwnPropertyDescriptor(target, P);
      },
      set: function set(target, P, V, receiver) {
        if (_typeof(P) === "symbol") {
          return Reflect.set(target, P, V, receiver);
        }

        if (target === receiver) {
          utils.isArrayIndexPropName(P);
          typeof P === "string" && !utils.isArrayIndexPropName(P);
        }

        var ownDesc;

        if (utils.isArrayIndexPropName(P)) {
          var index = P >>> 0;
          var indexedValue = target[impl].item(index);

          if (indexedValue !== null) {
            ownDesc = {
              writable: false,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }
        }

        if (ownDesc === undefined) {
          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
        }

        if (ownDesc === undefined) {
          var parent = Reflect.getPrototypeOf(target);

          if (parent !== null) {
            return Reflect.set(parent, P, V, receiver);
          }

          ownDesc = {
            writable: true,
            enumerable: true,
            configurable: true,
            value: undefined
          };
        }

        if (!ownDesc.writable) {
          return false;
        }

        if (!utils.isObject(receiver)) {
          return false;
        }

        var existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
        var valueDesc;

        if (existingDesc !== undefined) {
          if (existingDesc.get || existingDesc.set) {
            return false;
          }

          if (!existingDesc.writable) {
            return false;
          }

          valueDesc = {
            value: V
          };
        } else {
          valueDesc = {
            writable: true,
            enumerable: true,
            configurable: true,
            value: V
          };
        }

        return Reflect.defineProperty(receiver, P, valueDesc);
      },
      defineProperty: function defineProperty(target, P, desc) {
        if (_typeof(P) === "symbol") {
          return Reflect.defineProperty(target, P, desc);
        }

        if (utils.isArrayIndexPropName(P)) {
          return false;
        }

        if (!utils.hasOwn(target, P)) {
          var creating = !(target[impl].namedItem(P) !== null);

          if (!creating) {
            return false;
          }
        }

        return Reflect.defineProperty(target, P, desc);
      },
      deleteProperty: function deleteProperty(target, P) {
        if (_typeof(P) === "symbol") {
          return Reflect.deleteProperty(target, P);
        }

        if (utils.isArrayIndexPropName(P)) {
          var index = P >>> 0;
          return !(target[impl].item(index) !== null);
        }

        if (target[impl].namedItem(P) !== null && !(P in target)) {
          return false;
        }

        return Reflect.deleteProperty(target, P);
      },
      preventExtensions: function preventExtensions() {
        return false;
      }
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": HTMLCollection,
  expose: {
    Window: {
      HTMLCollection: HTMLCollection
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../nodes/HTMLCollection-impl.js");