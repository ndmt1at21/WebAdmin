"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var impl = utils.implSymbol;

var HTMLElement = require("./HTMLElement.js");

var HTMLButtonElement =
/*#__PURE__*/
function (_HTMLElement$interfac) {
  _inherits(HTMLButtonElement, _HTMLElement$interfac);

  function HTMLButtonElement() {
    var _this;

    _classCallCheck(this, HTMLButtonElement);

    throw new TypeError("Illegal constructor");
    return _possibleConstructorReturn(_this);
  }

  _createClass(HTMLButtonElement, [{
    key: "checkValidity",
    value: function checkValidity() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].checkValidity();
    }
  }, {
    key: "reportValidity",
    value: function reportValidity() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].reportValidity();
    }
  }, {
    key: "setCustomValidity",
    value: function setCustomValidity(error) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'setCustomValidity' on 'HTMLButtonElement': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'setCustomValidity' on 'HTMLButtonElement': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl = this[impl]).setCustomValidity.apply(_this$impl, args);
    }
  }, {
    key: "autofocus",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "autofocus");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'autofocus' property on 'HTMLButtonElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "autofocus", "");
      } else {
        this.removeAttributeNS(null, "autofocus");
      }
    }
  }, {
    key: "disabled",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "disabled");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'disabled' property on 'HTMLButtonElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "disabled", "");
      } else {
        this.removeAttributeNS(null, "disabled");
      }
    }
  }, {
    key: "form",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["form"]);
    }
  }, {
    key: "formNoValidate",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "formnovalidate");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'formNoValidate' property on 'HTMLButtonElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "formnovalidate", "");
      } else {
        this.removeAttributeNS(null, "formnovalidate");
      }
    }
  }, {
    key: "formTarget",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "formtarget");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'formTarget' property on 'HTMLButtonElement': The provided value"
      });
      this.setAttributeNS(null, "formtarget", V);
    }
  }, {
    key: "name",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "name");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'name' property on 'HTMLButtonElement': The provided value"
      });
      this.setAttributeNS(null, "name", V);
    }
  }, {
    key: "type",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["type"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'type' property on 'HTMLButtonElement': The provided value"
      });
      this[impl]["type"] = V;
    }
  }, {
    key: "value",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "value");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'value' property on 'HTMLButtonElement': The provided value"
      });
      this.setAttributeNS(null, "value", V);
    }
  }, {
    key: "willValidate",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["willValidate"];
    }
  }, {
    key: "validity",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["validity"]);
    }
  }, {
    key: "validationMessage",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["validationMessage"];
    }
  }, {
    key: "labels",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["labels"]);
    }
  }]);

  return HTMLButtonElement;
}(HTMLElement["interface"]);

Object.defineProperties(HTMLButtonElement.prototype, _defineProperty({
  checkValidity: {
    enumerable: true
  },
  reportValidity: {
    enumerable: true
  },
  setCustomValidity: {
    enumerable: true
  },
  autofocus: {
    enumerable: true
  },
  disabled: {
    enumerable: true
  },
  form: {
    enumerable: true
  },
  formNoValidate: {
    enumerable: true
  },
  formTarget: {
    enumerable: true
  },
  name: {
    enumerable: true
  },
  type: {
    enumerable: true
  },
  value: {
    enumerable: true
  },
  willValidate: {
    enumerable: true
  },
  validity: {
    enumerable: true
  },
  validationMessage: {
    enumerable: true
  },
  labels: {
    enumerable: true
  }
}, Symbol.toStringTag, {
  value: "HTMLButtonElement",
  configurable: true
}));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'HTMLButtonElement'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(HTMLButtonElement.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(HTMLButtonElement.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {
    HTMLElement._internalSetup(obj);
  },
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": HTMLButtonElement,
  expose: {
    Window: {
      HTMLButtonElement: HTMLButtonElement
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../nodes/HTMLButtonElement-impl.js");