"use strict";

var _Object$definePropert;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertEventInit = require("./EventInit.js").convert;

var impl = utils.implSymbol;

var Event =
/*#__PURE__*/
function () {
  function Event(type) {
    _classCallCheck(this, Event);

    if (arguments.length < 1) {
      throw new TypeError("Failed to construct 'Event': 1 argument required, but only " + arguments.length + " present.");
    }

    var args = [];
    {
      var curArg = arguments[0];
      curArg = conversions["DOMString"](curArg, {
        context: "Failed to construct 'Event': parameter 1"
      });
      args.push(curArg);
    }
    {
      var _curArg = arguments[1];
      _curArg = convertEventInit(_curArg, {
        context: "Failed to construct 'Event': parameter 2"
      });
      args.push(_curArg);
    }
    return iface.setup(Object.create((this instanceof Event ? this.constructor : void 0).prototype), args);
  }

  _createClass(Event, [{
    key: "composedPath",
    value: function composedPath() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl].composedPath());
    }
  }, {
    key: "stopPropagation",
    value: function stopPropagation() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].stopPropagation();
    }
  }, {
    key: "stopImmediatePropagation",
    value: function stopImmediatePropagation() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].stopImmediatePropagation();
    }
  }, {
    key: "preventDefault",
    value: function preventDefault() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].preventDefault();
    }
  }, {
    key: "initEvent",
    value: function initEvent(type) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'initEvent' on 'Event': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'initEvent' on 'Event': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg2 = arguments[1];

        if (_curArg2 !== undefined) {
          _curArg2 = conversions["boolean"](_curArg2, {
            context: "Failed to execute 'initEvent' on 'Event': parameter 2"
          });
        } else {
          _curArg2 = false;
        }

        args.push(_curArg2);
      }
      {
        var _curArg3 = arguments[2];

        if (_curArg3 !== undefined) {
          _curArg3 = conversions["boolean"](_curArg3, {
            context: "Failed to execute 'initEvent' on 'Event': parameter 3"
          });
        } else {
          _curArg3 = false;
        }

        args.push(_curArg3);
      }
      return (_this$impl = this[impl]).initEvent.apply(_this$impl, args);
    }
  }, {
    key: "type",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["type"];
    }
  }, {
    key: "target",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["target"]);
    }
  }, {
    key: "srcElement",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["srcElement"]);
    }
  }, {
    key: "currentTarget",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["currentTarget"]);
    }
  }, {
    key: "eventPhase",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["eventPhase"];
    }
  }, {
    key: "cancelBubble",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["cancelBubble"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'cancelBubble' property on 'Event': The provided value"
      });
      this[impl]["cancelBubble"] = V;
    }
  }, {
    key: "bubbles",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["bubbles"];
    }
  }, {
    key: "cancelable",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["cancelable"];
    }
  }, {
    key: "returnValue",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["returnValue"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'returnValue' property on 'Event': The provided value"
      });
      this[impl]["returnValue"] = V;
    }
  }, {
    key: "defaultPrevented",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["defaultPrevented"];
    }
  }, {
    key: "composed",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["composed"];
    }
  }, {
    key: "timeStamp",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["timeStamp"];
    }
  }]);

  return Event;
}();

Object.defineProperties(Event.prototype, (_Object$definePropert = {
  composedPath: {
    enumerable: true
  },
  stopPropagation: {
    enumerable: true
  },
  stopImmediatePropagation: {
    enumerable: true
  },
  preventDefault: {
    enumerable: true
  },
  initEvent: {
    enumerable: true
  },
  type: {
    enumerable: true
  },
  target: {
    enumerable: true
  },
  srcElement: {
    enumerable: true
  },
  currentTarget: {
    enumerable: true
  },
  eventPhase: {
    enumerable: true
  },
  cancelBubble: {
    enumerable: true
  },
  bubbles: {
    enumerable: true
  },
  cancelable: {
    enumerable: true
  },
  returnValue: {
    enumerable: true
  },
  defaultPrevented: {
    enumerable: true
  },
  composed: {
    enumerable: true
  },
  timeStamp: {
    enumerable: true
  }
}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
  value: "Event",
  configurable: true
}), _defineProperty(_Object$definePropert, "NONE", {
  value: 0,
  enumerable: true
}), _defineProperty(_Object$definePropert, "CAPTURING_PHASE", {
  value: 1,
  enumerable: true
}), _defineProperty(_Object$definePropert, "AT_TARGET", {
  value: 2,
  enumerable: true
}), _defineProperty(_Object$definePropert, "BUBBLING_PHASE", {
  value: 3,
  enumerable: true
}), _Object$definePropert));
Object.defineProperties(Event, {
  NONE: {
    value: 0,
    enumerable: true
  },
  CAPTURING_PHASE: {
    value: 1,
    enumerable: true
  },
  AT_TARGET: {
    value: 2,
    enumerable: true
  },
  BUBBLING_PHASE: {
    value: 3,
    enumerable: true
  }
});
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'Event'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(Event.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(Event.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {
    Object.defineProperties(obj, utils.getOwnPropertyDescriptors({
      get isTrusted() {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return obj[impl]["isTrusted"];
      }

    }));
    Object.defineProperties(obj, {
      isTrusted: {
        configurable: false
      }
    });
  },
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": Event,
  expose: {
    Window: {
      Event: Event
    },
    Worker: {
      Event: Event
    },
    AudioWorklet: {
      Event: Event
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../events/Event-impl.js");