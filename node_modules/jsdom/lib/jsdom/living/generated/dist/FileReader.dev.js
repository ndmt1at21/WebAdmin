"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertBlob = require("./Blob.js").convert;

var impl = utils.implSymbol;

var EventTarget = require("./EventTarget.js");

module.exports = {
  createInterface: function createInterface() {
    var _Object$definePropert;

    var defaultPrivateData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var FileReader =
    /*#__PURE__*/
    function (_EventTarget$interfac) {
      _inherits(FileReader, _EventTarget$interfac);

      function FileReader() {
        var _this;

        _classCallCheck(this, FileReader);

        return _possibleConstructorReturn(_this, iface.setup(Object.create((this instanceof FileReader ? this.constructor : void 0).prototype)));
      }

      _createClass(FileReader, [{
        key: "readAsArrayBuffer",
        value: function readAsArrayBuffer(blob) {
          var _this$impl;

          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          if (arguments.length < 1) {
            throw new TypeError("Failed to execute 'readAsArrayBuffer' on 'FileReader': 1 argument required, but only " + arguments.length + " present.");
          }

          var args = [];
          {
            var curArg = arguments[0];
            curArg = convertBlob(curArg, {
              context: "Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1"
            });
            args.push(curArg);
          }
          return (_this$impl = this[impl]).readAsArrayBuffer.apply(_this$impl, args);
        }
      }, {
        key: "readAsBinaryString",
        value: function readAsBinaryString(blob) {
          var _this$impl2;

          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          if (arguments.length < 1) {
            throw new TypeError("Failed to execute 'readAsBinaryString' on 'FileReader': 1 argument required, but only " + arguments.length + " present.");
          }

          var args = [];
          {
            var curArg = arguments[0];
            curArg = convertBlob(curArg, {
              context: "Failed to execute 'readAsBinaryString' on 'FileReader': parameter 1"
            });
            args.push(curArg);
          }
          return (_this$impl2 = this[impl]).readAsBinaryString.apply(_this$impl2, args);
        }
      }, {
        key: "readAsText",
        value: function readAsText(blob) {
          var _this$impl3;

          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          if (arguments.length < 1) {
            throw new TypeError("Failed to execute 'readAsText' on 'FileReader': 1 argument required, but only " + arguments.length + " present.");
          }

          var args = [];
          {
            var curArg = arguments[0];
            curArg = convertBlob(curArg, {
              context: "Failed to execute 'readAsText' on 'FileReader': parameter 1"
            });
            args.push(curArg);
          }
          {
            var _curArg = arguments[1];

            if (_curArg !== undefined) {
              _curArg = conversions["DOMString"](_curArg, {
                context: "Failed to execute 'readAsText' on 'FileReader': parameter 2"
              });
            }

            args.push(_curArg);
          }
          return (_this$impl3 = this[impl]).readAsText.apply(_this$impl3, args);
        }
      }, {
        key: "readAsDataURL",
        value: function readAsDataURL(blob) {
          var _this$impl4;

          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          if (arguments.length < 1) {
            throw new TypeError("Failed to execute 'readAsDataURL' on 'FileReader': 1 argument required, but only " + arguments.length + " present.");
          }

          var args = [];
          {
            var curArg = arguments[0];
            curArg = convertBlob(curArg, {
              context: "Failed to execute 'readAsDataURL' on 'FileReader': parameter 1"
            });
            args.push(curArg);
          }
          return (_this$impl4 = this[impl]).readAsDataURL.apply(_this$impl4, args);
        }
      }, {
        key: "abort",
        value: function abort() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return this[impl].abort();
        }
      }, {
        key: "readyState",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return this[impl]["readyState"];
        }
      }, {
        key: "result",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(this[impl]["result"]);
        }
      }, {
        key: "error",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(this[impl]["error"]);
        }
      }, {
        key: "onloadstart",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(this[impl]["onloadstart"]);
        },
        set: function set(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          V = utils.tryImplForWrapper(V);
          this[impl]["onloadstart"] = V;
        }
      }, {
        key: "onprogress",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(this[impl]["onprogress"]);
        },
        set: function set(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          V = utils.tryImplForWrapper(V);
          this[impl]["onprogress"] = V;
        }
      }, {
        key: "onload",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(this[impl]["onload"]);
        },
        set: function set(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          V = utils.tryImplForWrapper(V);
          this[impl]["onload"] = V;
        }
      }, {
        key: "onabort",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(this[impl]["onabort"]);
        },
        set: function set(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          V = utils.tryImplForWrapper(V);
          this[impl]["onabort"] = V;
        }
      }, {
        key: "onerror",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(this[impl]["onerror"]);
        },
        set: function set(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          V = utils.tryImplForWrapper(V);
          this[impl]["onerror"] = V;
        }
      }, {
        key: "onloadend",
        get: function get() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          return utils.tryWrapperForImpl(this[impl]["onloadend"]);
        },
        set: function set(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError("Illegal invocation");
          }

          V = utils.tryImplForWrapper(V);
          this[impl]["onloadend"] = V;
        }
      }]);

      return FileReader;
    }(EventTarget["interface"]);

    Object.defineProperties(FileReader.prototype, (_Object$definePropert = {
      readAsArrayBuffer: {
        enumerable: true
      },
      readAsBinaryString: {
        enumerable: true
      },
      readAsText: {
        enumerable: true
      },
      readAsDataURL: {
        enumerable: true
      },
      abort: {
        enumerable: true
      },
      readyState: {
        enumerable: true
      },
      result: {
        enumerable: true
      },
      error: {
        enumerable: true
      },
      onloadstart: {
        enumerable: true
      },
      onprogress: {
        enumerable: true
      },
      onload: {
        enumerable: true
      },
      onabort: {
        enumerable: true
      },
      onerror: {
        enumerable: true
      },
      onloadend: {
        enumerable: true
      }
    }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
      value: "FileReader",
      configurable: true
    }), _defineProperty(_Object$definePropert, "EMPTY", {
      value: 0,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "LOADING", {
      value: 1,
      enumerable: true
    }), _defineProperty(_Object$definePropert, "DONE", {
      value: 2,
      enumerable: true
    }), _Object$definePropert));
    Object.defineProperties(FileReader, {
      EMPTY: {
        value: 0,
        enumerable: true
      },
      LOADING: {
        value: 1,
        enumerable: true
      },
      DONE: {
        value: 2,
        enumerable: true
      }
    });
    var iface = {
      create: function create(constructorArgs, privateData) {
        var obj = Object.create(FileReader.prototype);
        obj = this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      createImpl: function createImpl(constructorArgs, privateData) {
        var obj = Object.create(FileReader.prototype);
        obj = this.setup(obj, constructorArgs, privateData);
        return utils.implForWrapper(obj);
      },
      _internalSetup: function _internalSetup(obj) {
        EventTarget._internalSetup(obj);
      },
      setup: function setup(obj, constructorArgs, privateData) {
        if (!privateData) privateData = {};

        for (var prop in defaultPrivateData) {
          if (!(prop in privateData)) {
            privateData[prop] = defaultPrivateData[prop];
          }
        }

        privateData.wrapper = obj;

        this._internalSetup(obj);

        Object.defineProperty(obj, impl, {
          value: new Impl.implementation(constructorArgs, privateData),
          configurable: true
        });
        obj[impl][utils.wrapperSymbol] = obj;

        if (Impl.init) {
          Impl.init(obj[impl], privateData);
        }

        return obj;
      },
      "interface": FileReader,
      expose: {
        Window: {
          FileReader: FileReader
        },
        Worker: {
          FileReader: FileReader
        }
      }
    }; // iface

    return iface;
  },
  // createInterface
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'FileReader'."));
  }
}; // module.exports

var Impl = require("../file-api/FileReader-impl.js");