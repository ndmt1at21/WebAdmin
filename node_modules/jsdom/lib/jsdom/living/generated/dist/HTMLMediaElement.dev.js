"use strict";

var _Object$definePropert;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertTextTrackKind = require("./TextTrackKind.js").convert;

var impl = utils.implSymbol;

var HTMLElement = require("./HTMLElement.js");

var HTMLMediaElement =
/*#__PURE__*/
function (_HTMLElement$interfac) {
  _inherits(HTMLMediaElement, _HTMLElement$interfac);

  function HTMLMediaElement() {
    var _this;

    _classCallCheck(this, HTMLMediaElement);

    throw new TypeError("Illegal constructor");
    return _possibleConstructorReturn(_this);
  }

  _createClass(HTMLMediaElement, [{
    key: "load",
    value: function load() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].load();
    }
  }, {
    key: "canPlayType",
    value: function canPlayType(type) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'canPlayType' on 'HTMLMediaElement': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'canPlayType' on 'HTMLMediaElement': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl = this[impl]).canPlayType.apply(_this$impl, args));
    }
  }, {
    key: "play",
    value: function play() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl].play());
    }
  }, {
    key: "pause",
    value: function pause() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].pause();
    }
  }, {
    key: "addTextTrack",
    value: function addTextTrack(kind) {
      var _this$impl2;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'addTextTrack' on 'HTMLMediaElement': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertTextTrackKind(curArg, {
          context: "Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg = arguments[1];

        if (_curArg !== undefined) {
          _curArg = conversions["DOMString"](_curArg, {
            context: "Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 2"
          });
        } else {
          _curArg = "";
        }

        args.push(_curArg);
      }
      {
        var _curArg2 = arguments[2];

        if (_curArg2 !== undefined) {
          _curArg2 = conversions["DOMString"](_curArg2, {
            context: "Failed to execute 'addTextTrack' on 'HTMLMediaElement': parameter 3"
          });
        } else {
          _curArg2 = "";
        }

        args.push(_curArg2);
      }
      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).addTextTrack.apply(_this$impl2, args));
    }
  }, {
    key: "src",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["src"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["USVString"](V, {
        context: "Failed to set the 'src' property on 'HTMLMediaElement': The provided value"
      });
      this[impl]["src"] = V;
    }
  }, {
    key: "currentSrc",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["currentSrc"];
    }
  }, {
    key: "crossOrigin",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "crossorigin");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (V === null || V === undefined) {
        V = null;
      } else {
        V = conversions["DOMString"](V, {
          context: "Failed to set the 'crossOrigin' property on 'HTMLMediaElement': The provided value"
        });
      }

      this.setAttributeNS(null, "crossorigin", V);
    }
  }, {
    key: "networkState",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["networkState"];
    }
  }, {
    key: "preload",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "preload");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'preload' property on 'HTMLMediaElement': The provided value"
      });
      this.setAttributeNS(null, "preload", V);
    }
  }, {
    key: "buffered",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["buffered"]);
    }
  }, {
    key: "readyState",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["readyState"];
    }
  }, {
    key: "seeking",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["seeking"];
    }
  }, {
    key: "currentTime",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["currentTime"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["double"](V, {
        context: "Failed to set the 'currentTime' property on 'HTMLMediaElement': The provided value"
      });
      this[impl]["currentTime"] = V;
    }
  }, {
    key: "duration",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["duration"];
    }
  }, {
    key: "paused",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["paused"];
    }
  }, {
    key: "defaultPlaybackRate",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["defaultPlaybackRate"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["double"](V, {
        context: "Failed to set the 'defaultPlaybackRate' property on 'HTMLMediaElement': The provided value"
      });
      this[impl]["defaultPlaybackRate"] = V;
    }
  }, {
    key: "playbackRate",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["playbackRate"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["double"](V, {
        context: "Failed to set the 'playbackRate' property on 'HTMLMediaElement': The provided value"
      });
      this[impl]["playbackRate"] = V;
    }
  }, {
    key: "played",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["played"]);
    }
  }, {
    key: "seekable",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["seekable"]);
    }
  }, {
    key: "ended",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["ended"];
    }
  }, {
    key: "autoplay",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "autoplay");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'autoplay' property on 'HTMLMediaElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "autoplay", "");
      } else {
        this.removeAttributeNS(null, "autoplay");
      }
    }
  }, {
    key: "loop",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "loop");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'loop' property on 'HTMLMediaElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "loop", "");
      } else {
        this.removeAttributeNS(null, "loop");
      }
    }
  }, {
    key: "controls",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "controls");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'controls' property on 'HTMLMediaElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "controls", "");
      } else {
        this.removeAttributeNS(null, "controls");
      }
    }
  }, {
    key: "volume",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["volume"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["double"](V, {
        context: "Failed to set the 'volume' property on 'HTMLMediaElement': The provided value"
      });
      this[impl]["volume"] = V;
    }
  }, {
    key: "muted",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["muted"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'muted' property on 'HTMLMediaElement': The provided value"
      });
      this[impl]["muted"] = V;
    }
  }, {
    key: "defaultMuted",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "muted");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'defaultMuted' property on 'HTMLMediaElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "muted", "");
      } else {
        this.removeAttributeNS(null, "muted");
      }
    }
  }, {
    key: "audioTracks",
    get: function get() {
      var _this2 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "audioTracks", function () {
        return utils.tryWrapperForImpl(_this2[impl]["audioTracks"]);
      });
    }
  }, {
    key: "videoTracks",
    get: function get() {
      var _this3 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "videoTracks", function () {
        return utils.tryWrapperForImpl(_this3[impl]["videoTracks"]);
      });
    }
  }, {
    key: "textTracks",
    get: function get() {
      var _this4 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "textTracks", function () {
        return utils.tryWrapperForImpl(_this4[impl]["textTracks"]);
      });
    }
  }]);

  return HTMLMediaElement;
}(HTMLElement["interface"]);

Object.defineProperties(HTMLMediaElement.prototype, (_Object$definePropert = {
  load: {
    enumerable: true
  },
  canPlayType: {
    enumerable: true
  },
  play: {
    enumerable: true
  },
  pause: {
    enumerable: true
  },
  addTextTrack: {
    enumerable: true
  },
  src: {
    enumerable: true
  },
  currentSrc: {
    enumerable: true
  },
  crossOrigin: {
    enumerable: true
  },
  networkState: {
    enumerable: true
  },
  preload: {
    enumerable: true
  },
  buffered: {
    enumerable: true
  },
  readyState: {
    enumerable: true
  },
  seeking: {
    enumerable: true
  },
  currentTime: {
    enumerable: true
  },
  duration: {
    enumerable: true
  },
  paused: {
    enumerable: true
  },
  defaultPlaybackRate: {
    enumerable: true
  },
  playbackRate: {
    enumerable: true
  },
  played: {
    enumerable: true
  },
  seekable: {
    enumerable: true
  },
  ended: {
    enumerable: true
  },
  autoplay: {
    enumerable: true
  },
  loop: {
    enumerable: true
  },
  controls: {
    enumerable: true
  },
  volume: {
    enumerable: true
  },
  muted: {
    enumerable: true
  },
  defaultMuted: {
    enumerable: true
  },
  audioTracks: {
    enumerable: true
  },
  videoTracks: {
    enumerable: true
  },
  textTracks: {
    enumerable: true
  }
}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
  value: "HTMLMediaElement",
  configurable: true
}), _defineProperty(_Object$definePropert, "NETWORK_EMPTY", {
  value: 0,
  enumerable: true
}), _defineProperty(_Object$definePropert, "NETWORK_IDLE", {
  value: 1,
  enumerable: true
}), _defineProperty(_Object$definePropert, "NETWORK_LOADING", {
  value: 2,
  enumerable: true
}), _defineProperty(_Object$definePropert, "NETWORK_NO_SOURCE", {
  value: 3,
  enumerable: true
}), _defineProperty(_Object$definePropert, "HAVE_NOTHING", {
  value: 0,
  enumerable: true
}), _defineProperty(_Object$definePropert, "HAVE_METADATA", {
  value: 1,
  enumerable: true
}), _defineProperty(_Object$definePropert, "HAVE_CURRENT_DATA", {
  value: 2,
  enumerable: true
}), _defineProperty(_Object$definePropert, "HAVE_FUTURE_DATA", {
  value: 3,
  enumerable: true
}), _defineProperty(_Object$definePropert, "HAVE_ENOUGH_DATA", {
  value: 4,
  enumerable: true
}), _Object$definePropert));
Object.defineProperties(HTMLMediaElement, {
  NETWORK_EMPTY: {
    value: 0,
    enumerable: true
  },
  NETWORK_IDLE: {
    value: 1,
    enumerable: true
  },
  NETWORK_LOADING: {
    value: 2,
    enumerable: true
  },
  NETWORK_NO_SOURCE: {
    value: 3,
    enumerable: true
  },
  HAVE_NOTHING: {
    value: 0,
    enumerable: true
  },
  HAVE_METADATA: {
    value: 1,
    enumerable: true
  },
  HAVE_CURRENT_DATA: {
    value: 2,
    enumerable: true
  },
  HAVE_FUTURE_DATA: {
    value: 3,
    enumerable: true
  },
  HAVE_ENOUGH_DATA: {
    value: 4,
    enumerable: true
  }
});
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'HTMLMediaElement'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(HTMLMediaElement.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(HTMLMediaElement.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {
    HTMLElement._internalSetup(obj);
  },
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": HTMLMediaElement,
  expose: {
    Window: {
      HTMLMediaElement: HTMLMediaElement
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../nodes/HTMLMediaElement-impl.js");