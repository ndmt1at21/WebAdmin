"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertMessageEventInit = require("./MessageEventInit.js").convert;

var impl = utils.implSymbol;

var Event = require("./Event.js");

var MessageEvent =
/*#__PURE__*/
function (_Event$interface) {
  _inherits(MessageEvent, _Event$interface);

  function MessageEvent(type) {
    var _this;

    _classCallCheck(this, MessageEvent);

    if (arguments.length < 1) {
      throw new TypeError("Failed to construct 'MessageEvent': 1 argument required, but only " + arguments.length + " present.");
    }

    var args = [];
    {
      var curArg = arguments[0];
      curArg = conversions["DOMString"](curArg, {
        context: "Failed to construct 'MessageEvent': parameter 1"
      });
      args.push(curArg);
    }
    {
      var _curArg = arguments[1];
      _curArg = convertMessageEventInit(_curArg, {
        context: "Failed to construct 'MessageEvent': parameter 2"
      });
      args.push(_curArg);
    }
    return _possibleConstructorReturn(_this, iface.setup(Object.create((this instanceof MessageEvent ? this.constructor : void 0).prototype), args));
  }

  _createClass(MessageEvent, [{
    key: "initMessageEvent",
    value: function initMessageEvent(type) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'initMessageEvent' on 'MessageEvent': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg2 = arguments[1];

        if (_curArg2 !== undefined) {
          _curArg2 = conversions["boolean"](_curArg2, {
            context: "Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 2"
          });
        } else {
          _curArg2 = false;
        }

        args.push(_curArg2);
      }
      {
        var _curArg3 = arguments[2];

        if (_curArg3 !== undefined) {
          _curArg3 = conversions["boolean"](_curArg3, {
            context: "Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 3"
          });
        } else {
          _curArg3 = false;
        }

        args.push(_curArg3);
      }
      {
        var _curArg4 = arguments[3];

        if (_curArg4 !== undefined) {
          _curArg4 = conversions["any"](_curArg4, {
            context: "Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 4"
          });
        } else {
          _curArg4 = null;
        }

        args.push(_curArg4);
      }
      {
        var _curArg5 = arguments[4];

        if (_curArg5 !== undefined) {
          _curArg5 = conversions["USVString"](_curArg5, {
            context: "Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 5"
          });
        } else {
          _curArg5 = "";
        }

        args.push(_curArg5);
      }
      {
        var _curArg6 = arguments[5];

        if (_curArg6 !== undefined) {
          _curArg6 = conversions["DOMString"](_curArg6, {
            context: "Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 6"
          });
        } else {
          _curArg6 = "";
        }

        args.push(_curArg6);
      }
      {
        var _curArg7 = arguments[6];

        if (_curArg7 !== undefined) {
          if (_curArg7 === null || _curArg7 === undefined) {
            _curArg7 = null;
          } else {
            _curArg7 = utils.tryImplForWrapper(_curArg7);
          }
        } else {
          _curArg7 = null;
        }

        args.push(_curArg7);
      }
      {
        var _curArg8 = arguments[7];

        if (_curArg8 !== undefined) {
          if (!utils.isObject(_curArg8)) {
            throw new TypeError("Failed to execute 'initMessageEvent' on 'MessageEvent': parameter 8" + " is not an iterable object.");
          } else {
            var V = [];
            var tmp = _curArg8;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = tmp[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var nextItem = _step.value;
                nextItem = utils.tryImplForWrapper(nextItem);
                V.push(nextItem);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            _curArg8 = V;
          }
        } else {
          _curArg8 = [];
        }

        args.push(_curArg8);
      }
      return (_this$impl = this[impl]).initMessageEvent.apply(_this$impl, args);
    }
  }, {
    key: "data",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["data"];
    }
  }, {
    key: "origin",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["origin"];
    }
  }, {
    key: "lastEventId",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["lastEventId"];
    }
  }, {
    key: "source",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["source"]);
    }
  }, {
    key: "ports",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ports"]);
    }
  }]);

  return MessageEvent;
}(Event["interface"]);

Object.defineProperties(MessageEvent.prototype, _defineProperty({
  initMessageEvent: {
    enumerable: true
  },
  data: {
    enumerable: true
  },
  origin: {
    enumerable: true
  },
  lastEventId: {
    enumerable: true
  },
  source: {
    enumerable: true
  },
  ports: {
    enumerable: true
  }
}, Symbol.toStringTag, {
  value: "MessageEvent",
  configurable: true
}));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var isMixedInto = _step3.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'MessageEvent'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(MessageEvent.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(MessageEvent.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {
    Event._internalSetup(obj);
  },
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": MessageEvent,
  expose: {
    Window: {
      MessageEvent: MessageEvent
    },
    Worker: {
      MessageEvent: MessageEvent
    },
    AudioWorklet: {
      MessageEvent: MessageEvent
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../events/MessageEvent-impl.js");