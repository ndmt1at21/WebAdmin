"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertDocumentType = require("./DocumentType.js").convert;

var impl = utils.implSymbol;

var DOMImplementation =
/*#__PURE__*/
function () {
  function DOMImplementation() {
    _classCallCheck(this, DOMImplementation);

    throw new TypeError("Illegal constructor");
  }

  _createClass(DOMImplementation, [{
    key: "createDocumentType",
    value: function createDocumentType(qualifiedName, publicId, systemId) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 3) {
        throw new TypeError("Failed to execute 'createDocumentType' on 'DOMImplementation': 3 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg = arguments[1];
        _curArg = conversions["DOMString"](_curArg, {
          context: "Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 2"
        });
        args.push(_curArg);
      }
      {
        var _curArg2 = arguments[2];
        _curArg2 = conversions["DOMString"](_curArg2, {
          context: "Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 3"
        });
        args.push(_curArg2);
      }
      return utils.tryWrapperForImpl((_this$impl = this[impl]).createDocumentType.apply(_this$impl, args));
    }
  }, {
    key: "createDocument",
    value: function createDocument(namespace, qualifiedName) {
      var _this$impl2;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'createDocument' on 'DOMImplementation': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createDocument' on 'DOMImplementation': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg3 = arguments[1];
        _curArg3 = conversions["DOMString"](_curArg3, {
          context: "Failed to execute 'createDocument' on 'DOMImplementation': parameter 2",
          treatNullAsEmptyString: true
        });
        args.push(_curArg3);
      }
      {
        var _curArg4 = arguments[2];

        if (_curArg4 !== undefined) {
          if (_curArg4 === null || _curArg4 === undefined) {
            _curArg4 = null;
          } else {
            _curArg4 = convertDocumentType(_curArg4, {
              context: "Failed to execute 'createDocument' on 'DOMImplementation': parameter 3"
            });
          }
        } else {
          _curArg4 = null;
        }

        args.push(_curArg4);
      }
      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).createDocument.apply(_this$impl2, args));
    }
  }, {
    key: "createHTMLDocument",
    value: function createHTMLDocument() {
      var _this$impl3;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg !== undefined) {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createHTMLDocument' on 'DOMImplementation': parameter 1"
          });
        }

        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl3 = this[impl]).createHTMLDocument.apply(_this$impl3, args));
    }
  }, {
    key: "hasFeature",
    value: function hasFeature() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].hasFeature();
    }
  }]);

  return DOMImplementation;
}();

Object.defineProperties(DOMImplementation.prototype, _defineProperty({
  createDocumentType: {
    enumerable: true
  },
  createDocument: {
    enumerable: true
  },
  createHTMLDocument: {
    enumerable: true
  },
  hasFeature: {
    enumerable: true
  }
}, Symbol.toStringTag, {
  value: "DOMImplementation",
  configurable: true
}));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'DOMImplementation'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(DOMImplementation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(DOMImplementation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {},
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": DOMImplementation,
  expose: {
    Window: {
      DOMImplementation: DOMImplementation
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../nodes/DOMImplementation-impl.js");