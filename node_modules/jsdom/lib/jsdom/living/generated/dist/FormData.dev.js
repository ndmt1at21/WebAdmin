"use strict";

var _Object$definePropert;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertHTMLFormElement = require("./HTMLFormElement.js").convert;

var isBlob = require("./Blob.js").is;

var convertBlob = require("./Blob.js").convert;

var impl = utils.implSymbol;
var IteratorPrototype = Object.create(utils.IteratorPrototype, _defineProperty({
  next: {
    value: function next() {
      var internal = this[utils.iterInternalSymbol];
      var target = internal.target,
          kind = internal.kind,
          index = internal.index;
      var values = Array.from(target[impl]);
      var len = values.length;

      if (index >= len) {
        return {
          value: undefined,
          done: true
        };
      }

      var pair = values[index];
      internal.index = index + 1;

      var _pair$map = pair.map(utils.tryWrapperForImpl),
          _pair$map2 = _slicedToArray(_pair$map, 2),
          key = _pair$map2[0],
          value = _pair$map2[1];

      var result;

      switch (kind) {
        case "key":
          result = key;
          break;

        case "value":
          result = value;
          break;

        case "key+value":
          result = [key, value];
          break;
      }

      return {
        value: result,
        done: false
      };
    },
    writable: true,
    enumerable: true,
    configurable: true
  }
}, Symbol.toStringTag, {
  value: "FormData Iterator",
  configurable: true
}));

var FormData =
/*#__PURE__*/
function () {
  function FormData() {
    _classCallCheck(this, FormData);

    var args = [];
    {
      var curArg = arguments[0];

      if (curArg !== undefined) {
        curArg = convertHTMLFormElement(curArg, {
          context: "Failed to construct 'FormData': parameter 1"
        });
      }

      args.push(curArg);
    }
    return iface.setup(Object.create((this instanceof FormData ? this.constructor : void 0).prototype), args);
  }

  _createClass(FormData, [{
    key: "append",
    value: function append(name, value) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'append' on 'FormData': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];

      switch (arguments.length) {
        case 2:
          {
            var curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'append' on 'FormData': parameter 1"
            });
            args.push(curArg);
          }
          {
            var _curArg = arguments[1];

            if (isBlob(_curArg)) {
              {
                var _curArg2 = arguments[1];
                _curArg2 = convertBlob(_curArg2, {
                  context: "Failed to execute 'append' on 'FormData': parameter 2"
                });
                args.push(_curArg2);
              }
            } else {
              {
                var _curArg3 = arguments[1];
                _curArg3 = conversions["USVString"](_curArg3, {
                  context: "Failed to execute 'append' on 'FormData': parameter 2"
                });
                args.push(_curArg3);
              }
            }
          }
          break;

        default:
          {
            var _curArg4 = arguments[0];
            _curArg4 = conversions["USVString"](_curArg4, {
              context: "Failed to execute 'append' on 'FormData': parameter 1"
            });
            args.push(_curArg4);
          }
          {
            var _curArg5 = arguments[1];
            _curArg5 = convertBlob(_curArg5, {
              context: "Failed to execute 'append' on 'FormData': parameter 2"
            });
            args.push(_curArg5);
          }
          {
            var _curArg6 = arguments[2];

            if (_curArg6 !== undefined) {
              _curArg6 = conversions["USVString"](_curArg6, {
                context: "Failed to execute 'append' on 'FormData': parameter 3"
              });
            }

            args.push(_curArg6);
          }
      }

      return (_this$impl = this[impl]).append.apply(_this$impl, args);
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      var _this$impl2;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'delete' on 'FormData': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["USVString"](curArg, {
          context: "Failed to execute 'delete' on 'FormData': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl2 = this[impl])["delete"].apply(_this$impl2, args);
    }
  }, {
    key: "get",
    value: function get(name) {
      var _this$impl3;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'get' on 'FormData': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["USVString"](curArg, {
          context: "Failed to execute 'get' on 'FormData': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl3 = this[impl]).get.apply(_this$impl3, args));
    }
  }, {
    key: "getAll",
    value: function getAll(name) {
      var _this$impl4;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getAll' on 'FormData': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["USVString"](curArg, {
          context: "Failed to execute 'getAll' on 'FormData': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl4 = this[impl]).getAll.apply(_this$impl4, args));
    }
  }, {
    key: "has",
    value: function has(name) {
      var _this$impl5;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'has' on 'FormData': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["USVString"](curArg, {
          context: "Failed to execute 'has' on 'FormData': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl5 = this[impl]).has.apply(_this$impl5, args);
    }
  }, {
    key: "set",
    value: function set(name, value) {
      var _this$impl6;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'set' on 'FormData': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];

      switch (arguments.length) {
        case 2:
          {
            var curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'set' on 'FormData': parameter 1"
            });
            args.push(curArg);
          }
          {
            var _curArg7 = arguments[1];

            if (isBlob(_curArg7)) {
              {
                var _curArg8 = arguments[1];
                _curArg8 = convertBlob(_curArg8, {
                  context: "Failed to execute 'set' on 'FormData': parameter 2"
                });
                args.push(_curArg8);
              }
            } else {
              {
                var _curArg9 = arguments[1];
                _curArg9 = conversions["USVString"](_curArg9, {
                  context: "Failed to execute 'set' on 'FormData': parameter 2"
                });
                args.push(_curArg9);
              }
            }
          }
          break;

        default:
          {
            var _curArg10 = arguments[0];
            _curArg10 = conversions["USVString"](_curArg10, {
              context: "Failed to execute 'set' on 'FormData': parameter 1"
            });
            args.push(_curArg10);
          }
          {
            var _curArg11 = arguments[1];
            _curArg11 = convertBlob(_curArg11, {
              context: "Failed to execute 'set' on 'FormData': parameter 2"
            });
            args.push(_curArg11);
          }
          {
            var _curArg12 = arguments[2];

            if (_curArg12 !== undefined) {
              _curArg12 = conversions["USVString"](_curArg12, {
                context: "Failed to execute 'set' on 'FormData': parameter 3"
              });
            }

            args.push(_curArg12);
          }
      }

      return (_this$impl6 = this[impl]).set.apply(_this$impl6, args);
    }
  }, {
    key: "keys",
    value: function keys() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return module.exports.createDefaultIterator(this, "key");
    }
  }, {
    key: "values",
    value: function values() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return module.exports.createDefaultIterator(this, "value");
    }
  }, {
    key: "entries",
    value: function entries() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return module.exports.createDefaultIterator(this, "key+value");
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'forEach' on 'iterable': 1 argument required, " + "but only 0 present.");
      }

      if (typeof callback !== "function") {
        throw new TypeError("Failed to execute 'forEach' on 'iterable': The callback provided " + "as parameter 1 is not a function.");
      }

      var thisArg = arguments[1];
      var pairs = Array.from(this[impl]);
      var i = 0;

      while (i < pairs.length) {
        var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),
            _pairs$i$map2 = _slicedToArray(_pairs$i$map, 2),
            key = _pairs$i$map2[0],
            value = _pairs$i$map2[1];

        callback.call(thisArg, value, key, this);
        pairs = Array.from(this[impl]);
        i++;
      }
    }
  }]);

  return FormData;
}();

Object.defineProperties(FormData.prototype, (_Object$definePropert = {
  append: {
    enumerable: true
  },
  "delete": {
    enumerable: true
  },
  get: {
    enumerable: true
  },
  getAll: {
    enumerable: true
  },
  has: {
    enumerable: true
  },
  set: {
    enumerable: true
  },
  keys: {
    enumerable: true
  },
  values: {
    enumerable: true
  },
  entries: {
    enumerable: true
  },
  forEach: {
    enumerable: true
  }
}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
  value: "FormData",
  configurable: true
}), _defineProperty(_Object$definePropert, Symbol.iterator, {
  value: FormData.prototype.entries,
  configurable: true,
  writable: true
}), _Object$definePropert));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'FormData'."));
  },
  createDefaultIterator: function createDefaultIterator(target, kind) {
    var iterator = Object.create(IteratorPrototype);
    Object.defineProperty(iterator, utils.iterInternalSymbol, {
      value: {
        target: target,
        kind: kind,
        index: 0
      },
      configurable: true
    });
    return iterator;
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(FormData.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(FormData.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {},
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": FormData,
  expose: {
    Window: {
      FormData: FormData
    },
    Worker: {
      FormData: FormData
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../xhr/FormData-impl.js");