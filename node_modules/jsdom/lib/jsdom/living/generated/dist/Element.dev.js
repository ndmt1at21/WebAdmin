"use strict";

var _Object$definePropert;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertAttr = require("./Attr.js").convert;

var convertShadowRootInit = require("./ShadowRootInit.js").convert;

var isNode = require("./Node.js").is;

var impl = utils.implSymbol;

var Node = require("./Node.js");

var ChildNode = require("./ChildNode.js");

var Slotable = require("./Slotable.js");

var NonDocumentTypeChildNode = require("./NonDocumentTypeChildNode.js");

var ParentNode = require("./ParentNode.js");

var Element =
/*#__PURE__*/
function (_Node$interface) {
  _inherits(Element, _Node$interface);

  function Element() {
    var _this;

    _classCallCheck(this, Element);

    throw new TypeError("Illegal constructor");
    return _possibleConstructorReturn(_this);
  }

  _createClass(Element, [{
    key: "hasAttributes",
    value: function hasAttributes() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].hasAttributes();
    }
  }, {
    key: "getAttributeNames",
    value: function getAttributeNames() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl].getAttributeNames());
    }
  }, {
    key: "getAttribute",
    value: function getAttribute(qualifiedName) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getAttribute' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getAttribute' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl = this[impl]).getAttribute.apply(_this$impl, args);
    }
  }, {
    key: "getAttributeNS",
    value: function getAttributeNS(namespace, localName) {
      var _this$impl2;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'getAttributeNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getAttributeNS' on 'Element': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg = arguments[1];
        _curArg = conversions["DOMString"](_curArg, {
          context: "Failed to execute 'getAttributeNS' on 'Element': parameter 2"
        });
        args.push(_curArg);
      }
      return (_this$impl2 = this[impl]).getAttributeNS.apply(_this$impl2, args);
    }
  }, {
    key: "setAttribute",
    value: function setAttribute(qualifiedName, value) {
      var _this$impl3;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'setAttribute' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'setAttribute' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg2 = arguments[1];
        _curArg2 = conversions["DOMString"](_curArg2, {
          context: "Failed to execute 'setAttribute' on 'Element': parameter 2"
        });
        args.push(_curArg2);
      }
      return (_this$impl3 = this[impl]).setAttribute.apply(_this$impl3, args);
    }
  }, {
    key: "setAttributeNS",
    value: function setAttributeNS(namespace, qualifiedName, value) {
      var _this$impl4;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 3) {
        throw new TypeError("Failed to execute 'setAttributeNS' on 'Element': 3 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'setAttributeNS' on 'Element': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg3 = arguments[1];
        _curArg3 = conversions["DOMString"](_curArg3, {
          context: "Failed to execute 'setAttributeNS' on 'Element': parameter 2"
        });
        args.push(_curArg3);
      }
      {
        var _curArg4 = arguments[2];
        _curArg4 = conversions["DOMString"](_curArg4, {
          context: "Failed to execute 'setAttributeNS' on 'Element': parameter 3"
        });
        args.push(_curArg4);
      }
      return (_this$impl4 = this[impl]).setAttributeNS.apply(_this$impl4, args);
    }
  }, {
    key: "removeAttribute",
    value: function removeAttribute(qualifiedName) {
      var _this$impl5;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'removeAttribute' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'removeAttribute' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl5 = this[impl]).removeAttribute.apply(_this$impl5, args);
    }
  }, {
    key: "removeAttributeNS",
    value: function removeAttributeNS(namespace, localName) {
      var _this$impl6;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'removeAttributeNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'removeAttributeNS' on 'Element': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg5 = arguments[1];
        _curArg5 = conversions["DOMString"](_curArg5, {
          context: "Failed to execute 'removeAttributeNS' on 'Element': parameter 2"
        });
        args.push(_curArg5);
      }
      return (_this$impl6 = this[impl]).removeAttributeNS.apply(_this$impl6, args);
    }
  }, {
    key: "toggleAttribute",
    value: function toggleAttribute(qualifiedName) {
      var _this$impl7;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'toggleAttribute' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'toggleAttribute' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg6 = arguments[1];

        if (_curArg6 !== undefined) {
          _curArg6 = conversions["boolean"](_curArg6, {
            context: "Failed to execute 'toggleAttribute' on 'Element': parameter 2"
          });
        }

        args.push(_curArg6);
      }
      return (_this$impl7 = this[impl]).toggleAttribute.apply(_this$impl7, args);
    }
  }, {
    key: "hasAttribute",
    value: function hasAttribute(qualifiedName) {
      var _this$impl8;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'hasAttribute' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'hasAttribute' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl8 = this[impl]).hasAttribute.apply(_this$impl8, args);
    }
  }, {
    key: "hasAttributeNS",
    value: function hasAttributeNS(namespace, localName) {
      var _this$impl9;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'hasAttributeNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'hasAttributeNS' on 'Element': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg7 = arguments[1];
        _curArg7 = conversions["DOMString"](_curArg7, {
          context: "Failed to execute 'hasAttributeNS' on 'Element': parameter 2"
        });
        args.push(_curArg7);
      }
      return (_this$impl9 = this[impl]).hasAttributeNS.apply(_this$impl9, args);
    }
  }, {
    key: "getAttributeNode",
    value: function getAttributeNode(qualifiedName) {
      var _this$impl10;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getAttributeNode' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getAttributeNode' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl10 = this[impl]).getAttributeNode.apply(_this$impl10, args));
    }
  }, {
    key: "getAttributeNodeNS",
    value: function getAttributeNodeNS(namespace, localName) {
      var _this$impl11;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'getAttributeNodeNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getAttributeNodeNS' on 'Element': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg8 = arguments[1];
        _curArg8 = conversions["DOMString"](_curArg8, {
          context: "Failed to execute 'getAttributeNodeNS' on 'Element': parameter 2"
        });
        args.push(_curArg8);
      }
      return utils.tryWrapperForImpl((_this$impl11 = this[impl]).getAttributeNodeNS.apply(_this$impl11, args));
    }
  }, {
    key: "setAttributeNode",
    value: function setAttributeNode(attr) {
      var _this$impl12;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'setAttributeNode' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertAttr(curArg, {
          context: "Failed to execute 'setAttributeNode' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl12 = this[impl]).setAttributeNode.apply(_this$impl12, args));
    }
  }, {
    key: "setAttributeNodeNS",
    value: function setAttributeNodeNS(attr) {
      var _this$impl13;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'setAttributeNodeNS' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertAttr(curArg, {
          context: "Failed to execute 'setAttributeNodeNS' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl13 = this[impl]).setAttributeNodeNS.apply(_this$impl13, args));
    }
  }, {
    key: "removeAttributeNode",
    value: function removeAttributeNode(attr) {
      var _this$impl14;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'removeAttributeNode' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertAttr(curArg, {
          context: "Failed to execute 'removeAttributeNode' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl14 = this[impl]).removeAttributeNode.apply(_this$impl14, args));
    }
  }, {
    key: "attachShadow",
    value: function attachShadow(init) {
      var _this$impl15;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'attachShadow' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertShadowRootInit(curArg, {
          context: "Failed to execute 'attachShadow' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl15 = this[impl]).attachShadow.apply(_this$impl15, args));
    }
  }, {
    key: "closest",
    value: function closest(selectors) {
      var _this$impl16;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'closest' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'closest' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl16 = this[impl]).closest.apply(_this$impl16, args));
    }
  }, {
    key: "matches",
    value: function matches(selectors) {
      var _this$impl17;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'matches' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'matches' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl17 = this[impl]).matches.apply(_this$impl17, args);
    }
  }, {
    key: "webkitMatchesSelector",
    value: function webkitMatchesSelector(selectors) {
      var _this$impl18;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'webkitMatchesSelector' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'webkitMatchesSelector' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl18 = this[impl]).webkitMatchesSelector.apply(_this$impl18, args);
    }
  }, {
    key: "getElementsByTagName",
    value: function getElementsByTagName(qualifiedName) {
      var _this$impl19;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getElementsByTagName' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getElementsByTagName' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl19 = this[impl]).getElementsByTagName.apply(_this$impl19, args));
    }
  }, {
    key: "getElementsByTagNameNS",
    value: function getElementsByTagNameNS(namespace, localName) {
      var _this$impl20;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'getElementsByTagNameNS' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getElementsByTagNameNS' on 'Element': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg9 = arguments[1];
        _curArg9 = conversions["DOMString"](_curArg9, {
          context: "Failed to execute 'getElementsByTagNameNS' on 'Element': parameter 2"
        });
        args.push(_curArg9);
      }
      return utils.tryWrapperForImpl((_this$impl20 = this[impl]).getElementsByTagNameNS.apply(_this$impl20, args));
    }
  }, {
    key: "getElementsByClassName",
    value: function getElementsByClassName(classNames) {
      var _this$impl21;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getElementsByClassName' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getElementsByClassName' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl21 = this[impl]).getElementsByClassName.apply(_this$impl21, args));
    }
  }, {
    key: "insertAdjacentElement",
    value: function insertAdjacentElement(where, element) {
      var _this$impl22;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'insertAdjacentElement' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'insertAdjacentElement' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg10 = arguments[1];
        _curArg10 = module.exports.convert(_curArg10, {
          context: "Failed to execute 'insertAdjacentElement' on 'Element': parameter 2"
        });
        args.push(_curArg10);
      }
      return utils.tryWrapperForImpl((_this$impl22 = this[impl]).insertAdjacentElement.apply(_this$impl22, args));
    }
  }, {
    key: "insertAdjacentText",
    value: function insertAdjacentText(where, data) {
      var _this$impl23;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'insertAdjacentText' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'insertAdjacentText' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg11 = arguments[1];
        _curArg11 = conversions["DOMString"](_curArg11, {
          context: "Failed to execute 'insertAdjacentText' on 'Element': parameter 2"
        });
        args.push(_curArg11);
      }
      return (_this$impl23 = this[impl]).insertAdjacentText.apply(_this$impl23, args);
    }
  }, {
    key: "insertAdjacentHTML",
    value: function insertAdjacentHTML(position, text) {
      var _this$impl24;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'insertAdjacentHTML' on 'Element': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'insertAdjacentHTML' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg12 = arguments[1];
        _curArg12 = conversions["DOMString"](_curArg12, {
          context: "Failed to execute 'insertAdjacentHTML' on 'Element': parameter 2"
        });
        args.push(_curArg12);
      }
      return (_this$impl24 = this[impl]).insertAdjacentHTML.apply(_this$impl24, args);
    }
  }, {
    key: "getClientRects",
    value: function getClientRects() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl].getClientRects());
    }
  }, {
    key: "getBoundingClientRect",
    value: function getBoundingClientRect() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl].getBoundingClientRect());
    }
  }, {
    key: "before",
    value: function before() {
      var _this$impl25;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];

        if (isNode(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'before' on 'Element': parameter " + (i + 1)
          });
        }

        args.push(curArg);
      }

      return (_this$impl25 = this[impl]).before.apply(_this$impl25, args);
    }
  }, {
    key: "after",
    value: function after() {
      var _this$impl26;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];

        if (isNode(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'after' on 'Element': parameter " + (i + 1)
          });
        }

        args.push(curArg);
      }

      return (_this$impl26 = this[impl]).after.apply(_this$impl26, args);
    }
  }, {
    key: "replaceWith",
    value: function replaceWith() {
      var _this$impl27;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];

        if (isNode(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'replaceWith' on 'Element': parameter " + (i + 1)
          });
        }

        args.push(curArg);
      }

      return (_this$impl27 = this[impl]).replaceWith.apply(_this$impl27, args);
    }
  }, {
    key: "remove",
    value: function remove() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].remove();
    }
  }, {
    key: "prepend",
    value: function prepend() {
      var _this$impl28;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];

        if (isNode(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'prepend' on 'Element': parameter " + (i + 1)
          });
        }

        args.push(curArg);
      }

      return (_this$impl28 = this[impl]).prepend.apply(_this$impl28, args);
    }
  }, {
    key: "append",
    value: function append() {
      var _this$impl29;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];

        if (isNode(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'append' on 'Element': parameter " + (i + 1)
          });
        }

        args.push(curArg);
      }

      return (_this$impl29 = this[impl]).append.apply(_this$impl29, args);
    }
  }, {
    key: "querySelector",
    value: function querySelector(selectors) {
      var _this$impl30;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'querySelector' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'querySelector' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl30 = this[impl]).querySelector.apply(_this$impl30, args));
    }
  }, {
    key: "querySelectorAll",
    value: function querySelectorAll(selectors) {
      var _this$impl31;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'querySelectorAll' on 'Element': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'querySelectorAll' on 'Element': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl31 = this[impl]).querySelectorAll.apply(_this$impl31, args));
    }
  }, {
    key: "namespaceURI",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["namespaceURI"];
    }
  }, {
    key: "prefix",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["prefix"];
    }
  }, {
    key: "localName",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["localName"];
    }
  }, {
    key: "tagName",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["tagName"];
    }
  }, {
    key: "id",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "id");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'id' property on 'Element': The provided value"
      });
      this.setAttributeNS(null, "id", V);
    }
  }, {
    key: "className",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "class");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'className' property on 'Element': The provided value"
      });
      this.setAttributeNS(null, "class", V);
    }
  }, {
    key: "classList",
    get: function get() {
      var _this2 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "classList", function () {
        return utils.tryWrapperForImpl(_this2[impl]["classList"]);
      });
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      this.classList.value = V;
    }
  }, {
    key: "slot",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "slot");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'slot' property on 'Element': The provided value"
      });
      this.setAttributeNS(null, "slot", V);
    }
  }, {
    key: "attributes",
    get: function get() {
      var _this3 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "attributes", function () {
        return utils.tryWrapperForImpl(_this3[impl]["attributes"]);
      });
    }
  }, {
    key: "shadowRoot",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["shadowRoot"]);
    }
  }, {
    key: "innerHTML",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["innerHTML"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'innerHTML' property on 'Element': The provided value",
        treatNullAsEmptyString: true
      });
      this[impl]["innerHTML"] = V;
    }
  }, {
    key: "outerHTML",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["outerHTML"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'outerHTML' property on 'Element': The provided value",
        treatNullAsEmptyString: true
      });
      this[impl]["outerHTML"] = V;
    }
  }, {
    key: "scrollTop",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["scrollTop"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["unrestricted double"](V, {
        context: "Failed to set the 'scrollTop' property on 'Element': The provided value"
      });
      this[impl]["scrollTop"] = V;
    }
  }, {
    key: "scrollLeft",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["scrollLeft"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["unrestricted double"](V, {
        context: "Failed to set the 'scrollLeft' property on 'Element': The provided value"
      });
      this[impl]["scrollLeft"] = V;
    }
  }, {
    key: "scrollWidth",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["scrollWidth"];
    }
  }, {
    key: "scrollHeight",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["scrollHeight"];
    }
  }, {
    key: "clientTop",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["clientTop"];
    }
  }, {
    key: "clientLeft",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["clientLeft"];
    }
  }, {
    key: "clientWidth",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["clientWidth"];
    }
  }, {
    key: "clientHeight",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["clientHeight"];
    }
  }, {
    key: "assignedSlot",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["assignedSlot"]);
    }
  }, {
    key: "previousElementSibling",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["previousElementSibling"]);
    }
  }, {
    key: "nextElementSibling",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["nextElementSibling"]);
    }
  }, {
    key: "children",
    get: function get() {
      var _this4 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "children", function () {
        return utils.tryWrapperForImpl(_this4[impl]["children"]);
      });
    }
  }, {
    key: "firstElementChild",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["firstElementChild"]);
    }
  }, {
    key: "lastElementChild",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["lastElementChild"]);
    }
  }, {
    key: "childElementCount",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["childElementCount"];
    }
  }]);

  return Element;
}(Node["interface"]);

Object.defineProperties(Element.prototype, (_Object$definePropert = {
  hasAttributes: {
    enumerable: true
  },
  getAttributeNames: {
    enumerable: true
  },
  getAttribute: {
    enumerable: true
  },
  getAttributeNS: {
    enumerable: true
  },
  setAttribute: {
    enumerable: true
  },
  setAttributeNS: {
    enumerable: true
  },
  removeAttribute: {
    enumerable: true
  },
  removeAttributeNS: {
    enumerable: true
  },
  toggleAttribute: {
    enumerable: true
  },
  hasAttribute: {
    enumerable: true
  },
  hasAttributeNS: {
    enumerable: true
  },
  getAttributeNode: {
    enumerable: true
  },
  getAttributeNodeNS: {
    enumerable: true
  },
  setAttributeNode: {
    enumerable: true
  },
  setAttributeNodeNS: {
    enumerable: true
  },
  removeAttributeNode: {
    enumerable: true
  },
  attachShadow: {
    enumerable: true
  },
  closest: {
    enumerable: true
  },
  matches: {
    enumerable: true
  },
  webkitMatchesSelector: {
    enumerable: true
  },
  getElementsByTagName: {
    enumerable: true
  },
  getElementsByTagNameNS: {
    enumerable: true
  },
  getElementsByClassName: {
    enumerable: true
  },
  insertAdjacentElement: {
    enumerable: true
  },
  insertAdjacentText: {
    enumerable: true
  },
  insertAdjacentHTML: {
    enumerable: true
  },
  getClientRects: {
    enumerable: true
  },
  getBoundingClientRect: {
    enumerable: true
  },
  before: {
    enumerable: true
  },
  after: {
    enumerable: true
  },
  replaceWith: {
    enumerable: true
  },
  remove: {
    enumerable: true
  },
  prepend: {
    enumerable: true
  },
  append: {
    enumerable: true
  },
  querySelector: {
    enumerable: true
  },
  querySelectorAll: {
    enumerable: true
  },
  namespaceURI: {
    enumerable: true
  },
  prefix: {
    enumerable: true
  },
  localName: {
    enumerable: true
  },
  tagName: {
    enumerable: true
  },
  id: {
    enumerable: true
  },
  className: {
    enumerable: true
  },
  classList: {
    enumerable: true
  },
  slot: {
    enumerable: true
  },
  attributes: {
    enumerable: true
  },
  shadowRoot: {
    enumerable: true
  },
  innerHTML: {
    enumerable: true
  },
  outerHTML: {
    enumerable: true
  },
  scrollTop: {
    enumerable: true
  },
  scrollLeft: {
    enumerable: true
  },
  scrollWidth: {
    enumerable: true
  },
  scrollHeight: {
    enumerable: true
  },
  clientTop: {
    enumerable: true
  },
  clientLeft: {
    enumerable: true
  },
  clientWidth: {
    enumerable: true
  },
  clientHeight: {
    enumerable: true
  },
  assignedSlot: {
    enumerable: true
  },
  previousElementSibling: {
    enumerable: true
  },
  nextElementSibling: {
    enumerable: true
  },
  children: {
    enumerable: true
  },
  firstElementChild: {
    enumerable: true
  },
  lastElementChild: {
    enumerable: true
  },
  childElementCount: {
    enumerable: true
  }
}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
  value: "Element",
  configurable: true
}), _defineProperty(_Object$definePropert, Symbol.unscopables, {
  value: {
    slot: true,
    before: true,
    after: true,
    replaceWith: true,
    remove: true,
    prepend: true,
    append: true
  },
  configurable: true
}), _Object$definePropert));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'Element'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(Element.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(Element.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {
    Node._internalSetup(obj);
  },
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": Element,
  expose: {
    Window: {
      Element: Element
    }
  }
}; // iface

module.exports = iface;

ChildNode._mixedIntoPredicates.push(module.exports.is);

Slotable._mixedIntoPredicates.push(module.exports.is);

NonDocumentTypeChildNode._mixedIntoPredicates.push(module.exports.is);

ParentNode._mixedIntoPredicates.push(module.exports.is);

var Impl = require("../nodes/Element-impl.js");