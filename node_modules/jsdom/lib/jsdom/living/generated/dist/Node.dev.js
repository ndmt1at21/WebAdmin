"use strict";

var _Object$definePropert;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertGetRootNodeOptions = require("./GetRootNodeOptions.js").convert;

var impl = utils.implSymbol;

var EventTarget = require("./EventTarget.js");

var Node =
/*#__PURE__*/
function (_EventTarget$interfac) {
  _inherits(Node, _EventTarget$interfac);

  function Node() {
    var _this;

    _classCallCheck(this, Node);

    throw new TypeError("Illegal constructor");
    return _possibleConstructorReturn(_this);
  }

  _createClass(Node, [{
    key: "getRootNode",
    value: function getRootNode() {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertGetRootNodeOptions(curArg, {
          context: "Failed to execute 'getRootNode' on 'Node': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl = this[impl]).getRootNode.apply(_this$impl, args));
    }
  }, {
    key: "hasChildNodes",
    value: function hasChildNodes() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].hasChildNodes();
    }
  }, {
    key: "normalize",
    value: function normalize() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].normalize();
    }
  }, {
    key: "cloneNode",
    value: function cloneNode() {
      var _this$impl2;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg !== undefined) {
          curArg = conversions["boolean"](curArg, {
            context: "Failed to execute 'cloneNode' on 'Node': parameter 1"
          });
        } else {
          curArg = false;
        }

        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).cloneNode.apply(_this$impl2, args));
    }
  }, {
    key: "isEqualNode",
    value: function isEqualNode(otherNode) {
      var _this$impl3;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'isEqualNode' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = module.exports.convert(curArg, {
            context: "Failed to execute 'isEqualNode' on 'Node': parameter 1"
          });
        }

        args.push(curArg);
      }
      return (_this$impl3 = this[impl]).isEqualNode.apply(_this$impl3, args);
    }
  }, {
    key: "isSameNode",
    value: function isSameNode(otherNode) {
      var _this$impl4;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'isSameNode' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = module.exports.convert(curArg, {
            context: "Failed to execute 'isSameNode' on 'Node': parameter 1"
          });
        }

        args.push(curArg);
      }
      return (_this$impl4 = this[impl]).isSameNode.apply(_this$impl4, args);
    }
  }, {
    key: "compareDocumentPosition",
    value: function compareDocumentPosition(other) {
      var _this$impl5;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'compareDocumentPosition' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = module.exports.convert(curArg, {
          context: "Failed to execute 'compareDocumentPosition' on 'Node': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl5 = this[impl]).compareDocumentPosition.apply(_this$impl5, args);
    }
  }, {
    key: "contains",
    value: function contains(other) {
      var _this$impl6;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'contains' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = module.exports.convert(curArg, {
            context: "Failed to execute 'contains' on 'Node': parameter 1"
          });
        }

        args.push(curArg);
      }
      return (_this$impl6 = this[impl]).contains.apply(_this$impl6, args);
    }
  }, {
    key: "lookupPrefix",
    value: function lookupPrefix(namespace) {
      var _this$impl7;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'lookupPrefix' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'lookupPrefix' on 'Node': parameter 1"
          });
        }

        args.push(curArg);
      }
      return (_this$impl7 = this[impl]).lookupPrefix.apply(_this$impl7, args);
    }
  }, {
    key: "lookupNamespaceURI",
    value: function lookupNamespaceURI(prefix) {
      var _this$impl8;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'lookupNamespaceURI' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'lookupNamespaceURI' on 'Node': parameter 1"
          });
        }

        args.push(curArg);
      }
      return (_this$impl8 = this[impl]).lookupNamespaceURI.apply(_this$impl8, args);
    }
  }, {
    key: "isDefaultNamespace",
    value: function isDefaultNamespace(namespace) {
      var _this$impl9;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'isDefaultNamespace' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'isDefaultNamespace' on 'Node': parameter 1"
          });
        }

        args.push(curArg);
      }
      return (_this$impl9 = this[impl]).isDefaultNamespace.apply(_this$impl9, args);
    }
  }, {
    key: "insertBefore",
    value: function insertBefore(node, child) {
      var _this$impl10;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'insertBefore' on 'Node': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = module.exports.convert(curArg, {
          context: "Failed to execute 'insertBefore' on 'Node': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg = arguments[1];

        if (_curArg === null || _curArg === undefined) {
          _curArg = null;
        } else {
          _curArg = module.exports.convert(_curArg, {
            context: "Failed to execute 'insertBefore' on 'Node': parameter 2"
          });
        }

        args.push(_curArg);
      }
      return utils.tryWrapperForImpl((_this$impl10 = this[impl]).insertBefore.apply(_this$impl10, args));
    }
  }, {
    key: "appendChild",
    value: function appendChild(node) {
      var _this$impl11;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'appendChild' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = module.exports.convert(curArg, {
          context: "Failed to execute 'appendChild' on 'Node': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl11 = this[impl]).appendChild.apply(_this$impl11, args));
    }
  }, {
    key: "replaceChild",
    value: function replaceChild(node, child) {
      var _this$impl12;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'replaceChild' on 'Node': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = module.exports.convert(curArg, {
          context: "Failed to execute 'replaceChild' on 'Node': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg2 = arguments[1];
        _curArg2 = module.exports.convert(_curArg2, {
          context: "Failed to execute 'replaceChild' on 'Node': parameter 2"
        });
        args.push(_curArg2);
      }
      return utils.tryWrapperForImpl((_this$impl12 = this[impl]).replaceChild.apply(_this$impl12, args));
    }
  }, {
    key: "removeChild",
    value: function removeChild(child) {
      var _this$impl13;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'removeChild' on 'Node': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = module.exports.convert(curArg, {
          context: "Failed to execute 'removeChild' on 'Node': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl13 = this[impl]).removeChild.apply(_this$impl13, args));
    }
  }, {
    key: "nodeType",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["nodeType"];
    }
  }, {
    key: "nodeName",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["nodeName"];
    }
  }, {
    key: "baseURI",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["baseURI"];
    }
  }, {
    key: "isConnected",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["isConnected"];
    }
  }, {
    key: "ownerDocument",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ownerDocument"]);
    }
  }, {
    key: "parentNode",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["parentNode"]);
    }
  }, {
    key: "parentElement",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["parentElement"]);
    }
  }, {
    key: "childNodes",
    get: function get() {
      var _this2 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "childNodes", function () {
        return utils.tryWrapperForImpl(_this2[impl]["childNodes"]);
      });
    }
  }, {
    key: "firstChild",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["firstChild"]);
    }
  }, {
    key: "lastChild",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["lastChild"]);
    }
  }, {
    key: "previousSibling",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["previousSibling"]);
    }
  }, {
    key: "nextSibling",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["nextSibling"]);
    }
  }, {
    key: "nodeValue",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["nodeValue"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (V === null || V === undefined) {
        V = null;
      } else {
        V = conversions["DOMString"](V, {
          context: "Failed to set the 'nodeValue' property on 'Node': The provided value"
        });
      }

      this[impl]["nodeValue"] = V;
    }
  }, {
    key: "textContent",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["textContent"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (V === null || V === undefined) {
        V = null;
      } else {
        V = conversions["DOMString"](V, {
          context: "Failed to set the 'textContent' property on 'Node': The provided value"
        });
      }

      this[impl]["textContent"] = V;
    }
  }]);

  return Node;
}(EventTarget["interface"]);

Object.defineProperties(Node.prototype, (_Object$definePropert = {
  getRootNode: {
    enumerable: true
  },
  hasChildNodes: {
    enumerable: true
  },
  normalize: {
    enumerable: true
  },
  cloneNode: {
    enumerable: true
  },
  isEqualNode: {
    enumerable: true
  },
  isSameNode: {
    enumerable: true
  },
  compareDocumentPosition: {
    enumerable: true
  },
  contains: {
    enumerable: true
  },
  lookupPrefix: {
    enumerable: true
  },
  lookupNamespaceURI: {
    enumerable: true
  },
  isDefaultNamespace: {
    enumerable: true
  },
  insertBefore: {
    enumerable: true
  },
  appendChild: {
    enumerable: true
  },
  replaceChild: {
    enumerable: true
  },
  removeChild: {
    enumerable: true
  },
  nodeType: {
    enumerable: true
  },
  nodeName: {
    enumerable: true
  },
  baseURI: {
    enumerable: true
  },
  isConnected: {
    enumerable: true
  },
  ownerDocument: {
    enumerable: true
  },
  parentNode: {
    enumerable: true
  },
  parentElement: {
    enumerable: true
  },
  childNodes: {
    enumerable: true
  },
  firstChild: {
    enumerable: true
  },
  lastChild: {
    enumerable: true
  },
  previousSibling: {
    enumerable: true
  },
  nextSibling: {
    enumerable: true
  },
  nodeValue: {
    enumerable: true
  },
  textContent: {
    enumerable: true
  }
}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
  value: "Node",
  configurable: true
}), _defineProperty(_Object$definePropert, "ELEMENT_NODE", {
  value: 1,
  enumerable: true
}), _defineProperty(_Object$definePropert, "ATTRIBUTE_NODE", {
  value: 2,
  enumerable: true
}), _defineProperty(_Object$definePropert, "TEXT_NODE", {
  value: 3,
  enumerable: true
}), _defineProperty(_Object$definePropert, "CDATA_SECTION_NODE", {
  value: 4,
  enumerable: true
}), _defineProperty(_Object$definePropert, "ENTITY_REFERENCE_NODE", {
  value: 5,
  enumerable: true
}), _defineProperty(_Object$definePropert, "ENTITY_NODE", {
  value: 6,
  enumerable: true
}), _defineProperty(_Object$definePropert, "PROCESSING_INSTRUCTION_NODE", {
  value: 7,
  enumerable: true
}), _defineProperty(_Object$definePropert, "COMMENT_NODE", {
  value: 8,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_NODE", {
  value: 9,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_TYPE_NODE", {
  value: 10,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_FRAGMENT_NODE", {
  value: 11,
  enumerable: true
}), _defineProperty(_Object$definePropert, "NOTATION_NODE", {
  value: 12,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_DISCONNECTED", {
  value: 0x01,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_PRECEDING", {
  value: 0x02,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_FOLLOWING", {
  value: 0x04,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_CONTAINS", {
  value: 0x08,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_CONTAINED_BY", {
  value: 0x10,
  enumerable: true
}), _defineProperty(_Object$definePropert, "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", {
  value: 0x20,
  enumerable: true
}), _Object$definePropert));
Object.defineProperties(Node, {
  ELEMENT_NODE: {
    value: 1,
    enumerable: true
  },
  ATTRIBUTE_NODE: {
    value: 2,
    enumerable: true
  },
  TEXT_NODE: {
    value: 3,
    enumerable: true
  },
  CDATA_SECTION_NODE: {
    value: 4,
    enumerable: true
  },
  ENTITY_REFERENCE_NODE: {
    value: 5,
    enumerable: true
  },
  ENTITY_NODE: {
    value: 6,
    enumerable: true
  },
  PROCESSING_INSTRUCTION_NODE: {
    value: 7,
    enumerable: true
  },
  COMMENT_NODE: {
    value: 8,
    enumerable: true
  },
  DOCUMENT_NODE: {
    value: 9,
    enumerable: true
  },
  DOCUMENT_TYPE_NODE: {
    value: 10,
    enumerable: true
  },
  DOCUMENT_FRAGMENT_NODE: {
    value: 11,
    enumerable: true
  },
  NOTATION_NODE: {
    value: 12,
    enumerable: true
  },
  DOCUMENT_POSITION_DISCONNECTED: {
    value: 0x01,
    enumerable: true
  },
  DOCUMENT_POSITION_PRECEDING: {
    value: 0x02,
    enumerable: true
  },
  DOCUMENT_POSITION_FOLLOWING: {
    value: 0x04,
    enumerable: true
  },
  DOCUMENT_POSITION_CONTAINS: {
    value: 0x08,
    enumerable: true
  },
  DOCUMENT_POSITION_CONTAINED_BY: {
    value: 0x10,
    enumerable: true
  },
  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: {
    value: 0x20,
    enumerable: true
  }
});
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'Node'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(Node.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(Node.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {
    EventTarget._internalSetup(obj);
  },
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": Node,
  expose: {
    Window: {
      Node: Node
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../nodes/Node-impl.js");