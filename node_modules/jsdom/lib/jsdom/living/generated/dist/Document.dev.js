"use strict";

var _Object$definePropert;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertNode = require("./Node.js").convert;

var isNode = require("./Node.js").is;

var convertHTMLElement = require("./HTMLElement.js").convert;

var impl = utils.implSymbol;

var Node = require("./Node.js");

var GlobalEventHandlers = require("./GlobalEventHandlers.js");

var NonElementParentNode = require("./NonElementParentNode.js");

var ParentNode = require("./ParentNode.js");

var Document =
/*#__PURE__*/
function (_Node$interface) {
  _inherits(Document, _Node$interface);

  function Document() {
    var _this;

    _classCallCheck(this, Document);

    return _possibleConstructorReturn(_this, iface.setup(Object.create((this instanceof Document ? this.constructor : void 0).prototype)));
  }

  _createClass(Document, [{
    key: "getElementsByTagName",
    value: function getElementsByTagName(qualifiedName) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getElementsByTagName' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getElementsByTagName' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl = this[impl]).getElementsByTagName.apply(_this$impl, args));
    }
  }, {
    key: "getElementsByTagNameNS",
    value: function getElementsByTagNameNS(namespace, localName) {
      var _this$impl2;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'getElementsByTagNameNS' on 'Document': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg = arguments[1];
        _curArg = conversions["DOMString"](_curArg, {
          context: "Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 2"
        });
        args.push(_curArg);
      }
      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).getElementsByTagNameNS.apply(_this$impl2, args));
    }
  }, {
    key: "getElementsByClassName",
    value: function getElementsByClassName(classNames) {
      var _this$impl3;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getElementsByClassName' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getElementsByClassName' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl3 = this[impl]).getElementsByClassName.apply(_this$impl3, args));
    }
  }, {
    key: "createElement",
    value: function createElement(localName) {
      var _this$impl4;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'createElement' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'createElement' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl4 = this[impl]).createElement.apply(_this$impl4, args));
    }
  }, {
    key: "createElementNS",
    value: function createElementNS(namespace, qualifiedName) {
      var _this$impl5;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'createElementNS' on 'Document': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createElementNS' on 'Document': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg2 = arguments[1];
        _curArg2 = conversions["DOMString"](_curArg2, {
          context: "Failed to execute 'createElementNS' on 'Document': parameter 2"
        });
        args.push(_curArg2);
      }
      return utils.tryWrapperForImpl((_this$impl5 = this[impl]).createElementNS.apply(_this$impl5, args));
    }
  }, {
    key: "createDocumentFragment",
    value: function createDocumentFragment() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl].createDocumentFragment());
    }
  }, {
    key: "createTextNode",
    value: function createTextNode(data) {
      var _this$impl6;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'createTextNode' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'createTextNode' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl6 = this[impl]).createTextNode.apply(_this$impl6, args));
    }
  }, {
    key: "createCDATASection",
    value: function createCDATASection(data) {
      var _this$impl7;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'createCDATASection' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'createCDATASection' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl7 = this[impl]).createCDATASection.apply(_this$impl7, args));
    }
  }, {
    key: "createComment",
    value: function createComment(data) {
      var _this$impl8;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'createComment' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'createComment' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl8 = this[impl]).createComment.apply(_this$impl8, args));
    }
  }, {
    key: "createProcessingInstruction",
    value: function createProcessingInstruction(target, data) {
      var _this$impl9;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'createProcessingInstruction' on 'Document': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'createProcessingInstruction' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg3 = arguments[1];
        _curArg3 = conversions["DOMString"](_curArg3, {
          context: "Failed to execute 'createProcessingInstruction' on 'Document': parameter 2"
        });
        args.push(_curArg3);
      }
      return utils.tryWrapperForImpl((_this$impl9 = this[impl]).createProcessingInstruction.apply(_this$impl9, args));
    }
  }, {
    key: "importNode",
    value: function importNode(node) {
      var _this$impl10;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'importNode' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertNode(curArg, {
          context: "Failed to execute 'importNode' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg4 = arguments[1];

        if (_curArg4 !== undefined) {
          _curArg4 = conversions["boolean"](_curArg4, {
            context: "Failed to execute 'importNode' on 'Document': parameter 2"
          });
        } else {
          _curArg4 = false;
        }

        args.push(_curArg4);
      }
      return utils.tryWrapperForImpl((_this$impl10 = this[impl]).importNode.apply(_this$impl10, args));
    }
  }, {
    key: "adoptNode",
    value: function adoptNode(node) {
      var _this$impl11;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'adoptNode' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertNode(curArg, {
          context: "Failed to execute 'adoptNode' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl11 = this[impl]).adoptNode.apply(_this$impl11, args));
    }
  }, {
    key: "createAttribute",
    value: function createAttribute(localName) {
      var _this$impl12;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'createAttribute' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'createAttribute' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl12 = this[impl]).createAttribute.apply(_this$impl12, args));
    }
  }, {
    key: "createAttributeNS",
    value: function createAttributeNS(namespace, qualifiedName) {
      var _this$impl13;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 2) {
        throw new TypeError("Failed to execute 'createAttributeNS' on 'Document': 2 arguments required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'createAttributeNS' on 'Document': parameter 1"
          });
        }

        args.push(curArg);
      }
      {
        var _curArg5 = arguments[1];
        _curArg5 = conversions["DOMString"](_curArg5, {
          context: "Failed to execute 'createAttributeNS' on 'Document': parameter 2"
        });
        args.push(_curArg5);
      }
      return utils.tryWrapperForImpl((_this$impl13 = this[impl]).createAttributeNS.apply(_this$impl13, args));
    }
  }, {
    key: "createEvent",
    value: function createEvent(interface_) {
      var _this$impl14;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'createEvent' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'createEvent' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl14 = this[impl]).createEvent.apply(_this$impl14, args));
    }
  }, {
    key: "createNodeIterator",
    value: function createNodeIterator(root) {
      var _this$impl15;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'createNodeIterator' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertNode(curArg, {
          context: "Failed to execute 'createNodeIterator' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg6 = arguments[1];

        if (_curArg6 !== undefined) {
          _curArg6 = conversions["unsigned long"](_curArg6, {
            context: "Failed to execute 'createNodeIterator' on 'Document': parameter 2"
          });
        } else {
          _curArg6 = 0xffffffff;
        }

        args.push(_curArg6);
      }
      {
        var _curArg7 = arguments[2];

        if (_curArg7 !== undefined) {
          if (_curArg7 === null || _curArg7 === undefined) {
            _curArg7 = null;
          } else {
            _curArg7 = utils.tryImplForWrapper(_curArg7);
          }
        } else {
          _curArg7 = null;
        }

        args.push(_curArg7);
      }
      return utils.tryWrapperForImpl((_this$impl15 = this[impl]).createNodeIterator.apply(_this$impl15, args));
    }
  }, {
    key: "createTreeWalker",
    value: function createTreeWalker(root) {
      var _this$impl16;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'createTreeWalker' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = convertNode(curArg, {
          context: "Failed to execute 'createTreeWalker' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      {
        var _curArg8 = arguments[1];

        if (_curArg8 !== undefined) {
          _curArg8 = conversions["unsigned long"](_curArg8, {
            context: "Failed to execute 'createTreeWalker' on 'Document': parameter 2"
          });
        } else {
          _curArg8 = 0xffffffff;
        }

        args.push(_curArg8);
      }
      {
        var _curArg9 = arguments[2];

        if (_curArg9 !== undefined) {
          if (_curArg9 === null || _curArg9 === undefined) {
            _curArg9 = null;
          } else {
            _curArg9 = utils.tryImplForWrapper(_curArg9);
          }
        } else {
          _curArg9 = null;
        }

        args.push(_curArg9);
      }
      return utils.tryWrapperForImpl((_this$impl16 = this[impl]).createTreeWalker.apply(_this$impl16, args));
    }
  }, {
    key: "getElementsByName",
    value: function getElementsByName(elementName) {
      var _this$impl17;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getElementsByName' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getElementsByName' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl17 = this[impl]).getElementsByName.apply(_this$impl17, args));
    }
  }, {
    key: "open",
    value: function open() {
      var _this$impl18;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (curArg !== undefined) {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'open' on 'Document': parameter 1"
          });
        } else {
          curArg = "text/html";
        }

        args.push(curArg);
      }
      {
        var _curArg10 = arguments[1];

        if (_curArg10 !== undefined) {
          _curArg10 = conversions["DOMString"](_curArg10, {
            context: "Failed to execute 'open' on 'Document': parameter 2"
          });
        } else {
          _curArg10 = "";
        }

        args.push(_curArg10);
      }
      return utils.tryWrapperForImpl((_this$impl18 = this[impl]).open.apply(_this$impl18, args));
    }
  }, {
    key: "close",
    value: function close() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].close();
    }
  }, {
    key: "write",
    value: function write() {
      var _this$impl19;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'write' on 'Document': parameter " + (i + 1)
        });
        args.push(curArg);
      }

      return (_this$impl19 = this[impl]).write.apply(_this$impl19, args);
    }
  }, {
    key: "writeln",
    value: function writeln() {
      var _this$impl20;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'writeln' on 'Document': parameter " + (i + 1)
        });
        args.push(curArg);
      }

      return (_this$impl20 = this[impl]).writeln.apply(_this$impl20, args);
    }
  }, {
    key: "hasFocus",
    value: function hasFocus() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].hasFocus();
    }
  }, {
    key: "clear",
    value: function clear() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].clear();
    }
  }, {
    key: "captureEvents",
    value: function captureEvents() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].captureEvents();
    }
  }, {
    key: "releaseEvents",
    value: function releaseEvents() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].releaseEvents();
    }
  }, {
    key: "getElementById",
    value: function getElementById(elementId) {
      var _this$impl21;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'getElementById' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'getElementById' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl21 = this[impl]).getElementById.apply(_this$impl21, args));
    }
  }, {
    key: "prepend",
    value: function prepend() {
      var _this$impl22;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];

        if (isNode(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'prepend' on 'Document': parameter " + (i + 1)
          });
        }

        args.push(curArg);
      }

      return (_this$impl22 = this[impl]).prepend.apply(_this$impl22, args);
    }
  }, {
    key: "append",
    value: function append() {
      var _this$impl23;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      for (var i = 0; i < arguments.length; i++) {
        var curArg = arguments[i];

        if (isNode(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'append' on 'Document': parameter " + (i + 1)
          });
        }

        args.push(curArg);
      }

      return (_this$impl23 = this[impl]).append.apply(_this$impl23, args);
    }
  }, {
    key: "querySelector",
    value: function querySelector(selectors) {
      var _this$impl24;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'querySelector' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'querySelector' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl24 = this[impl]).querySelector.apply(_this$impl24, args));
    }
  }, {
    key: "querySelectorAll",
    value: function querySelectorAll(selectors) {
      var _this$impl25;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'querySelectorAll' on 'Document': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'querySelectorAll' on 'Document': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl25 = this[impl]).querySelectorAll.apply(_this$impl25, args));
    }
  }, {
    key: "implementation",
    get: function get() {
      var _this2 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "implementation", function () {
        return utils.tryWrapperForImpl(_this2[impl]["implementation"]);
      });
    }
  }, {
    key: "URL",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["URL"];
    }
  }, {
    key: "documentURI",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["documentURI"];
    }
  }, {
    key: "origin",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["origin"];
    }
  }, {
    key: "compatMode",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["compatMode"];
    }
  }, {
    key: "characterSet",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["characterSet"];
    }
  }, {
    key: "charset",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["charset"];
    }
  }, {
    key: "inputEncoding",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["inputEncoding"];
    }
  }, {
    key: "contentType",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["contentType"];
    }
  }, {
    key: "doctype",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["doctype"]);
    }
  }, {
    key: "documentElement",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["documentElement"]);
    }
  }, {
    key: "referrer",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["referrer"];
    }
  }, {
    key: "cookie",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["cookie"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["USVString"](V, {
        context: "Failed to set the 'cookie' property on 'Document': The provided value"
      });
      this[impl]["cookie"] = V;
    }
  }, {
    key: "lastModified",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["lastModified"];
    }
  }, {
    key: "readyState",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["readyState"]);
    }
  }, {
    key: "title",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["title"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'title' property on 'Document': The provided value"
      });
      this[impl]["title"] = V;
    }
  }, {
    key: "dir",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["dir"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'dir' property on 'Document': The provided value"
      });
      this[impl]["dir"] = V;
    }
  }, {
    key: "body",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["body"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (V === null || V === undefined) {
        V = null;
      } else {
        V = convertHTMLElement(V, {
          context: "Failed to set the 'body' property on 'Document': The provided value"
        });
      }

      this[impl]["body"] = V;
    }
  }, {
    key: "head",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["head"]);
    }
  }, {
    key: "images",
    get: function get() {
      var _this3 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "images", function () {
        return utils.tryWrapperForImpl(_this3[impl]["images"]);
      });
    }
  }, {
    key: "embeds",
    get: function get() {
      var _this4 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "embeds", function () {
        return utils.tryWrapperForImpl(_this4[impl]["embeds"]);
      });
    }
  }, {
    key: "plugins",
    get: function get() {
      var _this5 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "plugins", function () {
        return utils.tryWrapperForImpl(_this5[impl]["plugins"]);
      });
    }
  }, {
    key: "links",
    get: function get() {
      var _this6 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "links", function () {
        return utils.tryWrapperForImpl(_this6[impl]["links"]);
      });
    }
  }, {
    key: "forms",
    get: function get() {
      var _this7 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "forms", function () {
        return utils.tryWrapperForImpl(_this7[impl]["forms"]);
      });
    }
  }, {
    key: "scripts",
    get: function get() {
      var _this8 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "scripts", function () {
        return utils.tryWrapperForImpl(_this8[impl]["scripts"]);
      });
    }
  }, {
    key: "currentScript",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["currentScript"]);
    }
  }, {
    key: "defaultView",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["defaultView"]);
    }
  }, {
    key: "activeElement",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["activeElement"]);
    }
  }, {
    key: "onreadystatechange",
    get: function get() {
      return utils.tryWrapperForImpl(this[impl]["onreadystatechange"]);
    },
    set: function set(V) {
      V = utils.tryImplForWrapper(V);
      this[impl]["onreadystatechange"] = V;
    }
  }, {
    key: "anchors",
    get: function get() {
      var _this9 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "anchors", function () {
        return utils.tryWrapperForImpl(_this9[impl]["anchors"]);
      });
    }
  }, {
    key: "applets",
    get: function get() {
      var _this10 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "applets", function () {
        return utils.tryWrapperForImpl(_this10[impl]["applets"]);
      });
    }
  }, {
    key: "styleSheets",
    get: function get() {
      var _this11 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "styleSheets", function () {
        return utils.tryWrapperForImpl(_this11[impl]["styleSheets"]);
      });
    }
  }, {
    key: "hidden",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["hidden"];
    }
  }, {
    key: "visibilityState",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["visibilityState"]);
    }
  }, {
    key: "onvisibilitychange",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onvisibilitychange"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onvisibilitychange"] = V;
    }
  }, {
    key: "onabort",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onabort"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onabort"] = V;
    }
  }, {
    key: "onauxclick",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onauxclick"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onauxclick"] = V;
    }
  }, {
    key: "onblur",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onblur"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onblur"] = V;
    }
  }, {
    key: "oncancel",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["oncancel"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["oncancel"] = V;
    }
  }, {
    key: "oncanplay",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["oncanplay"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["oncanplay"] = V;
    }
  }, {
    key: "oncanplaythrough",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["oncanplaythrough"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["oncanplaythrough"] = V;
    }
  }, {
    key: "onchange",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onchange"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onchange"] = V;
    }
  }, {
    key: "onclick",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onclick"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onclick"] = V;
    }
  }, {
    key: "onclose",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onclose"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onclose"] = V;
    }
  }, {
    key: "oncontextmenu",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["oncontextmenu"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["oncontextmenu"] = V;
    }
  }, {
    key: "oncuechange",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["oncuechange"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["oncuechange"] = V;
    }
  }, {
    key: "ondblclick",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondblclick"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondblclick"] = V;
    }
  }, {
    key: "ondrag",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondrag"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondrag"] = V;
    }
  }, {
    key: "ondragend",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondragend"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondragend"] = V;
    }
  }, {
    key: "ondragenter",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondragenter"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondragenter"] = V;
    }
  }, {
    key: "ondragexit",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondragexit"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondragexit"] = V;
    }
  }, {
    key: "ondragleave",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondragleave"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondragleave"] = V;
    }
  }, {
    key: "ondragover",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondragover"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondragover"] = V;
    }
  }, {
    key: "ondragstart",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondragstart"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondragstart"] = V;
    }
  }, {
    key: "ondrop",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondrop"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondrop"] = V;
    }
  }, {
    key: "ondurationchange",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ondurationchange"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ondurationchange"] = V;
    }
  }, {
    key: "onemptied",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onemptied"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onemptied"] = V;
    }
  }, {
    key: "onended",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onended"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onended"] = V;
    }
  }, {
    key: "onerror",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onerror"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onerror"] = V;
    }
  }, {
    key: "onfocus",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onfocus"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onfocus"] = V;
    }
  }, {
    key: "oninput",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["oninput"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["oninput"] = V;
    }
  }, {
    key: "oninvalid",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["oninvalid"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["oninvalid"] = V;
    }
  }, {
    key: "onkeydown",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onkeydown"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onkeydown"] = V;
    }
  }, {
    key: "onkeypress",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onkeypress"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onkeypress"] = V;
    }
  }, {
    key: "onkeyup",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onkeyup"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onkeyup"] = V;
    }
  }, {
    key: "onload",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onload"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onload"] = V;
    }
  }, {
    key: "onloadeddata",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onloadeddata"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onloadeddata"] = V;
    }
  }, {
    key: "onloadedmetadata",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onloadedmetadata"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onloadedmetadata"] = V;
    }
  }, {
    key: "onloadend",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onloadend"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onloadend"] = V;
    }
  }, {
    key: "onloadstart",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onloadstart"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onloadstart"] = V;
    }
  }, {
    key: "onmousedown",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onmousedown"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onmousedown"] = V;
    }
  }, {
    key: "onmouseenter",
    get: function get() {
      return utils.tryWrapperForImpl(this[impl]["onmouseenter"]);
    },
    set: function set(V) {
      V = utils.tryImplForWrapper(V);
      this[impl]["onmouseenter"] = V;
    }
  }, {
    key: "onmouseleave",
    get: function get() {
      return utils.tryWrapperForImpl(this[impl]["onmouseleave"]);
    },
    set: function set(V) {
      V = utils.tryImplForWrapper(V);
      this[impl]["onmouseleave"] = V;
    }
  }, {
    key: "onmousemove",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onmousemove"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onmousemove"] = V;
    }
  }, {
    key: "onmouseout",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onmouseout"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onmouseout"] = V;
    }
  }, {
    key: "onmouseover",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onmouseover"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onmouseover"] = V;
    }
  }, {
    key: "onmouseup",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onmouseup"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onmouseup"] = V;
    }
  }, {
    key: "onwheel",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onwheel"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onwheel"] = V;
    }
  }, {
    key: "onpause",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onpause"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onpause"] = V;
    }
  }, {
    key: "onplay",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onplay"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onplay"] = V;
    }
  }, {
    key: "onplaying",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onplaying"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onplaying"] = V;
    }
  }, {
    key: "onprogress",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onprogress"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onprogress"] = V;
    }
  }, {
    key: "onratechange",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onratechange"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onratechange"] = V;
    }
  }, {
    key: "onreset",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onreset"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onreset"] = V;
    }
  }, {
    key: "onresize",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onresize"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onresize"] = V;
    }
  }, {
    key: "onscroll",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onscroll"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onscroll"] = V;
    }
  }, {
    key: "onsecuritypolicyviolation",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onsecuritypolicyviolation"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onsecuritypolicyviolation"] = V;
    }
  }, {
    key: "onseeked",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onseeked"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onseeked"] = V;
    }
  }, {
    key: "onseeking",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onseeking"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onseeking"] = V;
    }
  }, {
    key: "onselect",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onselect"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onselect"] = V;
    }
  }, {
    key: "onstalled",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onstalled"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onstalled"] = V;
    }
  }, {
    key: "onsubmit",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onsubmit"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onsubmit"] = V;
    }
  }, {
    key: "onsuspend",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onsuspend"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onsuspend"] = V;
    }
  }, {
    key: "ontimeupdate",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ontimeupdate"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ontimeupdate"] = V;
    }
  }, {
    key: "ontoggle",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["ontoggle"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["ontoggle"] = V;
    }
  }, {
    key: "onvolumechange",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onvolumechange"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onvolumechange"] = V;
    }
  }, {
    key: "onwaiting",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["onwaiting"]);
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = utils.tryImplForWrapper(V);
      this[impl]["onwaiting"] = V;
    }
  }, {
    key: "children",
    get: function get() {
      var _this12 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "children", function () {
        return utils.tryWrapperForImpl(_this12[impl]["children"]);
      });
    }
  }, {
    key: "firstElementChild",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["firstElementChild"]);
    }
  }, {
    key: "lastElementChild",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["lastElementChild"]);
    }
  }, {
    key: "childElementCount",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["childElementCount"];
    }
  }]);

  return Document;
}(Node["interface"]);

Object.defineProperties(Document.prototype, (_Object$definePropert = {
  getElementsByTagName: {
    enumerable: true
  },
  getElementsByTagNameNS: {
    enumerable: true
  },
  getElementsByClassName: {
    enumerable: true
  },
  createElement: {
    enumerable: true
  },
  createElementNS: {
    enumerable: true
  },
  createDocumentFragment: {
    enumerable: true
  },
  createTextNode: {
    enumerable: true
  },
  createCDATASection: {
    enumerable: true
  },
  createComment: {
    enumerable: true
  },
  createProcessingInstruction: {
    enumerable: true
  },
  importNode: {
    enumerable: true
  },
  adoptNode: {
    enumerable: true
  },
  createAttribute: {
    enumerable: true
  },
  createAttributeNS: {
    enumerable: true
  },
  createEvent: {
    enumerable: true
  },
  createNodeIterator: {
    enumerable: true
  },
  createTreeWalker: {
    enumerable: true
  },
  getElementsByName: {
    enumerable: true
  },
  open: {
    enumerable: true
  },
  close: {
    enumerable: true
  },
  write: {
    enumerable: true
  },
  writeln: {
    enumerable: true
  },
  hasFocus: {
    enumerable: true
  },
  clear: {
    enumerable: true
  },
  captureEvents: {
    enumerable: true
  },
  releaseEvents: {
    enumerable: true
  },
  getElementById: {
    enumerable: true
  },
  prepend: {
    enumerable: true
  },
  append: {
    enumerable: true
  },
  querySelector: {
    enumerable: true
  },
  querySelectorAll: {
    enumerable: true
  },
  implementation: {
    enumerable: true
  },
  URL: {
    enumerable: true
  },
  documentURI: {
    enumerable: true
  },
  origin: {
    enumerable: true
  },
  compatMode: {
    enumerable: true
  },
  characterSet: {
    enumerable: true
  },
  charset: {
    enumerable: true
  },
  inputEncoding: {
    enumerable: true
  },
  contentType: {
    enumerable: true
  },
  doctype: {
    enumerable: true
  },
  documentElement: {
    enumerable: true
  },
  referrer: {
    enumerable: true
  },
  cookie: {
    enumerable: true
  },
  lastModified: {
    enumerable: true
  },
  readyState: {
    enumerable: true
  },
  title: {
    enumerable: true
  },
  dir: {
    enumerable: true
  },
  body: {
    enumerable: true
  },
  head: {
    enumerable: true
  },
  images: {
    enumerable: true
  },
  embeds: {
    enumerable: true
  },
  plugins: {
    enumerable: true
  },
  links: {
    enumerable: true
  },
  forms: {
    enumerable: true
  },
  scripts: {
    enumerable: true
  },
  currentScript: {
    enumerable: true
  },
  defaultView: {
    enumerable: true
  },
  activeElement: {
    enumerable: true
  },
  onreadystatechange: {
    enumerable: true
  },
  anchors: {
    enumerable: true
  },
  applets: {
    enumerable: true
  },
  styleSheets: {
    enumerable: true
  },
  hidden: {
    enumerable: true
  },
  visibilityState: {
    enumerable: true
  },
  onvisibilitychange: {
    enumerable: true
  },
  onabort: {
    enumerable: true
  },
  onauxclick: {
    enumerable: true
  },
  onblur: {
    enumerable: true
  },
  oncancel: {
    enumerable: true
  },
  oncanplay: {
    enumerable: true
  },
  oncanplaythrough: {
    enumerable: true
  },
  onchange: {
    enumerable: true
  },
  onclick: {
    enumerable: true
  },
  onclose: {
    enumerable: true
  },
  oncontextmenu: {
    enumerable: true
  },
  oncuechange: {
    enumerable: true
  },
  ondblclick: {
    enumerable: true
  },
  ondrag: {
    enumerable: true
  },
  ondragend: {
    enumerable: true
  },
  ondragenter: {
    enumerable: true
  },
  ondragexit: {
    enumerable: true
  },
  ondragleave: {
    enumerable: true
  },
  ondragover: {
    enumerable: true
  },
  ondragstart: {
    enumerable: true
  },
  ondrop: {
    enumerable: true
  },
  ondurationchange: {
    enumerable: true
  },
  onemptied: {
    enumerable: true
  },
  onended: {
    enumerable: true
  },
  onerror: {
    enumerable: true
  },
  onfocus: {
    enumerable: true
  },
  oninput: {
    enumerable: true
  },
  oninvalid: {
    enumerable: true
  },
  onkeydown: {
    enumerable: true
  },
  onkeypress: {
    enumerable: true
  },
  onkeyup: {
    enumerable: true
  },
  onload: {
    enumerable: true
  },
  onloadeddata: {
    enumerable: true
  },
  onloadedmetadata: {
    enumerable: true
  },
  onloadend: {
    enumerable: true
  },
  onloadstart: {
    enumerable: true
  },
  onmousedown: {
    enumerable: true
  },
  onmouseenter: {
    enumerable: true
  },
  onmouseleave: {
    enumerable: true
  },
  onmousemove: {
    enumerable: true
  },
  onmouseout: {
    enumerable: true
  },
  onmouseover: {
    enumerable: true
  },
  onmouseup: {
    enumerable: true
  },
  onwheel: {
    enumerable: true
  },
  onpause: {
    enumerable: true
  },
  onplay: {
    enumerable: true
  },
  onplaying: {
    enumerable: true
  },
  onprogress: {
    enumerable: true
  },
  onratechange: {
    enumerable: true
  },
  onreset: {
    enumerable: true
  },
  onresize: {
    enumerable: true
  },
  onscroll: {
    enumerable: true
  },
  onsecuritypolicyviolation: {
    enumerable: true
  },
  onseeked: {
    enumerable: true
  },
  onseeking: {
    enumerable: true
  },
  onselect: {
    enumerable: true
  },
  onstalled: {
    enumerable: true
  },
  onsubmit: {
    enumerable: true
  },
  onsuspend: {
    enumerable: true
  },
  ontimeupdate: {
    enumerable: true
  },
  ontoggle: {
    enumerable: true
  },
  onvolumechange: {
    enumerable: true
  },
  onwaiting: {
    enumerable: true
  },
  children: {
    enumerable: true
  },
  firstElementChild: {
    enumerable: true
  },
  lastElementChild: {
    enumerable: true
  },
  childElementCount: {
    enumerable: true
  }
}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
  value: "Document",
  configurable: true
}), _defineProperty(_Object$definePropert, Symbol.unscopables, {
  value: {
    prepend: true,
    append: true
  },
  configurable: true
}), _Object$definePropert));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'Document'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(Document.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(Document.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {
    Node._internalSetup(obj);

    Object.defineProperties(obj, utils.getOwnPropertyDescriptors({
      get location() {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(obj[impl]["location"]);
      },

      set location(V) {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        this.location.href = V;
      }

    }));
    Object.defineProperties(obj, {
      location: {
        configurable: false
      }
    });
  },
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": Document,
  expose: {
    Window: {
      Document: Document
    }
  }
}; // iface

module.exports = iface;

GlobalEventHandlers._mixedIntoPredicates.push(module.exports.is);

NonElementParentNode._mixedIntoPredicates.push(module.exports.is);

ParentNode._mixedIntoPredicates.push(module.exports.is);

var Impl = require("../nodes/Document-impl.js");