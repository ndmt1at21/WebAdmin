"use strict";

var _Object$definePropert;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var isHTMLOptionElement = require("./HTMLOptionElement.js").is;

var isHTMLOptGroupElement = require("./HTMLOptGroupElement.js").is;

var isHTMLElement = require("./HTMLElement.js").is;

var convertHTMLOptionElement = require("./HTMLOptionElement.js").convert;

var impl = utils.implSymbol;

var HTMLElement = require("./HTMLElement.js");

var HTMLSelectElement =
/*#__PURE__*/
function (_HTMLElement$interfac) {
  _inherits(HTMLSelectElement, _HTMLElement$interfac);

  function HTMLSelectElement() {
    var _this;

    _classCallCheck(this, HTMLSelectElement);

    throw new TypeError("Illegal constructor");
    return _possibleConstructorReturn(_this);
  }

  _createClass(HTMLSelectElement, [{
    key: "item",
    value: function item(index) {
      var _this$impl;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'item' on 'HTMLSelectElement': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["unsigned long"](curArg, {
          context: "Failed to execute 'item' on 'HTMLSelectElement': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl = this[impl]).item.apply(_this$impl, args));
    }
  }, {
    key: "namedItem",
    value: function namedItem(name) {
      var _this$impl2;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'namedItem' on 'HTMLSelectElement': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'namedItem' on 'HTMLSelectElement': parameter 1"
        });
        args.push(curArg);
      }
      return utils.tryWrapperForImpl((_this$impl2 = this[impl]).namedItem.apply(_this$impl2, args));
    }
  }, {
    key: "add",
    value: function add(element) {
      var _this$impl3;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'add' on 'HTMLSelectElement': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];

        if (isHTMLOptionElement(curArg) || isHTMLOptGroupElement(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else {
          throw new TypeError("Failed to execute 'add' on 'HTMLSelectElement': parameter 1" + " is not of any supported type.");
        }

        args.push(curArg);
      }
      {
        var _curArg = arguments[1];

        if (_curArg !== undefined) {
          if (_curArg === null || _curArg === undefined) {
            _curArg = null;
          } else {
            if (isHTMLElement(_curArg)) {
              _curArg = utils.implForWrapper(_curArg);
            } else if (typeof _curArg === "number") {
              _curArg = conversions["long"](_curArg, {
                context: "Failed to execute 'add' on 'HTMLSelectElement': parameter 2"
              });
            } else {
              _curArg = conversions["long"](_curArg, {
                context: "Failed to execute 'add' on 'HTMLSelectElement': parameter 2"
              });
            }
          }
        } else {
          _curArg = null;
        }

        args.push(_curArg);
      }
      return (_this$impl3 = this[impl]).add.apply(_this$impl3, args);
    }
  }, {
    key: "remove",
    value: function remove() {
      var _this$impl4;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var args = [];

      switch (arguments.length) {
        case 0:
          break;

        default:
          {
            var curArg = arguments[0];
            curArg = conversions["long"](curArg, {
              context: "Failed to execute 'remove' on 'HTMLSelectElement': parameter 1"
            });
            args.push(curArg);
          }
      }

      return (_this$impl4 = this[impl]).remove.apply(_this$impl4, args);
    }
  }, {
    key: "checkValidity",
    value: function checkValidity() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].checkValidity();
    }
  }, {
    key: "reportValidity",
    value: function reportValidity() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].reportValidity();
    }
  }, {
    key: "setCustomValidity",
    value: function setCustomValidity(error) {
      var _this$impl5;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError("Failed to execute 'setCustomValidity' on 'HTMLSelectElement': 1 argument required, but only " + arguments.length + " present.");
      }

      var args = [];
      {
        var curArg = arguments[0];
        curArg = conversions["DOMString"](curArg, {
          context: "Failed to execute 'setCustomValidity' on 'HTMLSelectElement': parameter 1"
        });
        args.push(curArg);
      }
      return (_this$impl5 = this[impl]).setCustomValidity.apply(_this$impl5, args);
    }
  }, {
    key: "autofocus",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "autofocus");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'autofocus' property on 'HTMLSelectElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "autofocus", "");
      } else {
        this.removeAttributeNS(null, "autofocus");
      }
    }
  }, {
    key: "disabled",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "disabled");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'disabled' property on 'HTMLSelectElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "disabled", "");
      } else {
        this.removeAttributeNS(null, "disabled");
      }
    }
  }, {
    key: "form",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["form"]);
    }
  }, {
    key: "multiple",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "multiple");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'multiple' property on 'HTMLSelectElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "multiple", "");
      } else {
        this.removeAttributeNS(null, "multiple");
      }
    }
  }, {
    key: "name",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = this.getAttributeNS(null, "name");
      return value === null ? "" : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'name' property on 'HTMLSelectElement': The provided value"
      });
      this.setAttributeNS(null, "name", V);
    }
  }, {
    key: "required",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this.hasAttributeNS(null, "required");
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["boolean"](V, {
        context: "Failed to set the 'required' property on 'HTMLSelectElement': The provided value"
      });

      if (V) {
        this.setAttributeNS(null, "required", "");
      } else {
        this.removeAttributeNS(null, "required");
      }
    }
  }, {
    key: "size",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      var value = parseInt(this.getAttributeNS(null, "size"));
      return isNaN(value) || value < 0 || value > 2147483647 ? 0 : value;
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["unsigned long"](V, {
        context: "Failed to set the 'size' property on 'HTMLSelectElement': The provided value"
      });
      this.setAttributeNS(null, "size", String(V > 2147483647 ? 0 : V));
    }
  }, {
    key: "type",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["type"];
    }
  }, {
    key: "options",
    get: function get() {
      var _this2 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "options", function () {
        return utils.tryWrapperForImpl(_this2[impl]["options"]);
      });
    }
  }, {
    key: "length",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["length"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["unsigned long"](V, {
        context: "Failed to set the 'length' property on 'HTMLSelectElement': The provided value"
      });
      this[impl]["length"] = V;
    }
  }, {
    key: "selectedOptions",
    get: function get() {
      var _this3 = this;

      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.getSameObject(this, "selectedOptions", function () {
        return utils.tryWrapperForImpl(_this3[impl]["selectedOptions"]);
      });
    }
  }, {
    key: "selectedIndex",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["selectedIndex"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["long"](V, {
        context: "Failed to set the 'selectedIndex' property on 'HTMLSelectElement': The provided value"
      });
      this[impl]["selectedIndex"] = V;
    }
  }, {
    key: "value",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["value"];
    },
    set: function set(V) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      V = conversions["DOMString"](V, {
        context: "Failed to set the 'value' property on 'HTMLSelectElement': The provided value"
      });
      this[impl]["value"] = V;
    }
  }, {
    key: "willValidate",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["willValidate"];
    }
  }, {
    key: "validity",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["validity"]);
    }
  }, {
    key: "validationMessage",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl]["validationMessage"];
    }
  }, {
    key: "labels",
    get: function get() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return utils.tryWrapperForImpl(this[impl]["labels"]);
    }
  }]);

  return HTMLSelectElement;
}(HTMLElement["interface"]);

Object.defineProperties(HTMLSelectElement.prototype, (_Object$definePropert = {
  item: {
    enumerable: true
  },
  namedItem: {
    enumerable: true
  },
  add: {
    enumerable: true
  },
  remove: {
    enumerable: true
  },
  checkValidity: {
    enumerable: true
  },
  reportValidity: {
    enumerable: true
  },
  setCustomValidity: {
    enumerable: true
  },
  autofocus: {
    enumerable: true
  },
  disabled: {
    enumerable: true
  },
  form: {
    enumerable: true
  },
  multiple: {
    enumerable: true
  },
  name: {
    enumerable: true
  },
  required: {
    enumerable: true
  },
  size: {
    enumerable: true
  },
  type: {
    enumerable: true
  },
  options: {
    enumerable: true
  },
  length: {
    enumerable: true
  },
  selectedOptions: {
    enumerable: true
  },
  selectedIndex: {
    enumerable: true
  },
  value: {
    enumerable: true
  },
  willValidate: {
    enumerable: true
  },
  validity: {
    enumerable: true
  },
  validationMessage: {
    enumerable: true
  },
  labels: {
    enumerable: true
  }
}, _defineProperty(_Object$definePropert, Symbol.toStringTag, {
  value: "HTMLSelectElement",
  configurable: true
}), _defineProperty(_Object$definePropert, Symbol.iterator, {
  value: Array.prototype[Symbol.iterator],
  configurable: true,
  writable: true
}), _Object$definePropert));
var iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is: function is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.exports._mixedIntoPredicates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var isMixedInto = _step.value;

          if (isMixedInto(obj)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = module.exports._mixedIntoPredicates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var isMixedInto = _step2.value;

          if (isMixedInto(wrapper)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError("".concat(context, " is not of type 'HTMLSelectElement'."));
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(HTMLSelectElement.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(HTMLSelectElement.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {
    HTMLElement._internalSetup(obj);
  },
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });
    obj = new Proxy(obj, {
      get: function get(target, P, receiver) {
        if (_typeof(P) === "symbol") {
          return Reflect.get(target, P, receiver);
        }

        var desc = this.getOwnPropertyDescriptor(target, P);

        if (desc === undefined) {
          var parent = Object.getPrototypeOf(target);

          if (parent === null) {
            return undefined;
          }

          return Reflect.get(target, P, receiver);
        }

        if (!desc.get && !desc.set) {
          return desc.value;
        }

        var getter = desc.get;

        if (getter === undefined) {
          return undefined;
        }

        return Reflect.apply(getter, receiver, []);
      },
      has: function has(target, P) {
        if (_typeof(P) === "symbol") {
          return Reflect.has(target, P);
        }

        var desc = this.getOwnPropertyDescriptor(target, P);

        if (desc !== undefined) {
          return true;
        }

        var parent = Object.getPrototypeOf(target);

        if (parent !== null) {
          return Reflect.has(parent, P);
        }

        return false;
      },
      ownKeys: function ownKeys(target) {
        var keys = new Set();
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = target[impl][utils.supportedPropertyIndices][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var key = _step3.value;
            keys.add("".concat(key));
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = Reflect.ownKeys(target)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _key = _step4.value;
            keys.add(_key);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return _toConsumableArray(keys);
      },
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, P) {
        if (_typeof(P) === "symbol") {
          return Reflect.getOwnPropertyDescriptor(target, P);
        }

        var ignoreNamedProps = false;

        if (utils.isArrayIndexPropName(P)) {
          var index = P >>> 0;
          var indexedValue = target[impl].item(index);

          if (indexedValue !== null) {
            return {
              writable: true,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }

          ignoreNamedProps = true;
        }

        return Reflect.getOwnPropertyDescriptor(target, P);
      },
      set: function set(target, P, V, receiver) {
        if (_typeof(P) === "symbol") {
          return Reflect.set(target, P, V, receiver);
        }

        if (target === receiver) {
          if (utils.isArrayIndexPropName(P)) {
            var index = P >>> 0;
            var indexedValue = V;

            if (indexedValue === null || indexedValue === undefined) {
              indexedValue = null;
            } else {
              indexedValue = convertHTMLOptionElement(indexedValue, {
                context: "Failed to set the " + index + " property on 'HTMLSelectElement': The provided value"
              });
            }

            var creating = !(target[impl].item(index) !== null);

            if (creating) {
              target[impl][utils.indexedSetNew](index, indexedValue);
            } else {
              target[impl][utils.indexedSetExisting](index, indexedValue);
            }

            return true;
          }
        }

        var ownDesc;

        if (utils.isArrayIndexPropName(P)) {
          var _index = P >>> 0;

          var _indexedValue = target[impl].item(_index);

          if (_indexedValue !== null) {
            ownDesc = {
              writable: true,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(_indexedValue)
            };
          }
        }

        if (ownDesc === undefined) {
          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
        }

        if (ownDesc === undefined) {
          var parent = Reflect.getPrototypeOf(target);

          if (parent !== null) {
            return Reflect.set(parent, P, V, receiver);
          }

          ownDesc = {
            writable: true,
            enumerable: true,
            configurable: true,
            value: undefined
          };
        }

        if (!ownDesc.writable) {
          return false;
        }

        if (!utils.isObject(receiver)) {
          return false;
        }

        var existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
        var valueDesc;

        if (existingDesc !== undefined) {
          if (existingDesc.get || existingDesc.set) {
            return false;
          }

          if (!existingDesc.writable) {
            return false;
          }

          valueDesc = {
            value: V
          };
        } else {
          valueDesc = {
            writable: true,
            enumerable: true,
            configurable: true,
            value: V
          };
        }

        return Reflect.defineProperty(receiver, P, valueDesc);
      },
      defineProperty: function defineProperty(target, P, desc) {
        if (_typeof(P) === "symbol") {
          return Reflect.defineProperty(target, P, desc);
        }

        if (utils.isArrayIndexPropName(P)) {
          if (desc.get || desc.set) {
            return false;
          }

          var index = P >>> 0;
          var indexedValue = desc.value;

          if (indexedValue === null || indexedValue === undefined) {
            indexedValue = null;
          } else {
            indexedValue = convertHTMLOptionElement(indexedValue, {
              context: "Failed to set the " + index + " property on 'HTMLSelectElement': The provided value"
            });
          }

          var creating = !(target[impl].item(index) !== null);

          if (creating) {
            target[impl][utils.indexedSetNew](index, indexedValue);
          } else {
            target[impl][utils.indexedSetExisting](index, indexedValue);
          }

          return true;
        }

        return Reflect.defineProperty(target, P, desc);
      },
      deleteProperty: function deleteProperty(target, P) {
        if (_typeof(P) === "symbol") {
          return Reflect.deleteProperty(target, P);
        }

        if (utils.isArrayIndexPropName(P)) {
          var index = P >>> 0;
          return !(target[impl].item(index) !== null);
        }

        return Reflect.deleteProperty(target, P);
      },
      preventExtensions: function preventExtensions() {
        return false;
      }
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  "interface": HTMLSelectElement,
  expose: {
    Window: {
      HTMLSelectElement: HTMLSelectElement
    }
  }
}; // iface

module.exports = iface;

var Impl = require("../nodes/HTMLSelectElement-impl.js");