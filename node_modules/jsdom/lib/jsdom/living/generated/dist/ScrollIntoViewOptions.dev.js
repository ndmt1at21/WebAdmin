"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var convertScrollLogicalPosition = require("./ScrollLogicalPosition.js").convert;

var ScrollOptions = require("./ScrollOptions.js");

module.exports = {
  convertInherit: function convertInherit(obj, ret) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$context = _ref.context,
        context = _ref$context === void 0 ? "The provided value" : _ref$context;

    ScrollOptions.convertInherit(obj, ret, {
      context: context
    });
    {
      var key = "block";
      var value = obj === undefined || obj === null ? undefined : obj[key];

      if (value !== undefined) {
        value = convertScrollLogicalPosition(value, {
          context: context + " has member block that"
        });
        ret[key] = value;
      } else {
        ret[key] = "start";
      }
    }
    {
      var _key = "inline";

      var _value = obj === undefined || obj === null ? undefined : obj[_key];

      if (_value !== undefined) {
        _value = convertScrollLogicalPosition(_value, {
          context: context + " has member inline that"
        });
        ret[_key] = _value;
      } else {
        ret[_key] = "nearest";
      }
    }
  },
  convert: function convert(obj) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref2$context = _ref2.context,
        context = _ref2$context === void 0 ? "The provided value" : _ref2$context;

    if (obj !== undefined && _typeof(obj) !== "object" && typeof obj !== "function") {
      throw new TypeError("".concat(context, " is not an object."));
    }

    var ret = Object.create(null);
    module.exports.convertInherit(obj, ret, {
      context: context
    });
    return ret;
  }
};