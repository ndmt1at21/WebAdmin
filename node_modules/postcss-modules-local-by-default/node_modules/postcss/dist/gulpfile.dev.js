'use strict';

var gulp = require('gulp');

gulp.task('clean', function () {
  var del = require('del');

  return del(['lib/*.js', 'postcss.js', 'build/', 'api/']);
}); // Build

gulp.task('compile', function () {
  var sourcemaps = require('gulp-sourcemaps');

  var changed = require('gulp-changed');

  var babel = require('gulp-babel');

  return gulp.src('lib/*.es6').pipe(changed('lib', {
    extension: '.js'
  })).pipe(sourcemaps.init()).pipe(babel({
    presets: [['env', {
      targets: {
        browsers: 'last 2 version',
        node: 4
      },
      loose: true
    }]],
    plugins: ['add-module-exports', 'precompile-charcodes']
  })).pipe(sourcemaps.write()).pipe(gulp.dest('lib'));
});
gulp.task('build:lib', ['compile'], function () {
  return gulp.src(['lib/*.js', 'lib/*.d.ts']).pipe(gulp.dest('build/lib'));
});
gulp.task('build:package', function () {
  var editor = require('gulp-json-editor');

  return gulp.src('./package.json').pipe(editor(function (json) {
    delete json.babel;
    delete json.scripts;
    delete json.jest;
    delete json.eslintConfig;
    delete json['size-limit'];
    delete json['pre-commit'];
    delete json['lint-staged'];
    delete json.devDependencies;
    return json;
  })).pipe(gulp.dest('build'));
});
gulp.task('build:docs', function () {
  var ignore = require('fs').readFileSync('.npmignore').toString().trim().split(/\n+/).concat(['package.json', '.npmignore', 'lib/*', 'test/*', 'node_modules/**/*', 'docs/api.md', 'docs/plugins.md', 'docs/writing-a-plugin.md']).map(function (i) {
    return '!' + i;
  });

  return gulp.src(['**/*'].concat(ignore)).pipe(gulp.dest('build'));
});
gulp.task('build', function (done) {
  var runSequence = require('run-sequence');

  runSequence('clean', ['build:lib', 'build:docs', 'build:package'], done);
}); // Tests

gulp.task('integration', ['build'], function (done) {
  var postcss = require('./build');

  var real = require('postcss-parser-tests/real');

  real(done, function (css) {
    return postcss.parse(css).toResult({
      map: {
        annotation: false
      }
    });
  });
});
gulp.task('version', ['build:lib'], function () {
  var Processor = require('./lib/processor');

  var instance = new Processor();

  var pkg = require('./package');

  if (pkg.version !== instance.version) {
    throw new Error('Version in Processor is not equal to package.json');
  }
}); // Common

gulp.task('default', ['version', 'integration']);