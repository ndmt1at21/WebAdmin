'use strict';

var path = require('path');

var os = require('os');

var fs = require('fs');

var ini = require('ini');

var isWindows = process.platform === 'win32';

var readRc = function readRc(filePath) {
  try {
    return ini.parse(fs.readFileSync(filePath, 'utf8')).prefix;
  } catch (_) {}
};

var getEnvNpmPrefix = function getEnvNpmPrefix() {
  return Object.keys(process.env).reduce(function (prefix, name) {
    return /^npm_config_prefix$/i.test(name) ? process.env[name] : prefix;
  }, undefined);
};

var getGlobalNpmrc = function getGlobalNpmrc() {
  if (isWindows && process.env.APPDATA) {
    // Hardcoded contents of `c:\Program Files\nodejs\node_modules\npm\npmrc`
    return path.join(process.env.APPDATA, '/npm/etc/npmrc');
  } // Homebrew special case: `$(brew --prefix)/lib/node_modules/npm/npmrc`


  if (process.execPath.includes('/Cellar/node')) {
    var homebrewPrefix = process.execPath.slice(0, process.execPath.indexOf('/Cellar/node'));
    return path.join(homebrewPrefix, '/lib/node_modules/npm/npmrc');
  }

  if (process.execPath.endsWith('/bin/node')) {
    var installDir = path.dirname(path.dirname(process.execPath));
    return path.join(installDir, '/etc/npmrc');
  }
};

var getDefaultNpmPrefix = function getDefaultNpmPrefix() {
  if (isWindows) {
    // `c:\node\node.exe` → `prefix=c:\node\`
    return path.dirname(process.execPath);
  } // `/usr/local/bin/node` → `prefix=/usr/local`


  return path.dirname(path.dirname(process.execPath));
};

var getNpmPrefix = function getNpmPrefix() {
  var envPrefix = getEnvNpmPrefix();

  if (envPrefix) {
    return envPrefix;
  }

  var homePrefix = readRc(path.join(os.homedir(), '.npmrc'));

  if (homePrefix) {
    return homePrefix;
  }

  if (process.env.PREFIX) {
    return process.env.PREFIX;
  }

  var globalPrefix = readRc(getGlobalNpmrc());

  if (globalPrefix) {
    return globalPrefix;
  }

  return getDefaultNpmPrefix();
};

var npmPrefix = path.resolve(getNpmPrefix());

var getYarnWindowsDirectory = function getYarnWindowsDirectory() {
  if (isWindows && process.env.LOCALAPPDATA) {
    var dir = path.join(process.env.LOCALAPPDATA, 'Yarn');

    if (fs.existsSync(dir)) {
      return dir;
    }
  }

  return false;
};

var getYarnPrefix = function getYarnPrefix() {
  if (process.env.PREFIX) {
    return process.env.PREFIX;
  }

  var windowsPrefix = getYarnWindowsDirectory();

  if (windowsPrefix) {
    return windowsPrefix;
  }

  var configPrefix = path.join(os.homedir(), '.config/yarn');

  if (fs.existsSync(configPrefix)) {
    return configPrefix;
  }

  var homePrefix = path.join(os.homedir(), '.yarn-config');

  if (fs.existsSync(homePrefix)) {
    return homePrefix;
  } // Yarn supports the npm conventions but the inverse is not true


  return npmPrefix;
};

exports.npm = {};
exports.npm.prefix = npmPrefix;
exports.npm.packages = path.join(npmPrefix, isWindows ? 'node_modules' : 'lib/node_modules');
exports.npm.binaries = isWindows ? npmPrefix : path.join(npmPrefix, 'bin');
var yarnPrefix = path.resolve(getYarnPrefix());
exports.yarn = {};
exports.yarn.prefix = yarnPrefix;
exports.yarn.packages = path.join(yarnPrefix, getYarnWindowsDirectory() ? 'Data/global/node_modules' : 'global/node_modules');
exports.yarn.binaries = path.join(exports.yarn.packages, '.bin');