'use strict';

var deferToConnect = require('defer-to-connect');

module.exports = function (request) {
  var timings = {
    start: Date.now(),
    socket: null,
    lookup: null,
    connect: null,
    upload: null,
    response: null,
    end: null,
    error: null,
    phases: {
      wait: null,
      dns: null,
      tcp: null,
      request: null,
      firstByte: null,
      download: null,
      total: null
    }
  };

  var handleError = function handleError(origin) {
    var emit = origin.emit.bind(origin);

    origin.emit = function (event) {
      // Catches the `error` event
      if (event === 'error') {
        timings.error = Date.now();
        timings.phases.total = timings.error - timings.start;
        origin.emit = emit;
      } // Saves the original behavior


      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return emit.apply(void 0, [event].concat(args));
    };
  };

  var uploadFinished = false;

  var onUpload = function onUpload() {
    timings.upload = Date.now();
    timings.phases.request = timings.upload - timings.connect;
  };

  handleError(request);
  request.once('socket', function (socket) {
    timings.socket = Date.now();
    timings.phases.wait = timings.socket - timings.start;

    var lookupListener = function lookupListener() {
      timings.lookup = Date.now();
      timings.phases.dns = timings.lookup - timings.socket;
    };

    socket.once('lookup', lookupListener);
    deferToConnect(socket, function () {
      timings.connect = Date.now();

      if (timings.lookup === null) {
        socket.removeListener('lookup', lookupListener);
        timings.lookup = timings.connect;
        timings.phases.dns = timings.lookup - timings.socket;
      }

      timings.phases.tcp = timings.connect - timings.lookup;

      if (uploadFinished && !timings.upload) {
        onUpload();
      }
    });
  });
  request.once('finish', function () {
    uploadFinished = true;

    if (timings.connect) {
      onUpload();
    }
  });
  request.once('response', function (response) {
    timings.response = Date.now();
    timings.phases.firstByte = timings.response - timings.upload;
    handleError(response);
    response.once('end', function () {
      timings.end = Date.now();
      timings.phases.download = timings.end - timings.response;
      timings.phases.total = timings.end - timings.start;
    });
  });
  return timings;
};