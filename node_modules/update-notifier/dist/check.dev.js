/* eslint-disable unicorn/no-process-exit */
'use strict';

var updateNotifier = require('.');

var options = JSON.parse(process.argv[2]);
updateNotifier = new updateNotifier.UpdateNotifier(options);
(function _callee() {
  var update;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          // Exit process when offline
          setTimeout(process.exit, 1000 * 30);
          _context.next = 3;
          return regeneratorRuntime.awrap(updateNotifier.fetchInfo());

        case 3:
          update = _context.sent;
          // Only update the last update check time on success
          updateNotifier.config.set('lastUpdateCheck', Date.now());

          if (update.type && update.type !== 'latest') {
            updateNotifier.config.set('update', update);
          } // Call process exit explicitly to terminate the child process,
          // otherwise the child process will run forever, according to the Node.js docs


          process.exit();

        case 7:
        case "end":
          return _context.stop();
      }
    }
  });
})()["catch"](function (error) {
  console.error(error);
  process.exit(1);
});