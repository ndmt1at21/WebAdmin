"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var hasOwnProperty = Object.prototype.hasOwnProperty;
var shape = {
  generic: true,
  types: appendOrAssign,
  atrules: {
    prelude: appendOrAssignOrNull,
    descriptors: appendOrAssignOrNull
  },
  properties: appendOrAssign,
  parseContext: assign,
  scope: deepAssign,
  atrule: ['parse'],
  pseudo: ['parse'],
  node: ['name', 'structure', 'parse', 'generate', 'walkContext']
};

function isObject(value) {
  return value && value.constructor === Object;
}

function copy(value) {
  return isObject(value) ? Object.assign({}, value) : value;
}

function assign(dest, src) {
  return Object.assign(dest, src);
}

function deepAssign(dest, src) {
  for (var key in src) {
    if (hasOwnProperty.call(src, key)) {
      if (isObject(dest[key])) {
        deepAssign(dest[key], copy(src[key]));
      } else {
        dest[key] = copy(src[key]);
      }
    }
  }

  return dest;
}

function append(a, b) {
  if (typeof b === 'string' && /^\s*\|/.test(b)) {
    return typeof a === 'string' ? a + b : b.replace(/^\s*\|\s*/, '');
  }

  return b || null;
}

function appendOrAssign(a, b) {
  if (typeof b === 'string') {
    return append(a, b);
  }

  var result = Object.assign({}, a);

  for (var key in b) {
    if (hasOwnProperty.call(b, key)) {
      result[key] = append(hasOwnProperty.call(a, key) ? a[key] : undefined, b[key]);
    }
  }

  return result;
}

function appendOrAssignOrNull(a, b) {
  var result = appendOrAssign(a, b);
  return !isObject(result) || Object.keys(result).length ? result : null;
}

function mix(dest, src, shape) {
  for (var key in shape) {
    if (hasOwnProperty.call(shape, key) === false) {
      continue;
    }

    if (shape[key] === true) {
      if (key in src) {
        if (hasOwnProperty.call(src, key)) {
          dest[key] = copy(src[key]);
        }
      }
    } else if (shape[key]) {
      if (typeof shape[key] === 'function') {
        var fn = shape[key];
        dest[key] = fn({}, dest[key]);
        dest[key] = fn(dest[key] || {}, src[key]);
      } else if (isObject(shape[key])) {
        var result = {};

        for (var name in dest[key]) {
          result[name] = mix({}, dest[key][name], shape[key]);
        }

        for (var _name in src[key]) {
          result[_name] = mix(result[_name] || {}, src[key][_name], shape[key]);
        }

        dest[key] = result;
      } else if (Array.isArray(shape[key])) {
        var res = {};
        var innerShape = shape[key].reduce(function (s, k) {
          s[k] = true;
          return s;
        }, {});

        for (var _i = 0, _Object$entries = Object.entries(dest[key] || {}); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              _name3 = _Object$entries$_i[0],
              value = _Object$entries$_i[1];

          res[_name3] = {};

          if (value) {
            mix(res[_name3], value, innerShape);
          }
        }

        for (var _name2 in src[key]) {
          if (hasOwnProperty.call(src[key], _name2)) {
            if (!res[_name2]) {
              res[_name2] = {};
            }

            if (src[key] && src[key][_name2]) {
              mix(res[_name2], src[key][_name2], innerShape);
            }
          }
        }

        dest[key] = res;
      }
    }
  }

  return dest;
}

module.exports = function (dest, src) {
  return mix(dest, src, shape);
};