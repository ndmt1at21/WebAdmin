'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require('fs');

var path = require('path');

var EE = require('events').EventEmitter;

var Minimatch = require('minimatch').Minimatch;

var Walker =
/*#__PURE__*/
function (_EE) {
  _inherits(Walker, _EE);

  function Walker(opts) {
    var _this;

    _classCallCheck(this, Walker);

    opts = opts || {};
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Walker).call(this, opts));
    _this.path = opts.path || process.cwd();
    _this.basename = path.basename(_this.path);
    _this.ignoreFiles = opts.ignoreFiles || ['.ignore'];
    _this.ignoreRules = {};
    _this.parent = opts.parent || null;
    _this.includeEmpty = !!opts.includeEmpty;
    _this.root = _this.parent ? _this.parent.root : _this.path;
    _this.follow = !!opts.follow;
    _this.result = _this.parent ? _this.parent.result : new Set();
    _this.entries = null;
    _this.sawError = false;
    return _this;
  }

  _createClass(Walker, [{
    key: "sort",
    value: function sort(a, b) {
      return a.localeCompare(b);
    }
  }, {
    key: "emit",
    value: function emit(ev, data) {
      var ret = false;

      if (!(this.sawError && ev === 'error')) {
        if (ev === 'error') this.sawError = true;else if (ev === 'done' && !this.parent) {
          data = Array.from(data).map(function (e) {
            return /^@/.test(e) ? "./".concat(e) : e;
          }).sort(this.sort);
          this.result = data;
        }
        if (ev === 'error' && this.parent) ret = this.parent.emit('error', data);else ret = _get(_getPrototypeOf(Walker.prototype), "emit", this).call(this, ev, data);
      }

      return ret;
    }
  }, {
    key: "start",
    value: function start() {
      var _this2 = this;

      fs.readdir(this.path, function (er, entries) {
        return er ? _this2.emit('error', er) : _this2.onReaddir(entries);
      });
      return this;
    }
  }, {
    key: "isIgnoreFile",
    value: function isIgnoreFile(e) {
      return e !== "." && e !== ".." && -1 !== this.ignoreFiles.indexOf(e);
    }
  }, {
    key: "onReaddir",
    value: function onReaddir(entries) {
      var _this3 = this;

      this.entries = entries;

      if (entries.length === 0) {
        if (this.includeEmpty) this.result.add(this.path.substr(this.root.length + 1));
        this.emit('done', this.result);
      } else {
        var hasIg = this.entries.some(function (e) {
          return _this3.isIgnoreFile(e);
        });
        if (hasIg) this.addIgnoreFiles();else this.filterEntries();
      }
    }
  }, {
    key: "addIgnoreFiles",
    value: function addIgnoreFiles() {
      var _this4 = this;

      var newIg = this.entries.filter(function (e) {
        return _this4.isIgnoreFile(e);
      });
      var igCount = newIg.length;

      var then = function then(_) {
        if (--igCount === 0) _this4.filterEntries();
      };

      newIg.forEach(function (e) {
        return _this4.addIgnoreFile(e, then);
      });
    }
  }, {
    key: "addIgnoreFile",
    value: function addIgnoreFile(file, then) {
      var _this5 = this;

      var ig = path.resolve(this.path, file);
      fs.readFile(ig, 'utf8', function (er, data) {
        return er ? _this5.emit('error', er) : _this5.onReadIgnoreFile(file, data, then);
      });
    }
  }, {
    key: "onReadIgnoreFile",
    value: function onReadIgnoreFile(file, data, then) {
      var mmopt = {
        matchBase: true,
        dot: true,
        flipNegate: true,
        nocase: true
      };
      var rules = data.split(/\r?\n/).filter(function (line) {
        return !/^#|^$/.test(line.trim());
      }).map(function (r) {
        return new Minimatch(r, mmopt);
      });
      this.ignoreRules[file] = rules;
      then();
    }
  }, {
    key: "filterEntries",
    value: function filterEntries() {
      var _this6 = this;

      // at this point we either have ignore rules, or just inheriting
      // this exclusion is at the point where we know the list of
      // entries in the dir, but don't know what they are.  since
      // some of them *might* be directories, we have to run the
      // match in dir-mode as well, so that we'll pick up partials
      // of files that will be included later.  Anything included
      // at this point will be checked again later once we know
      // what it is.
      var filtered = this.entries.map(function (entry) {
        // at this point, we don't know if it's a dir or not.
        var passFile = _this6.filterEntry(entry);

        var passDir = _this6.filterEntry(entry, true);

        return passFile || passDir ? [entry, passFile, passDir] : false;
      }).filter(function (e) {
        return e;
      }); // now we stat them all
      // if it's a dir, and passes as a dir, then recurse
      // if it's not a dir, but passes as a file, add to set

      var entryCount = filtered.length;

      if (entryCount === 0) {
        this.emit('done', this.result);
      } else {
        var then = function then(_) {
          if (--entryCount === 0) _this6.emit('done', _this6.result);
        };

        filtered.forEach(function (filt) {
          var entry = filt[0];
          var file = filt[1];
          var dir = filt[2];

          _this6.stat(entry, file, dir, then);
        });
      }
    }
  }, {
    key: "onstat",
    value: function onstat(st, entry, file, dir, then) {
      var abs = this.path + '/' + entry;

      if (!st.isDirectory()) {
        if (file) this.result.add(abs.substr(this.root.length + 1));
        then();
      } else {
        // is a directory
        if (dir) this.walker(entry, then);else then();
      }
    }
  }, {
    key: "stat",
    value: function stat(entry, file, dir, then) {
      var _this7 = this;

      var abs = this.path + '/' + entry;
      fs[this.follow ? 'stat' : 'lstat'](abs, function (er, st) {
        if (er) _this7.emit('error', er);else _this7.onstat(st, entry, file, dir, then);
      });
    }
  }, {
    key: "walkerOpt",
    value: function walkerOpt(entry) {
      return {
        path: this.path + '/' + entry,
        parent: this,
        ignoreFiles: this.ignoreFiles,
        follow: this.follow,
        includeEmpty: this.includeEmpty
      };
    }
  }, {
    key: "walker",
    value: function walker(entry, then) {
      new Walker(this.walkerOpt(entry)).on('done', then).start();
    }
  }, {
    key: "filterEntry",
    value: function filterEntry(entry, partial) {
      var _this8 = this;

      var included = true; // this = /a/b/c
      // entry = d
      // parent /a/b sees c/d

      if (this.parent && this.parent.filterEntry) {
        var pt = this.basename + "/" + entry;
        included = this.parent.filterEntry(pt, partial);
      }

      this.ignoreFiles.forEach(function (f) {
        if (_this8.ignoreRules[f]) {
          _this8.ignoreRules[f].forEach(function (rule) {
            // negation means inclusion
            // so if it's negated, and already included, no need to check
            // likewise if it's neither negated nor included
            if (rule.negate !== included) {
              // first, match against /foo/bar
              // then, against foo/bar
              // then, in the case of partials, match with a /
              var match = rule.match('/' + entry) || rule.match(entry) || !!partial && (rule.match('/' + entry + '/') || rule.match(entry + '/')) || !!partial && rule.negate && (rule.match('/' + entry, true) || rule.match(entry, true));
              if (match) included = rule.negate;
            }
          });
        }
      });
      return included;
    }
  }]);

  return Walker;
}(EE);

var WalkerSync =
/*#__PURE__*/
function (_Walker) {
  _inherits(WalkerSync, _Walker);

  function WalkerSync(opt) {
    _classCallCheck(this, WalkerSync);

    return _possibleConstructorReturn(this, _getPrototypeOf(WalkerSync).call(this, opt));
  }

  _createClass(WalkerSync, [{
    key: "start",
    value: function start() {
      this.onReaddir(fs.readdirSync(this.path));
      return this;
    }
  }, {
    key: "addIgnoreFile",
    value: function addIgnoreFile(file, then) {
      var ig = path.resolve(this.path, file);
      this.onReadIgnoreFile(file, fs.readFileSync(ig, 'utf8'), then);
    }
  }, {
    key: "stat",
    value: function stat(entry, file, dir, then) {
      var abs = this.path + '/' + entry;
      var st = fs[this.follow ? 'statSync' : 'lstatSync'](abs);
      this.onstat(st, entry, file, dir, then);
    }
  }, {
    key: "walker",
    value: function walker(entry, then) {
      new WalkerSync(this.walkerOpt(entry)).start();
      then();
    }
  }]);

  return WalkerSync;
}(Walker);

var walk = function walk(options, callback) {
  var p = new Promise(function (resolve, reject) {
    new Walker(options).on('done', resolve).on('error', reject).start();
  });
  return callback ? p.then(function (res) {
    return callback(null, res);
  }, callback) : p;
};

var walkSync = function walkSync(options) {
  return new WalkerSync(options).start().result;
};

module.exports = walk;
walk.sync = walkSync;
walk.Walker = Walker;
walk.WalkerSync = WalkerSync;