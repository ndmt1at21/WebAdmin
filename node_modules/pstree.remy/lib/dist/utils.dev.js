"use strict";

var spawn = require('child_process').spawn;

module.exports = {
  tree: tree,
  pidsForTree: pidsForTree,
  getStat: getStat
};

function getStat() {
  return new Promise(function (resolve) {
    var command = "ls /proc | grep -E '^[0-9]+$' | xargs -I{} cat /proc/{}/stat";
    var spawned = spawn('sh', ['-c', command], {
      stdio: ['pipe', 'pipe', 'pipe']
    });
    var res = '';
    spawned.stdout.on('data', function (data) {
      return res += data;
    });
    spawned.on('close', function () {
      return resolve(res);
    });
  });
}

function template(s) {
  var stat = null; // 'pid', 'comm', 'state', 'ppid', 'pgrp'
  // %d     (%s)    %c       %d      %d

  s.replace(/(\d+) \((.*?)\)\s(.+?)\s(\d+)\s/g, function (all, PID, COMMAND, STAT, PPID) {
    stat = {
      PID: PID,
      COMMAND: COMMAND,
      PPID: PPID,
      STAT: STAT
    };
  });
  return stat;
}

function tree(stats) {
  var processes = stats.split('\n').map(template).filter(Boolean);
  return processes;
}

function pidsForTree(tree, pid) {
  if (typeof pid === 'number') {
    pid = pid.toString();
  }

  var parents = [pid];
  var pids = [];
  tree.forEach(function (proc) {
    if (parents.indexOf(proc.PPID) !== -1) {
      parents.push(proc.PID);
      pids.push(proc);
    }
  });
  return pids;
}