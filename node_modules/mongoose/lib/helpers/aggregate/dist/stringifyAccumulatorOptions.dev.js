'use strict';

module.exports = function stringifyAccumulatorOptions(pipeline) {
  if (!Array.isArray(pipeline)) {
    return;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = pipeline[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var stage = _step.value;

      if (stage == null) {
        continue;
      }

      var canHaveAccumulator = stage.$group || stage.$bucket || stage.$bucketAuto;

      if (canHaveAccumulator != null) {
        for (var _i = 0, _Object$keys = Object.keys(canHaveAccumulator); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          handleAccumulator(canHaveAccumulator[key]);
        }
      }

      if (stage.$facet != null) {
        for (var _i2 = 0, _Object$keys2 = Object.keys(stage.$facet); _i2 < _Object$keys2.length; _i2++) {
          var _key = _Object$keys2[_i2];
          stringifyAccumulatorOptions(stage.$facet[_key]);
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

function handleAccumulator(operator) {
  if (operator == null || operator.$accumulator == null) {
    return;
  }

  for (var _i3 = 0, _arr = ['init', 'accumulate', 'merge', 'finalize']; _i3 < _arr.length; _i3++) {
    var key = _arr[_i3];

    if (typeof operator.$accumulator[key] === 'function') {
      operator.$accumulator[key] = String(operator.$accumulator[key]);
    }
  }
}