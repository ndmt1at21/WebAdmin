"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var bcrypt = require('../bcrypt');

module.exports = _defineProperty({
  test_salt_length: function test_salt_length(assert) {
    var salt = bcrypt.genSaltSync(10);
    assert.strictEqual(29, salt.length, "Salt isn't the correct length.");
    var split_salt = salt.split('$');
    assert.strictEqual(split_salt[1], '2b');
    assert.strictEqual(split_salt[2], '10');
    assert.done();
  },
  test_salt_no_params: function test_salt_no_params(assert) {
    // same as test_verify_salt except using default rounds of 10
    var salt = bcrypt.genSaltSync();
    var split_salt = salt.split('$');
    assert.strictEqual(split_salt[1], '2b');
    assert.strictEqual(split_salt[2], '10');
    assert.done();
  },
  test_salt_rounds_is_string_number: function test_salt_rounds_is_string_number(assert) {
    assert["throws"](function () {
      bcrypt.genSaltSync('10');
    }, "Should throw an Error. No params.");
    assert.done();
  },
  test_salt_rounds_is_NaN: function test_salt_rounds_is_NaN(assert) {
    assert["throws"](function () {
      bcrypt.genSaltSync('b');
    }, "Should throw an Error. gen_salt requires rounds to be a number.");
    assert.done();
  },
  test_salt_minor_a: function test_salt_minor_a(assert) {
    var salt = bcrypt.genSaltSync(10, 'a');
    assert.strictEqual(29, salt.length, "Salt isn't the correct length.");
    var split_salt = salt.split('$');
    assert.strictEqual(split_salt[1], '2a');
    assert.strictEqual(split_salt[2], '10');
    assert.done();
  },
  test_salt_minor_b: function test_salt_minor_b(assert) {
    var salt = bcrypt.genSaltSync(10, 'b');
    assert.strictEqual(29, salt.length, "Salt isn't the correct length.");
    var split_salt = salt.split('$');
    assert.strictEqual(split_salt[1], '2b');
    assert.strictEqual(split_salt[2], '10');
    assert.done();
  },
  test_hash: function test_hash(assert) {
    assert.ok(bcrypt.hashSync('password', bcrypt.genSaltSync(10)), "Shouldn't throw an Error.");
    assert.done();
  },
  test_hash_rounds: function test_hash_rounds(assert) {
    var hash = bcrypt.hashSync('password', 8);
    assert.strictEqual(bcrypt.getRounds(hash), 8, "Number of rounds should equal 8.");
    assert.done();
  },
  test_hash_empty_string: function test_hash_empty_string(assert) {
    assert.ok(bcrypt.hashSync('', bcrypt.genSaltSync(10)), "Shouldn't throw an Error.");
    assert["throws"](function () {
      bcrypt.hashSync('password', '');
    }, "Should have thrown an Error related to the salt.");
    assert["throws"](function () {
      bcrypt.hashSync('', '');
    }, "Should have thrown an Error related to the salt.");
    assert.done();
  },
  test_hash_pw_no_params: function test_hash_pw_no_params(assert) {
    assert["throws"](function () {
      bcrypt.hashSync();
    }, "Should throw an Error. No Params.");
    assert.done();
  },
  test_hash_pw_one_param: function test_hash_pw_one_param(assert) {
    assert["throws"](function () {
      bcrypt.hashSync('password');
    }, "Should throw an Error. No salt.");
    assert.done();
  },
  test_hash_pw_not_hash_str: function test_hash_pw_not_hash_str(assert) {
    assert["throws"](function () {
      bcrypt.hashSync('password', {});
    }, "Should throw an Error. hash should be a string or number.");
    assert.done();
  },
  test_hash_salt_validity: function test_hash_salt_validity(assert) {
    assert.expect(2);
    assert.ok(bcrypt.hashSync('password', '$2a$10$somesaltyvaluertsetrse'));
    assert["throws"](function () {
      bcrypt.hashSync('password', 'some$value');
    });
    assert.done();
  },
  test_verify_salt: function test_verify_salt(assert) {
    var salt = bcrypt.genSaltSync(10);
    var split_salt = salt.split('$');
    assert.strictEqual(split_salt[1], '2b');
    assert.strictEqual(split_salt[2], '10');
    assert.done();
  },
  test_verify_salt_min_rounds: function test_verify_salt_min_rounds(assert) {
    var salt = bcrypt.genSaltSync(1);
    var split_salt = salt.split('$');
    assert.strictEqual(split_salt[1], '2b');
    assert.strictEqual(split_salt[2], '04');
    assert.done();
  },
  test_verify_salt_max_rounds: function test_verify_salt_max_rounds(assert) {
    var salt = bcrypt.genSaltSync(100);
    var split_salt = salt.split('$');
    assert.strictEqual(split_salt[1], '2b');
    assert.strictEqual(split_salt[2], '31');
    assert.done();
  },
  test_hash_compare: function test_hash_compare(assert) {
    var salt = bcrypt.genSaltSync(10);
    assert.strictEqual(29, salt.length, "Salt isn't the correct length.");
    var hash = bcrypt.hashSync("test", salt);
    assert.ok(bcrypt.compareSync("test", hash), "These hashes should be equal.");
    assert.ok(!bcrypt.compareSync("blah", hash), "These hashes should not be equal.");
    assert.done();
  },
  test_hash_compare_empty_strings: function test_hash_compare_empty_strings(assert) {
    assert.ok(!bcrypt.compareSync("", "password"), "These hashes should not be equal.");
    assert.ok(!bcrypt.compareSync("", ""), "These hashes should not be equal.");
    assert.ok(!bcrypt.compareSync("password", ""), "These hashes should not be equal.");
    assert.done();
  },
  test_hash_compare_invalid_strings: function test_hash_compare_invalid_strings(assert) {
    var fullString = 'envy1362987212538';
    var hash = '$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGhM1A8W9iqaG3vv1BD7WC';
    var wut = ':';
    bcrypt.compareSync(fullString, hash, function (err, res) {
      assert.ok(res);
    });
    bcrypt.compareSync(fullString, wut, function (err, res) {
      assert.ok(!res);
    });
    assert.done();
  },
  test_getRounds: function test_getRounds(assert) {
    var hash = bcrypt.hashSync("test", bcrypt.genSaltSync(9));
    assert.strictEqual(9, bcrypt.getRounds(hash), "getRounds can't extract rounds");
    assert.done();
  }
}, "test_getRounds", function test_getRounds(assert) {
  var hash = bcrypt.hashSync("test", bcrypt.genSaltSync(9));
  assert.strictEqual(9, bcrypt.getRounds(hash), "getRounds can't extract rounds");
  assert["throws"](function () {
    bcrypt.getRounds('');
  }, "Must pass a valid hash to getRounds");
  assert.done();
});