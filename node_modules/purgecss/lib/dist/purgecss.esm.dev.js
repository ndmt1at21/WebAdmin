"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeExtractorSelectors = y;
exports.setOptions = p;
exports.defaultOptions = exports.PurgeCSS = exports["default"] = void 0;

var _postcss = require("postcss");

var _postcssSelectorParser = _interopRequireDefault(require("postcss-selector-parser"));

var _fs = require("fs");

var _util = require("util");

var _glob = _interopRequireDefault(require("glob"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var c = {
  css: [],
  content: [],
  defaultExtractor: function defaultExtractor(t) {
    return t.match(/[A-Za-z0-9_-]+/g) || [];
  },
  extractors: [],
  fontFace: !1,
  keyframes: !1,
  rejected: !1,
  stdin: !1,
  stdout: !1,
  variables: !1,
  whitelist: [],
  whitelistPatterns: [],
  whitelistPatternsChildren: []
},
    u = ["*", "::-webkit-scrollbar", "::selection", ":root", "::before", "::after"];
exports.defaultOptions = c;

var h = function h(t) {
  _classCallCheck(this, h);

  this.nodes = [], this.isUsed = !1, this.value = t;
};

var l =
/*#__PURE__*/
function () {
  function l() {
    _classCallCheck(this, l);

    this.nodes = new Map(), this.usedVariables = new Set();
  }

  _createClass(l, [{
    key: "addVariable",
    value: function addVariable(t) {
      var e = t.prop;

      if (!this.nodes.has(e)) {
        var _s = new h(t);

        this.nodes.set(e, _s);
      }
    }
  }, {
    key: "addVariableUsage",
    value: function addVariableUsage(t, e) {
      var s = t.prop,
          r = this.nodes.get(s);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = e[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _t = _step.value;
          var _e = _t[1];

          if (this.nodes.has(_e)) {
            var _t2 = this.nodes.get(_e);

            null == r || r.nodes.push(_t2);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "addVariableUsageInProperties",
    value: function addVariableUsageInProperties(t) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = t[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _e2 = _step2.value;
          var _t3 = _e2[1];
          this.usedVariables.add(_t3);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: "setAsUsed",
    value: function setAsUsed(t) {
      var e = [this.nodes.get(t)];

      for (; 0 !== e.length;) {
        var _t4 = e.pop();

        _t4 && !_t4.isUsed && (_t4.isUsed = !0, e.push.apply(e, _toConsumableArray(_t4.nodes)));
      }
    }
  }, {
    key: "removeUnused",
    value: function removeUnused() {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.usedVariables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _t5 = _step3.value;
          this.setAsUsed(_t5);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = this.nodes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var _step4$value = _slicedToArray(_step4.value, 2),
              _t6 = _step4$value[1];

          _t6.isUsed || _t6.value.remove();
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  }]);

  return l;
}();

function d(t, e) {
  e && e.forEach(t.add, t);
}

var f =
/*#__PURE__*/
function () {
  function f(t) {
    _classCallCheck(this, f);

    this.undetermined = new Set(), this.attrNames = new Set(), this.attrValues = new Set(), this.classes = new Set(), this.ids = new Set(), this.tags = new Set(), this.merge(t);
  }

  _createClass(f, [{
    key: "merge",
    value: function merge(t) {
      return Array.isArray(t) ? d(this.undetermined, t) : t instanceof f ? (d(this.undetermined, t.undetermined), d(this.attrNames, t.attrNames), d(this.attrValues, t.attrValues), d(this.classes, t.classes), d(this.ids, t.ids), d(this.tags, t.tags)) : (d(this.undetermined, t.undetermined), t.attributes && (d(this.attrNames, t.attributes.names), d(this.attrValues, t.attributes.values)), d(this.classes, t.classes), d(this.ids, t.ids), d(this.tags, t.tags)), this;
    }
  }, {
    key: "hasAttrName",
    value: function hasAttrName(t) {
      return this.attrNames.has(t) || this.undetermined.has(t);
    }
  }, {
    key: "someAttrValue",
    value: function someAttrValue(t) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this.attrValues[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _e3 = _step5.value;
          if (t(_e3)) return !0;
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = this.undetermined[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var _e4 = _step6.value;
          if (t(_e4)) return !0;
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      return !1;
    }
  }, {
    key: "hasAttrPrefix",
    value: function hasAttrPrefix(t) {
      return this.someAttrValue(function (e) {
        return e.startsWith(t);
      });
    }
  }, {
    key: "hasAttrSuffix",
    value: function hasAttrSuffix(t) {
      return this.someAttrValue(function (e) {
        return e.endsWith(t);
      });
    }
  }, {
    key: "hasAttrSubstr",
    value: function hasAttrSubstr(t) {
      return this.someAttrValue(function (e) {
        return e.includes(t);
      });
    }
  }, {
    key: "hasAttrValue",
    value: function hasAttrValue(t) {
      return this.attrValues.has(t) || this.undetermined.has(t);
    }
  }, {
    key: "hasClass",
    value: function hasClass(t) {
      return this.classes.has(t) || this.undetermined.has(t);
    }
  }, {
    key: "hasId",
    value: function hasId(t) {
      return this.ids.has(t) || this.undetermined.has(t);
    }
  }, {
    key: "hasTag",
    value: function hasTag(t) {
      return this.tags.has(t) || this.undetermined.has(t);
    }
  }]);

  return f;
}();

var m = {
  access: (0, _util.promisify)(_fs.access),
  readFile: (0, _util.promisify)(_fs.readFile)
};

function p() {
  var t,
      e,
      _s2,
      _args = arguments;

  return regeneratorRuntime.async(function p$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          t = _args.length > 0 && _args[0] !== undefined ? _args[0] : "purgecss.config.js";
          _context.prev = 1;
          _s2 = _path["default"].join(process.cwd(), t);
          _context.next = 5;
          return regeneratorRuntime.awrap(Promise.resolve().then(function () {
            return _interopRequireWildcard(require("".concat(_s2)));
          }));

        case 5:
          e = _context.sent;
          _context.next = 11;
          break;

        case 8:
          _context.prev = 8;
          _context.t0 = _context["catch"](1);
          throw new Error("Error loading the config file ".concat(_context.t0.message));

        case 11:
          return _context.abrupt("return", _objectSpread({}, c, {}, e));

        case 12:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[1, 8]]);
}

function g(t, e) {
  return regeneratorRuntime.async(function g$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.t0 = f;
          _context2.next = 3;
          return regeneratorRuntime.awrap(e(t));

        case 3:
          _context2.t1 = _context2.sent;
          return _context2.abrupt("return", new _context2.t0(_context2.t1));

        case 5:
        case "end":
          return _context2.stop();
      }
    }
  });
}

function v(t, e) {
  switch (e) {
    case "next":
      return t.text.includes("purgecss ignore");

    case "start":
      return t.text.includes("purgecss start ignore");

    case "end":
      return t.text.includes("purgecss end ignore");
  }
}

function y() {
  var e = new f([]);

  for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {
    t[_key] = arguments[_key];
  }

  return t.forEach(e.merge, e), e;
}

function w(t) {
  return t.replace(/(^["'])|(["']$)/g, "");
}

function S(t, e) {
  if (!e.hasAttrName(t.attribute)) return !1;
  if (void 0 === t.value) return !0;

  switch (t.operator) {
    case "$=":
      return e.hasAttrSuffix(t.value);

    case "~=":
    case "*=":
      return e.hasAttrSubstr(t.value);

    case "=":
      return e.hasAttrValue(t.value);

    case "|=":
    case "^=":
      return e.hasAttrPrefix(t.value);

    default:
      return !0;
  }
}

function b(t, e) {
  return e.hasId(t.value);
}

function F(t, e) {
  return e.hasTag(t.value);
}

var x =
/*#__PURE__*/
function () {
  function x() {
    _classCallCheck(this, x);

    this.ignore = !1, this.atRules = {
      fontFace: [],
      keyframes: []
    }, this.usedAnimations = new Set(), this.usedFontFaces = new Set(), this.selectorsRemoved = new Set(), this.variablesStructure = new l(), this.options = c;
  }

  _createClass(x, [{
    key: "collectDeclarationsData",
    value: function collectDeclarationsData(t) {
      var e = t.prop,
          s = t.value;

      if (this.options.variables) {
        var _r = function (t, e) {
          var s = [];
          return t.replace(e, function () {
            var e = arguments,
                r = Array.prototype.slice.call(e, 0, -2);
            return r.input = e[e.length - 1], r.index = e[e.length - 2], s.push(r), t;
          }), s;
        }(s, /var\((.+?)[,)]/g);

        e.startsWith("--") ? (this.variablesStructure.addVariable(t), _r.length > 0 && this.variablesStructure.addVariableUsage(t, _r)) : _r.length > 0 && this.variablesStructure.addVariableUsageInProperties(_r);
      }

      if (!this.options.keyframes || "animation" !== e && "animation-name" !== e) {
        if (this.options.fontFace) {
          if ("font-family" === e) {
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
              for (var _iterator7 = s.split(",")[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var _t7 = _step7.value;

                var _e5 = w(_t7.trim());

                this.usedFontFaces.add(_e5);
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                  _iterator7["return"]();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }
          }
        } else ;
      } else {
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = s.split(/[\s,]+/)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var _t8 = _step8.value;
            this.usedAnimations.add(_t8);
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
              _iterator8["return"]();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }
      }
    }
  }, {
    key: "getFileExtractor",
    value: function getFileExtractor(t, e) {
      var s = e.find(function (e) {
        return e.extensions.find(function (e) {
          return t.endsWith(e);
        });
      });
      return void 0 === s ? this.options.defaultExtractor : s.extractor;
    }
  }, {
    key: "extractSelectorsFromFiles",
    value: function extractSelectorsFromFiles(t, e) {
      var s, _iteratorNormalCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, _r2, _t9, _iteratorNormalCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, _r3, _t10, _i2, _n2;

      return regeneratorRuntime.async(function extractSelectorsFromFiles$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              s = new f([]);
              _iteratorNormalCompletion9 = true;
              _didIteratorError9 = false;
              _iteratorError9 = undefined;
              _context3.prev = 4;
              _iterator9 = t[Symbol.iterator]();

            case 6:
              if (_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done) {
                _context3.next = 53;
                break;
              }

              _r2 = _step9.value;
              _t9 = [];
              _context3.prev = 9;
              _context3.next = 12;
              return regeneratorRuntime.awrap(m.access(_r2, _fs.constants.F_OK));

            case 12:
              _t9.push(_r2);

              _context3.next = 18;
              break;

            case 15:
              _context3.prev = 15;
              _context3.t0 = _context3["catch"](9);
              _t9 = _glob["default"].sync(_r2, {
                nodir: !0
              });

            case 18:
              _iteratorNormalCompletion10 = true;
              _didIteratorError10 = false;
              _iteratorError10 = undefined;
              _context3.prev = 21;
              _iterator10 = _t9[Symbol.iterator]();

            case 23:
              if (_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done) {
                _context3.next = 36;
                break;
              }

              _r3 = _step10.value;
              _context3.next = 27;
              return regeneratorRuntime.awrap(m.readFile(_r3, "utf-8"));

            case 27:
              _t10 = _context3.sent;
              _i2 = this.getFileExtractor(_r3, e);
              _context3.next = 31;
              return regeneratorRuntime.awrap(g(_t10, _i2));

            case 31:
              _n2 = _context3.sent;
              s.merge(_n2);

            case 33:
              _iteratorNormalCompletion10 = true;
              _context3.next = 23;
              break;

            case 36:
              _context3.next = 42;
              break;

            case 38:
              _context3.prev = 38;
              _context3.t1 = _context3["catch"](21);
              _didIteratorError10 = true;
              _iteratorError10 = _context3.t1;

            case 42:
              _context3.prev = 42;
              _context3.prev = 43;

              if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                _iterator10["return"]();
              }

            case 45:
              _context3.prev = 45;

              if (!_didIteratorError10) {
                _context3.next = 48;
                break;
              }

              throw _iteratorError10;

            case 48:
              return _context3.finish(45);

            case 49:
              return _context3.finish(42);

            case 50:
              _iteratorNormalCompletion9 = true;
              _context3.next = 6;
              break;

            case 53:
              _context3.next = 59;
              break;

            case 55:
              _context3.prev = 55;
              _context3.t2 = _context3["catch"](4);
              _didIteratorError9 = true;
              _iteratorError9 = _context3.t2;

            case 59:
              _context3.prev = 59;
              _context3.prev = 60;

              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }

            case 62:
              _context3.prev = 62;

              if (!_didIteratorError9) {
                _context3.next = 65;
                break;
              }

              throw _iteratorError9;

            case 65:
              return _context3.finish(62);

            case 66:
              return _context3.finish(59);

            case 67:
              return _context3.abrupt("return", s);

            case 68:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, [[4, 55, 59, 67], [9, 15], [21, 38, 42, 50], [43,, 45, 49], [60,, 62, 66]]);
    }
  }, {
    key: "extractSelectorsFromString",
    value: function extractSelectorsFromString(t, e) {
      var s, _iteratorNormalCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, _step11$value, _r4, _i3, _t11, _n3;

      return regeneratorRuntime.async(function extractSelectorsFromString$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              s = new f([]);
              _iteratorNormalCompletion11 = true;
              _didIteratorError11 = false;
              _iteratorError11 = undefined;
              _context4.prev = 4;
              _iterator11 = t[Symbol.iterator]();

            case 6:
              if (_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done) {
                _context4.next = 16;
                break;
              }

              _step11$value = _step11.value, _r4 = _step11$value.raw, _i3 = _step11$value.extension;
              _t11 = this.getFileExtractor(".".concat(_i3), e);
              _context4.next = 11;
              return regeneratorRuntime.awrap(g(_r4, _t11));

            case 11:
              _n3 = _context4.sent;
              s.merge(_n3);

            case 13:
              _iteratorNormalCompletion11 = true;
              _context4.next = 6;
              break;

            case 16:
              _context4.next = 22;
              break;

            case 18:
              _context4.prev = 18;
              _context4.t0 = _context4["catch"](4);
              _didIteratorError11 = true;
              _iteratorError11 = _context4.t0;

            case 22:
              _context4.prev = 22;
              _context4.prev = 23;

              if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                _iterator11["return"]();
              }

            case 25:
              _context4.prev = 25;

              if (!_didIteratorError11) {
                _context4.next = 28;
                break;
              }

              throw _iteratorError11;

            case 28:
              return _context4.finish(25);

            case 29:
              return _context4.finish(22);

            case 30:
              return _context4.abrupt("return", s);

            case 31:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[4, 18, 22, 30], [23,, 25, 29]]);
    }
  }, {
    key: "evaluateAtRule",
    value: function evaluateAtRule(t) {
      if (this.options.keyframes && t.name.endsWith("keyframes")) this.atRules.keyframes.push(t);else if (this.options.fontFace && "font-face" === t.name && t.nodes) {
        var _iteratorNormalCompletion12 = true;
        var _didIteratorError12 = false;
        var _iteratorError12 = undefined;

        try {
          for (var _iterator12 = t.nodes[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
            var _e6 = _step12.value;
            "decl" === _e6.type && "font-family" === _e6.prop && this.atRules.fontFace.push({
              name: w(_e6.value),
              node: t
            });
          }
        } catch (err) {
          _didIteratorError12 = true;
          _iteratorError12 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
              _iterator12["return"]();
            }
          } finally {
            if (_didIteratorError12) {
              throw _iteratorError12;
            }
          }
        }
      }
    }
  }, {
    key: "evaluateRule",
    value: function evaluateRule(t, s) {
      var _this = this;

      var r, i, _iteratorNormalCompletion13, _didIteratorError13, _iteratorError13, _iterator13, _step13, _e7, n;

      return regeneratorRuntime.async(function evaluateRule$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!this.ignore) {
                _context5.next = 2;
                break;
              }

              return _context5.abrupt("return");

            case 2:
              r = t.prev();

              if (!(r && "comment" === r.type && v(r, "next"))) {
                _context5.next = 5;
                break;
              }

              return _context5.abrupt("return", void r.remove());

            case 5:
              if (!(t.parent && "atrule" === t.parent.type && "keyframes" === t.parent.name)) {
                _context5.next = 7;
                break;
              }

              return _context5.abrupt("return");

            case 7:
              if (!("rule" !== t.type)) {
                _context5.next = 9;
                break;
              }

              return _context5.abrupt("return");

            case 9:
              if (!function (t) {
                var e = !1;
                return t.walkComments(function (t) {
                  t && "comment" === t.type && t.text.includes("purgecss ignore current") && (e = !0, t.remove());
                }), e;
              }(t)) {
                _context5.next = 11;
                break;
              }

              return _context5.abrupt("return");

            case 11:
              i = !0;

              if (!(t.selector = (0, _postcssSelectorParser["default"])(function (t) {
                t.walk(function (t) {
                  "selector" === t.type && (i = _this.shouldKeepSelector(t, s), i || (_this.options.rejected && _this.selectorsRemoved.add(t.toString()), t.remove()));
                });
              }).processSync(t.selector), i && void 0 !== t.nodes)) {
                _context5.next = 32;
                break;
              }

              _iteratorNormalCompletion13 = true;
              _didIteratorError13 = false;
              _iteratorError13 = undefined;
              _context5.prev = 16;

              for (_iterator13 = t.nodes[Symbol.iterator](); !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                _e7 = _step13.value;
                "decl" === _e7.type && this.collectDeclarationsData(_e7);
              }

              _context5.next = 24;
              break;

            case 20:
              _context5.prev = 20;
              _context5.t0 = _context5["catch"](16);
              _didIteratorError13 = true;
              _iteratorError13 = _context5.t0;

            case 24:
              _context5.prev = 24;
              _context5.prev = 25;

              if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                _iterator13["return"]();
              }

            case 27:
              _context5.prev = 27;

              if (!_didIteratorError13) {
                _context5.next = 30;
                break;
              }

              throw _iteratorError13;

            case 30:
              return _context5.finish(27);

            case 31:
              return _context5.finish(24);

            case 32:
              n = t.parent;
              t.selector || t.remove(), function (t) {
                return !!("rule" === t.type && !t.selector || t.nodes && !t.nodes.length || "atrule" === t.type && (!t.nodes && !t.params || !t.params && t.nodes && !t.nodes.length));
              }(n) && n.remove();

            case 34:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, [[16, 20, 24, 32], [25,, 27, 31]]);
    }
  }, {
    key: "getPurgedCSS",
    value: function getPurgedCSS(e, s) {
      var r, i, _iteratorNormalCompletion14, _didIteratorError14, _iteratorError14, _iterator14, _step14, _t12, _i5, _i4, _e8, _i6, _n4, _o;

      return regeneratorRuntime.async(function getPurgedCSS$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              r = [], i = [];
              _iteratorNormalCompletion14 = true;
              _didIteratorError14 = false;
              _iteratorError14 = undefined;
              _context6.prev = 4;

              for (_iterator14 = e[Symbol.iterator](); !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                _t12 = _step14.value;
                "string" == typeof _t12 ? i.push.apply(i, _toConsumableArray(_glob["default"].sync(_t12, {
                  nodir: !0
                }))) : i.push(_t12);
              }

              _context6.next = 12;
              break;

            case 8:
              _context6.prev = 8;
              _context6.t0 = _context6["catch"](4);
              _didIteratorError14 = true;
              _iteratorError14 = _context6.t0;

            case 12:
              _context6.prev = 12;
              _context6.prev = 13;

              if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                _iterator14["return"]();
              }

            case 15:
              _context6.prev = 15;

              if (!_didIteratorError14) {
                _context6.next = 18;
                break;
              }

              throw _iteratorError14;

            case 18:
              return _context6.finish(15);

            case 19:
              return _context6.finish(12);

            case 20:
              _i5 = 0, _i4 = i;

            case 21:
              if (!(_i5 < _i4.length)) {
                _context6.next = 43;
                break;
              }

              _e8 = _i4[_i5];

              if (!("string" == typeof _e8)) {
                _context6.next = 34;
                break;
              }

              if (!this.options.stdin) {
                _context6.next = 28;
                break;
              }

              _context6.t2 = _e8;
              _context6.next = 31;
              break;

            case 28:
              _context6.next = 30;
              return regeneratorRuntime.awrap(m.readFile(_e8, "utf-8"));

            case 30:
              _context6.t2 = _context6.sent;

            case 31:
              _context6.t1 = _context6.t2;
              _context6.next = 35;
              break;

            case 34:
              _context6.t1 = _e8.raw;

            case 35:
              _i6 = _context6.t1;
              _n4 = (0, _postcss.parse)(_i6);
              this.walkThroughCSS(_n4, s), this.options.fontFace && this.removeUnusedFontFaces(), this.options.keyframes && this.removeUnusedKeyframes(), this.options.variables && this.removeUnusedCSSVariables();
              _o = {
                css: _n4.toString(),
                file: "string" == typeof _e8 ? _e8 : void 0
              };
              "string" == typeof _e8 && (_o.file = _e8), this.options.rejected && (_o.rejected = Array.from(this.selectorsRemoved), this.selectorsRemoved.clear()), r.push(_o);

            case 40:
              _i5++;
              _context6.next = 21;
              break;

            case 43:
              return _context6.abrupt("return", r);

            case 44:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this, [[4, 8, 12, 20], [13,, 15, 19]]);
    }
  }, {
    key: "isSelectorWhitelisted",
    value: function isSelectorWhitelisted(t) {
      return u.includes(t) || this.options.whitelist && this.options.whitelist.some(function (e) {
        return e === t;
      }) || this.options.whitelistPatterns && this.options.whitelistPatterns.some(function (e) {
        return e.test(t);
      });
    }
  }, {
    key: "isSelectorWhitelistedChildren",
    value: function isSelectorWhitelistedChildren(t) {
      return this.options.whitelistPatternsChildren && this.options.whitelistPatternsChildren.some(function (e) {
        return e.test(t);
      });
    }
  }, {
    key: "purge",
    value: function purge(t) {
      var _this$options, e, s, r, i, n, o, a;

      return regeneratorRuntime.async(function purge$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!("object" != _typeof(t))) {
                _context7.next = 6;
                break;
              }

              _context7.next = 3;
              return regeneratorRuntime.awrap(p(t));

            case 3:
              _context7.t0 = _context7.sent;
              _context7.next = 7;
              break;

            case 6:
              _context7.t0 = _objectSpread({}, c, {}, t);

            case 7:
              this.options = _context7.t0;
              _this$options = this.options;
              e = _this$options.content;
              s = _this$options.css;
              r = _this$options.extractors;
              i = e.filter(function (t) {
                return "string" == typeof t;
              });
              n = e.filter(function (t) {
                return "object" == _typeof(t);
              });
              _context7.next = 16;
              return regeneratorRuntime.awrap(this.extractSelectorsFromFiles(i, r));

            case 16:
              o = _context7.sent;
              _context7.next = 19;
              return regeneratorRuntime.awrap(this.extractSelectorsFromString(n, r));

            case 19:
              a = _context7.sent;
              return _context7.abrupt("return", this.getPurgedCSS(s, y(o, a)));

            case 21:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "removeUnusedCSSVariables",
    value: function removeUnusedCSSVariables() {
      this.variablesStructure.removeUnused();
    }
  }, {
    key: "removeUnusedFontFaces",
    value: function removeUnusedFontFaces() {
      var _iteratorNormalCompletion15 = true;
      var _didIteratorError15 = false;
      var _iteratorError15 = undefined;

      try {
        for (var _iterator15 = this.atRules.fontFace[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
          var _step15$value = _step15.value,
              _t13 = _step15$value.name,
              _e9 = _step15$value.node;
          this.usedFontFaces.has(_t13) || _e9.remove();
        }
      } catch (err) {
        _didIteratorError15 = true;
        _iteratorError15 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
            _iterator15["return"]();
          }
        } finally {
          if (_didIteratorError15) {
            throw _iteratorError15;
          }
        }
      }
    }
  }, {
    key: "removeUnusedKeyframes",
    value: function removeUnusedKeyframes() {
      var _iteratorNormalCompletion16 = true;
      var _didIteratorError16 = false;
      var _iteratorError16 = undefined;

      try {
        for (var _iterator16 = this.atRules.keyframes[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
          var _t14 = _step16.value;
          this.usedAnimations.has(_t14.params) || _t14.remove();
        }
      } catch (err) {
        _didIteratorError16 = true;
        _iteratorError16 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
            _iterator16["return"]();
          }
        } finally {
          if (_didIteratorError16) {
            throw _iteratorError16;
          }
        }
      }
    }
  }, {
    key: "shouldKeepSelector",
    value: function shouldKeepSelector(t, e) {
      if (function (t) {
        return t.parent && "pseudo" === t.parent.type && t.parent.value.startsWith(":") || !1;
      }(t)) return !0;
      var s = !1;
      var _iteratorNormalCompletion17 = true;
      var _didIteratorError17 = false;
      var _iteratorError17 = undefined;

      try {
        for (var _iterator17 = t.nodes[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
          var _i7 = _step17.value;

          var _t15 = "attribute" === _i7.type && _i7.attribute || _i7.value;

          if (_t15 && this.isSelectorWhitelistedChildren(_t15)) return !0;
          if (_t15 && (u.includes(_t15) || this.isSelectorWhitelisted(_t15))) s = !0;else {
            switch (_i7.type) {
              case "attribute":
                s = !!["value", "checked", "selected", "open"].includes(_i7.attribute) || S(_i7, e);
                break;

              case "class":
                r = _i7, s = e.hasClass(r.value);
                break;

              case "id":
                s = b(_i7, e);
                break;

              case "tag":
                s = F(_i7, e);
            }

            if (!s) return !1;
          }
        }
      } catch (err) {
        _didIteratorError17 = true;
        _iteratorError17 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
            _iterator17["return"]();
          }
        } finally {
          if (_didIteratorError17) {
            throw _iteratorError17;
          }
        }
      }

      var r;
      return s;
    }
  }, {
    key: "walkThroughCSS",
    value: function walkThroughCSS(t, e) {
      var _this2 = this;

      t.walk(function (t) {
        return "rule" === t.type ? _this2.evaluateRule(t, e) : "atrule" === t.type ? _this2.evaluateAtRule(t) : void ("comment" === t.type && (v(t, "start") ? (_this2.ignore = !0, t.remove()) : v(t, "end") && (_this2.ignore = !1, t.remove())));
      });
    }
  }]);

  return x;
}();

exports.PurgeCSS = x;
var _default = x;
exports["default"] = _default;