'use strict'; // walk the tree of deps starting from the top level list of bundled deps
// Any deps at the top level that are depended on by a bundled dep that
// does not have that dep in its own node_modules folder are considered
// bundled deps as well.  This list of names can be passed to npm-packlist
// as the "bundled" argument.  Additionally, packageJsonCache is shared so
// packlist doesn't have to re-read files already consumed in this pass

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require('fs');

var path = require('path');

var EE = require('events').EventEmitter; // we don't care about the package bins, but we share a pj cache
// with other modules that DO care about it, so keep it nice.


var normalizePackageBin = require('npm-normalize-package-bin');

var BundleWalker =
/*#__PURE__*/
function (_EE) {
  _inherits(BundleWalker, _EE);

  function BundleWalker(opt) {
    var _this;

    _classCallCheck(this, BundleWalker);

    opt = opt || {};
    _this = _possibleConstructorReturn(this, _getPrototypeOf(BundleWalker).call(this, opt));
    _this.path = path.resolve(opt.path || process.cwd());
    _this.parent = opt.parent || null;

    if (_this.parent) {
      _this.result = _this.parent.result; // only collect results in node_modules folders at the top level
      // since the node_modules in a bundled dep is included always

      if (!_this.parent.parent) {
        var base = path.basename(_this.path);
        var scope = path.basename(path.dirname(_this.path));

        _this.result.add(/^@/.test(scope) ? scope + '/' + base : base);
      }

      _this.root = _this.parent.root;
      _this.packageJsonCache = _this.parent.packageJsonCache;
    } else {
      _this.result = new Set();
      _this.root = _this.path;
      _this.packageJsonCache = opt.packageJsonCache || new Map();
    }

    _this.seen = new Set();
    _this.didDone = false;
    _this.children = 0;
    _this.node_modules = [];
    _this["package"] = null;
    _this.bundle = null;
    return _this;
  }

  _createClass(BundleWalker, [{
    key: "addListener",
    value: function addListener(ev, fn) {
      return this.on(ev, fn);
    }
  }, {
    key: "on",
    value: function on(ev, fn) {
      var ret = _get(_getPrototypeOf(BundleWalker.prototype), "on", this).call(this, ev, fn);

      if (ev === 'done' && this.didDone) {
        this.emit('done', this.result);
      }

      return ret;
    }
  }, {
    key: "done",
    value: function done() {
      if (!this.didDone) {
        this.didDone = true;

        if (!this.parent) {
          var res = Array.from(this.result);
          this.result = res;
          this.emit('done', res);
        } else {
          this.emit('done');
        }
      }
    }
  }, {
    key: "start",
    value: function start() {
      var pj = path.resolve(this.path, 'package.json');
      if (this.packageJsonCache.has(pj)) this.onPackage(this.packageJsonCache.get(pj));else this.readPackageJson(pj);
      return this;
    }
  }, {
    key: "readPackageJson",
    value: function readPackageJson(pj) {
      var _this2 = this;

      fs.readFile(pj, function (er, data) {
        return er ? _this2.done() : _this2.onPackageJson(pj, data);
      });
    }
  }, {
    key: "onPackageJson",
    value: function onPackageJson(pj, data) {
      try {
        this["package"] = normalizePackageBin(JSON.parse(data + ''));
      } catch (er) {
        return this.done();
      }

      this.packageJsonCache.set(pj, this["package"]);
      this.onPackage(this["package"]);
    }
  }, {
    key: "allDepsBundled",
    value: function allDepsBundled(pkg) {
      return Object.keys(pkg.dependencies || {}).concat(Object.keys(pkg.optionalDependencies || {}));
    }
  }, {
    key: "onPackage",
    value: function onPackage(pkg) {
      // all deps are bundled if we got here as a child.
      // otherwise, only bundle bundledDeps
      // Get a unique-ified array with a short-lived Set
      var bdRaw = this.parent ? this.allDepsBundled(pkg) : pkg.bundleDependencies || pkg.bundledDependencies || [];
      var bd = Array.from(new Set(Array.isArray(bdRaw) ? bdRaw : bdRaw === true ? this.allDepsBundled(pkg) : Object.keys(bdRaw)));
      if (!bd.length) return this.done();
      this.bundle = bd;
      var nm = this.path + '/node_modules';
      this.readModules();
    }
  }, {
    key: "readModules",
    value: function readModules() {
      var _this3 = this;

      readdirNodeModules(this.path + '/node_modules', function (er, nm) {
        return er ? _this3.onReaddir([]) : _this3.onReaddir(nm);
      });
    }
  }, {
    key: "onReaddir",
    value: function onReaddir(nm) {
      var _this4 = this;

      // keep track of what we have, in case children need it
      this.node_modules = nm;
      this.bundle.forEach(function (dep) {
        return _this4.childDep(dep);
      });
      if (this.children === 0) this.done();
    }
  }, {
    key: "childDep",
    value: function childDep(dep) {
      if (this.node_modules.indexOf(dep) !== -1 && !this.seen.has(dep)) {
        this.seen.add(dep);
        this.child(dep);
      } else if (this.parent) {
        this.parent.childDep(dep);
      }
    }
  }, {
    key: "child",
    value: function child(dep) {
      var _this5 = this;

      var p = this.path + '/node_modules/' + dep;
      this.children += 1;
      var child = new BundleWalker({
        path: p,
        parent: this
      });
      child.on('done', function (_) {
        if (--_this5.children === 0) _this5.done();
      });
      child.start();
    }
  }]);

  return BundleWalker;
}(EE);

var BundleWalkerSync =
/*#__PURE__*/
function (_BundleWalker) {
  _inherits(BundleWalkerSync, _BundleWalker);

  function BundleWalkerSync(opt) {
    _classCallCheck(this, BundleWalkerSync);

    return _possibleConstructorReturn(this, _getPrototypeOf(BundleWalkerSync).call(this, opt));
  }

  _createClass(BundleWalkerSync, [{
    key: "start",
    value: function start() {
      _get(_getPrototypeOf(BundleWalkerSync.prototype), "start", this).call(this);

      this.done();
      return this;
    }
  }, {
    key: "readPackageJson",
    value: function readPackageJson(pj) {
      try {
        this.onPackageJson(pj, fs.readFileSync(pj));
      } catch (er) {}

      return this;
    }
  }, {
    key: "readModules",
    value: function readModules() {
      try {
        this.onReaddir(readdirNodeModulesSync(this.path + '/node_modules'));
      } catch (er) {
        this.onReaddir([]);
      }
    }
  }, {
    key: "child",
    value: function child(dep) {
      new BundleWalkerSync({
        path: this.path + '/node_modules/' + dep,
        parent: this
      }).start();
    }
  }]);

  return BundleWalkerSync;
}(BundleWalker);

var readdirNodeModules = function readdirNodeModules(nm, cb) {
  fs.readdir(nm, function (er, set) {
    if (er) cb(er);else {
      var scopes = set.filter(function (f) {
        return /^@/.test(f);
      });
      if (!scopes.length) cb(null, set);else {
        var unscoped = set.filter(function (f) {
          return !/^@/.test(f);
        });
        var count = scopes.length;
        scopes.forEach(function (scope) {
          fs.readdir(nm + '/' + scope, function (er, pkgs) {
            if (er || !pkgs.length) unscoped.push(scope);else unscoped.push.apply(unscoped, pkgs.map(function (p) {
              return scope + '/' + p;
            }));
            if (--count === 0) cb(null, unscoped);
          });
        });
      }
    }
  });
};

var readdirNodeModulesSync = function readdirNodeModulesSync(nm) {
  var set = fs.readdirSync(nm);
  var unscoped = set.filter(function (f) {
    return !/^@/.test(f);
  });
  var scopes = set.filter(function (f) {
    return /^@/.test(f);
  }).map(function (scope) {
    try {
      var pkgs = fs.readdirSync(nm + '/' + scope);
      return pkgs.length ? pkgs.map(function (p) {
        return scope + '/' + p;
      }) : [scope];
    } catch (er) {
      return [scope];
    }
  }).reduce(function (a, b) {
    return a.concat(b);
  }, []);
  return unscoped.concat(scopes);
};

var walk = function walk(options, callback) {
  var p = new Promise(function (resolve, reject) {
    new BundleWalker(options).on('done', resolve).on('error', reject).start();
  });
  return callback ? p.then(function (res) {
    return callback(null, res);
  }, callback) : p;
};

var walkSync = function walkSync(options) {
  return new BundleWalkerSync(options).start().result;
};

module.exports = walk;
walk.sync = walkSync;
walk.BundleWalker = BundleWalker;
walk.BundleWalkerSync = BundleWalkerSync;