"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// pass in a manifest with a 'bin' field here, and it'll turn it
// into a properly santized bin object
var _require = require('path'),
    join = _require.join,
    basename = _require.basename;

var normalize = function normalize(pkg) {
  return !pkg.bin ? removeBin(pkg) : typeof pkg.bin === 'string' ? normalizeString(pkg) : Array.isArray(pkg.bin) ? normalizeArray(pkg) : _typeof(pkg.bin) === 'object' ? normalizeObject(pkg) : removeBin(pkg);
};

var normalizeString = function normalizeString(pkg) {
  if (!pkg.name) return removeBin(pkg);
  pkg.bin = _defineProperty({}, pkg.name, pkg.bin);
  return normalizeObject(pkg);
};

var normalizeArray = function normalizeArray(pkg) {
  pkg.bin = pkg.bin.reduce(function (acc, k) {
    acc[basename(k)] = k;
    return acc;
  }, {});
  return normalizeObject(pkg);
};

var removeBin = function removeBin(pkg) {
  delete pkg.bin;
  return pkg;
};

var normalizeObject = function normalizeObject(pkg) {
  var orig = pkg.bin;
  var clean = {};
  var hasBins = false;
  Object.keys(orig).forEach(function (binKey) {
    var base = join('/', basename(binKey.replace(/\\|:/g, '/'))).substr(1);
    if (typeof orig[binKey] !== 'string' || !base) return;
    var binTarget = join('/', orig[binKey]).replace(/\\/g, '/').substr(1);
    if (!binTarget) return;
    clean[base] = binTarget;
    hasBins = true;
  });
  if (hasBins) pkg.bin = clean;else delete pkg.bin;
  return pkg;
};

module.exports = normalize;