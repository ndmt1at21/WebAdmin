"use strict";

var normalize = require('../');

var t = require('tap'); // all of these just delete the bins, so expect the same value


var expect = {
  name: 'hello',
  version: 'world'
};
t.test('no bin in object', function _callee(t) {
  var pkg;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world'
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 3:
        case "end":
          return _context.stop();
      }
    }
  });
});
t.test('empty string bin in object', function _callee2(t) {
  var pkg;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: ''
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  });
});
t.test('false bin in object', function _callee3(t) {
  var pkg;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: false
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  });
});
t.test('null bin in object', function _callee4(t) {
  var pkg;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: null
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 3:
        case "end":
          return _context4.stop();
      }
    }
  });
});
t.test('number bin', function _callee5(t) {
  var pkg;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: 42069
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 3:
        case "end":
          return _context5.stop();
      }
    }
  });
});