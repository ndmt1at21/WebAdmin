"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var normalize = require('../');

var t = require('tap');

t.test('benign object', function _callee(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          // just clean up the ./ in the targets and remove anything weird
          pkg = {
            name: 'hello',
            version: 'world',
            bin: {
              y: './x/y',
              z: './y/z',
              a: './a'
            }
          };
          expect = {
            name: 'hello',
            version: 'world',
            bin: {
              y: 'x/y',
              z: 'y/z',
              a: 'a'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
t.test('empty and non-string targets', function _callee2(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          // just clean up the ./ in the targets and remove anything weird
          pkg = {
            name: 'hello',
            version: 'world',
            bin: {
              z: './././',
              y: '',
              './x': 'x.js',
              re: /asdf/,
              foo: {
                bar: 'baz'
              },
              "false": false,
              "null": null,
              array: [1, 2, 3],
              func: function func() {}
            }
          };
          expect = {
            name: 'hello',
            version: 'world',
            bin: {
              x: 'x.js'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context2.stop();
      }
    }
  });
});
t.test('slashy object', function _callee3(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: {
              '/path/foo': '/etc/passwd',
              'bar': '/etc/passwd',
              '/etc/glorb/baz': '/etc/passwd',
              '/etc/passwd:/bin/usr/exec': '/etc/passwd'
            }
          };
          expect = {
            name: 'hello',
            version: 'world',
            bin: {
              foo: 'etc/passwd',
              bar: 'etc/passwd',
              baz: 'etc/passwd',
              exec: 'etc/passwd'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  });
});
t.test('dotty object', function _callee4(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: {
              'nodots': '../../../../etc/passwd',
              '../../../../../../dots': '../../../../etc/passwd',
              '.././../\\./..//C:\\./': 'this is removed',
              '.././../\\./..//C:\\/': 'super safe programming language',
              '.././../\\./..//C:\\x\\y\\z/': 'xyz'
            }
          };
          expect = {
            name: 'hello',
            version: 'world',
            bin: {
              nodots: 'etc/passwd',
              dots: 'etc/passwd',
              C: 'super safe programming language',
              z: 'xyz'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context4.stop();
      }
    }
  });
});
t.test('weird object', function _callee5(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: /asdf/
          };
          expect = {
            name: 'hello',
            version: 'world'
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context5.stop();
      }
    }
  });
});
t.test('oddball keys', function _callee6(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          pkg = {
            bin: _defineProperty({
              '~': 'target',
              '¬£': 'target',
              'Œ∂': 'target',
              '„Åé': 'target',
              'Êìç': 'target',
              'üé±': 'target',
              'üíé': 'target',
              'üí∏': 'target',
              'ü¶â': 'target',
              '—Åheck-dom': 'target',
              'Œ©pm': 'target',
              'Œ∂Œª': 'target',
              '–º–≥–∞': 'target',
              '–ø—à–µ': 'target',
              '—Ç–∑—á': 'target',
              '—Ç–∑—å': 'target',
              '–Ω—Ñ–∫—Ç': 'target',
              '—Å—Å—Å—Ä': 'target',
              'Âêõ„ÅÆÂêç„ÅØ': 'target'
            }, "\u541B\u306E\u540D\u306F", 'target')
          };
          expect = {
            bin: {
              '~': 'target',
              '¬£': 'target',
              'Œ∂': 'target',
              '„Åé': 'target',
              'Êìç': 'target',
              'üé±': 'target',
              'üíé': 'target',
              'üí∏': 'target',
              'ü¶â': 'target',
              '—Åheck-dom': 'target',
              'Œ©pm': 'target',
              'Œ∂Œª': 'target',
              '–º–≥–∞': 'target',
              '–ø—à–µ': 'target',
              '—Ç–∑—á': 'target',
              '—Ç–∑—å': 'target',
              '–Ω—Ñ–∫—Ç': 'target',
              '—Å—Å—Å—Ä': 'target',
              'Âêõ„ÅÆÂêç„ÅØ': 'target'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context6.stop();
      }
    }
  });
});