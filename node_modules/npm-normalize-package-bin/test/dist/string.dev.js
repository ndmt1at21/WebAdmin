"use strict";

var normalize = require('../');

var t = require('tap');

t.test('benign string', function _callee(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: 'hello.js'
          };
          expect = {
            name: 'hello',
            version: 'world',
            bin: {
              hello: 'hello.js'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
t.test('slashy string', function _callee2(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: '/etc/passwd'
          };
          expect = {
            name: 'hello',
            version: 'world',
            bin: {
              hello: 'etc/passwd'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context2.stop();
      }
    }
  });
});
t.test('dotty string', function _callee3(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: '../../../../etc/passwd'
          };
          expect = {
            name: 'hello',
            version: 'world',
            bin: {
              hello: 'etc/passwd'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  });
});
t.test('double path', function _callee4(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          pkg = {
            name: 'hello',
            version: 'world',
            bin: '/etc/passwd:/bin/usr/exec'
          };
          expect = {
            name: 'hello',
            version: 'world',
            bin: {
              hello: 'etc/passwd:/bin/usr/exec'
            }
          };
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context4.stop();
      }
    }
  });
});
t.test('string with no name', function _callee5(t) {
  var pkg, expect;
  return regeneratorRuntime.async(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          pkg = {
            bin: 'foobar.js'
          };
          expect = {};
          t.strictSame(normalize(pkg), expect);
          t.strictSame(normalize(normalize(pkg)), expect, 'double sanitize ok');

        case 4:
        case "end":
          return _context5.stop();
      }
    }
  });
});