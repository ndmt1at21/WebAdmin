'use strict';

var lazy = function lazy(mod, fn, id) {
  return mod === undefined ? fn(id) : mod;
};

module.exports = function (fn) {
  return function (id) {
    var mod;
    return function () {
      if (arguments.length === 0) {
        mod = lazy(mod, fn, id);
        return mod;
      }

      var ret = {};
      [].forEach.call(arguments, function (prop) {
        Object.defineProperty(ret, prop, {
          get: function get() {
            mod = lazy(mod, fn, id);

            if (typeof mod[prop] === 'function') {
              return function () {
                return mod[prop].apply(mod, arguments);
              };
            }

            return mod[prop];
          }
        });
      });
      return ret;
    };
  };
};

module.exports.proxy = function (fn) {
  return function (id) {
    var mod;
    var handler = {
      get: function get(target, property) {
        mod = lazy(mod, fn, id);
        return Reflect.get(mod, property);
      },
      apply: function apply(target, thisArg, argumentsList) {
        mod = lazy(mod, fn, id);
        return Reflect.apply(mod, thisArg, argumentsList);
      }
    };
    return new Proxy(function () {}, handler);
  };
};