'use strict';

function _templateObject7() {
  var data = _taggedTemplateLiteral(["void 0"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["true"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n            ", " === null || ", " === void 0"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["", " == null"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n            ", " !== null && ", " !== void 0"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["", " != null"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["(() => ", ")()"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, '__esModule', {
  value: true
});

var helperPluginUtils = require('@babel/helper-plugin-utils');

var helperSkipTransparentExpressionWrappers = require('@babel/helper-skip-transparent-expression-wrappers');

var syntaxOptionalChaining = require('@babel/plugin-syntax-optional-chaining');

var core = require('@babel/core');

function _interopDefaultLegacy(e) {
  return e && _typeof(e) === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var syntaxOptionalChaining__default =
/*#__PURE__*/
_interopDefaultLegacy(syntaxOptionalChaining);

function willPathCastToBoolean(path) {
  var maybeWrapped = findOutermostTransparentParent(path);
  var node = maybeWrapped.node,
      parentPath = maybeWrapped.parentPath;

  if (parentPath.isLogicalExpression()) {
    var _parentPath$node = parentPath.node,
        operator = _parentPath$node.operator,
        right = _parentPath$node.right;

    if (operator === "&&" || operator === "||" || operator === "??" && node === right) {
      return willPathCastToBoolean(parentPath);
    }
  }

  if (parentPath.isSequenceExpression()) {
    var expressions = parentPath.node.expressions;

    if (expressions[expressions.length - 1] === node) {
      return willPathCastToBoolean(parentPath);
    } else {
      return true;
    }
  }

  return parentPath.isConditional({
    test: node
  }) || parentPath.isUnaryExpression({
    operator: "!"
  }) || parentPath.isLoop({
    test: node
  });
}

function findOutermostTransparentParent(path) {
  var maybeWrapped = path;
  path.findParent(function (p) {
    if (!helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(p)) return true;
    maybeWrapped = p;
  });
  return maybeWrapped;
}

var ast = core.template.expression.ast;
var index = helperPluginUtils.declare(function (api, options) {
  api.assertVersion(7);
  var _options$loose = options.loose,
      loose = _options$loose === void 0 ? false : _options$loose;

  function isSimpleMemberExpression(expression) {
    expression = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(expression);
    return core.types.isIdentifier(expression) || core.types.isSuper(expression) || core.types.isMemberExpression(expression) && !expression.computed && isSimpleMemberExpression(expression.object);
  }

  function needsMemoize(path) {
    var optionalPath = path;
    var scope = path.scope;

    while (optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression()) {
      var _optionalPath = optionalPath,
          node = _optionalPath.node;
      var childKey = optionalPath.isOptionalMemberExpression() ? "object" : "callee";
      var childPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get(childKey));

      if (node.optional) {
        return !scope.isStatic(childPath.node);
      }

      optionalPath = childPath;
    }
  }

  return {
    name: "proposal-optional-chaining",
    inherits: syntaxOptionalChaining__default['default'],
    visitor: {
      "OptionalCallExpression|OptionalMemberExpression": function OptionalCallExpressionOptionalMemberExpression(path) {
        var scope = path.scope;
        var maybeWrapped = findOutermostTransparentParent(path);
        var parentPath = maybeWrapped.parentPath;
        var willReplacementCastToBoolean = willPathCastToBoolean(maybeWrapped);
        var isDeleteOperation = false;
        var parentIsCall = parentPath.isCallExpression({
          callee: maybeWrapped.node
        }) && path.isOptionalMemberExpression();
        var optionals = [];
        var optionalPath = path;

        if (scope.path.isPattern() && needsMemoize(optionalPath)) {
          path.replaceWith(core.template.ast(_templateObject(), path.node));
          return;
        }

        while (optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression()) {
          var _optionalPath2 = optionalPath,
              node = _optionalPath2.node;

          if (node.optional) {
            optionals.push(node);
          }

          if (optionalPath.isOptionalMemberExpression()) {
            optionalPath.node.type = "MemberExpression";
            optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("object"));
          } else if (optionalPath.isOptionalCallExpression()) {
            optionalPath.node.type = "CallExpression";
            optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("callee"));
          }
        }

        var replacementPath = path;

        if (parentPath.isUnaryExpression({
          operator: "delete"
        })) {
          replacementPath = parentPath;
          isDeleteOperation = true;
        }

        for (var i = optionals.length - 1; i >= 0; i--) {
          var _node = optionals[i];
          var isCall = core.types.isCallExpression(_node);
          var replaceKey = isCall ? "callee" : "object";
          var chainWithTypes = _node[replaceKey];
          var chain = chainWithTypes;

          while (helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(chain)) {
            chain = chain.expression;
          }

          var ref = void 0;
          var check = void 0;

          if (isCall && core.types.isIdentifier(chain, {
            name: "eval"
          })) {
            check = ref = chain;
            _node[replaceKey] = core.types.sequenceExpression([core.types.numericLiteral(0), ref]);
          } else if (loose && isCall && isSimpleMemberExpression(chain)) {
            check = ref = chainWithTypes;
          } else {
            ref = scope.maybeGenerateMemoised(chain);

            if (ref) {
              check = core.types.assignmentExpression("=", core.types.cloneNode(ref), chainWithTypes);
              _node[replaceKey] = ref;
            } else {
              check = ref = chainWithTypes;
            }
          }

          if (isCall && core.types.isMemberExpression(chain)) {
            if (loose && isSimpleMemberExpression(chain)) {
              _node.callee = chainWithTypes;
            } else {
              var _chain = chain,
                  object = _chain.object;
              var context = scope.maybeGenerateMemoised(object);

              if (context) {
                chain.object = core.types.assignmentExpression("=", context, object);
              } else if (core.types.isSuper(object)) {
                context = core.types.thisExpression();
              } else {
                context = object;
              }

              _node.arguments.unshift(core.types.cloneNode(context));

              _node.callee = core.types.memberExpression(_node.callee, core.types.identifier("call"));
            }
          }

          var replacement = replacementPath.node;

          if (i === 0 && parentIsCall) {
            var _baseRef;

            var _object = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("object")).node;
            var baseRef = void 0;

            if (!loose || !isSimpleMemberExpression(_object)) {
              baseRef = scope.maybeGenerateMemoised(_object);

              if (baseRef) {
                replacement.object = core.types.assignmentExpression("=", baseRef, _object);
              }
            }

            replacement = core.types.callExpression(core.types.memberExpression(replacement, core.types.identifier("bind")), [core.types.cloneNode((_baseRef = baseRef) != null ? _baseRef : _object)]);
          }

          if (willReplacementCastToBoolean) {
            var nonNullishCheck = loose ? ast(_templateObject2(), core.types.cloneNode(check)) : ast(_templateObject3(), core.types.cloneNode(check), core.types.cloneNode(ref));
            replacementPath.replaceWith(core.types.logicalExpression("&&", nonNullishCheck, replacement));
            replacementPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("right"));
          } else {
            var nullishCheck = loose ? ast(_templateObject4(), core.types.cloneNode(check)) : ast(_templateObject5(), core.types.cloneNode(check), core.types.cloneNode(ref));
            var returnValue = isDeleteOperation ? ast(_templateObject6()) : ast(_templateObject7());
            replacementPath.replaceWith(core.types.conditionalExpression(nullishCheck, returnValue, replacement));
            replacementPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("alternate"));
          }
        }
      }
    }
  };
});
exports["default"] = index;