"use strict"; /// <reference lib="es2016"/>
/// <reference lib="es2017.sharedmemory"/>
/// <reference lib="esnext.asynciterable"/>
/// <reference lib="dom"/>

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
}); // TODO: Use the `URL` global when targeting Node.js 10
// tslint:disable-next-line

var URLGlobal = typeof URL === 'undefined' ? require('url').URL : URL;
var toString = Object.prototype.toString;

var isOfType = function isOfType(type) {
  return function (value) {
    return _typeof(value) === type;
  };
};

var isBuffer = function isBuffer(input) {
  return !is.nullOrUndefined(input) && !is.nullOrUndefined(input.constructor) && is.function_(input.constructor.isBuffer) && input.constructor.isBuffer(input);
};

var getObjectType = function getObjectType(value) {
  var objectName = toString.call(value).slice(8, -1);

  if (objectName) {
    return objectName;
  }

  return null;
};

var isObjectOfType = function isObjectOfType(type) {
  return function (value) {
    return getObjectType(value) === type;
  };
};

function is(value) {
  switch (value) {
    case null:
      return "null"
      /* null */
      ;

    case true:
    case false:
      return "boolean"
      /* boolean */
      ;

    default:
  }

  switch (_typeof(value)) {
    case 'undefined':
      return "undefined"
      /* undefined */
      ;

    case 'string':
      return "string"
      /* string */
      ;

    case 'number':
      return "number"
      /* number */
      ;

    case 'symbol':
      return "symbol"
      /* symbol */
      ;

    default:
  }

  if (is.function_(value)) {
    return "Function"
    /* Function */
    ;
  }

  if (is.observable(value)) {
    return "Observable"
    /* Observable */
    ;
  }

  if (Array.isArray(value)) {
    return "Array"
    /* Array */
    ;
  }

  if (isBuffer(value)) {
    return "Buffer"
    /* Buffer */
    ;
  }

  var tagType = getObjectType(value);

  if (tagType) {
    return tagType;
  }

  if (value instanceof String || value instanceof Boolean || value instanceof Number) {
    throw new TypeError('Please don\'t use object wrappers for primitive types');
  }

  return "Object"
  /* Object */
  ;
}

(function (is) {
  // tslint:disable-next-line:strict-type-predicates
  var isObject = function isObject(value) {
    return _typeof(value) === 'object';
  }; // tslint:disable:variable-name


  is.undefined = isOfType('undefined');
  is.string = isOfType('string');
  is.number = isOfType('number');
  is.function_ = isOfType('function'); // tslint:disable-next-line:strict-type-predicates

  is.null_ = function (value) {
    return value === null;
  };

  is.class_ = function (value) {
    return is.function_(value) && value.toString().startsWith('class ');
  };

  is["boolean"] = function (value) {
    return value === true || value === false;
  };

  is.symbol = isOfType('symbol'); // tslint:enable:variable-name

  is.numericString = function (value) {
    return is.string(value) && value.length > 0 && !Number.isNaN(Number(value));
  };

  is.array = Array.isArray;
  is.buffer = isBuffer;

  is.nullOrUndefined = function (value) {
    return is.null_(value) || is.undefined(value);
  };

  is.object = function (value) {
    return !is.nullOrUndefined(value) && (is.function_(value) || isObject(value));
  };

  is.iterable = function (value) {
    return !is.nullOrUndefined(value) && is.function_(value[Symbol.iterator]);
  };

  is.asyncIterable = function (value) {
    return !is.nullOrUndefined(value) && is.function_(value[Symbol.asyncIterator]);
  };

  is.generator = function (value) {
    return is.iterable(value) && is.function_(value.next) && is.function_(value["throw"]);
  };

  is.nativePromise = function (value) {
    return isObjectOfType("Promise"
    /* Promise */
    )(value);
  };

  var hasPromiseAPI = function hasPromiseAPI(value) {
    return !is.null_(value) && isObject(value) && is.function_(value.then) && is.function_(value["catch"]);
  };

  is.promise = function (value) {
    return is.nativePromise(value) || hasPromiseAPI(value);
  };

  is.generatorFunction = isObjectOfType("GeneratorFunction"
  /* GeneratorFunction */
  );
  is.asyncFunction = isObjectOfType("AsyncFunction"
  /* AsyncFunction */
  );

  is.boundFunction = function (value) {
    return is.function_(value) && !value.hasOwnProperty('prototype');
  };

  is.regExp = isObjectOfType("RegExp"
  /* RegExp */
  );
  is.date = isObjectOfType("Date"
  /* Date */
  );
  is.error = isObjectOfType("Error"
  /* Error */
  );

  is.map = function (value) {
    return isObjectOfType("Map"
    /* Map */
    )(value);
  };

  is.set = function (value) {
    return isObjectOfType("Set"
    /* Set */
    )(value);
  };

  is.weakMap = function (value) {
    return isObjectOfType("WeakMap"
    /* WeakMap */
    )(value);
  };

  is.weakSet = function (value) {
    return isObjectOfType("WeakSet"
    /* WeakSet */
    )(value);
  };

  is.int8Array = isObjectOfType("Int8Array"
  /* Int8Array */
  );
  is.uint8Array = isObjectOfType("Uint8Array"
  /* Uint8Array */
  );
  is.uint8ClampedArray = isObjectOfType("Uint8ClampedArray"
  /* Uint8ClampedArray */
  );
  is.int16Array = isObjectOfType("Int16Array"
  /* Int16Array */
  );
  is.uint16Array = isObjectOfType("Uint16Array"
  /* Uint16Array */
  );
  is.int32Array = isObjectOfType("Int32Array"
  /* Int32Array */
  );
  is.uint32Array = isObjectOfType("Uint32Array"
  /* Uint32Array */
  );
  is.float32Array = isObjectOfType("Float32Array"
  /* Float32Array */
  );
  is.float64Array = isObjectOfType("Float64Array"
  /* Float64Array */
  );
  is.arrayBuffer = isObjectOfType("ArrayBuffer"
  /* ArrayBuffer */
  );
  is.sharedArrayBuffer = isObjectOfType("SharedArrayBuffer"
  /* SharedArrayBuffer */
  );
  is.dataView = isObjectOfType("DataView"
  /* DataView */
  );

  is.directInstanceOf = function (instance, klass) {
    return Object.getPrototypeOf(instance) === klass.prototype;
  };

  is.urlInstance = function (value) {
    return isObjectOfType("URL"
    /* URL */
    )(value);
  };

  is.urlString = function (value) {
    if (!is.string(value)) {
      return false;
    }

    try {
      new URLGlobal(value); // tslint:disable-line no-unused-expression

      return true;
    } catch (_a) {
      return false;
    }
  };

  is.truthy = function (value) {
    return Boolean(value);
  };

  is.falsy = function (value) {
    return !value;
  };

  is.nan = function (value) {
    return Number.isNaN(value);
  };

  var primitiveTypes = new Set(['undefined', 'string', 'number', 'boolean', 'symbol']);

  is.primitive = function (value) {
    return is.null_(value) || primitiveTypes.has(_typeof(value));
  };

  is.integer = function (value) {
    return Number.isInteger(value);
  };

  is.safeInteger = function (value) {
    return Number.isSafeInteger(value);
  };

  is.plainObject = function (value) {
    // From: https://github.com/sindresorhus/is-plain-obj/blob/master/index.js
    var prototype;
    return getObjectType(value) === "Object"
    /* Object */
    && (prototype = Object.getPrototypeOf(value), prototype === null || // tslint:disable-line:ban-comma-operator
    prototype === Object.getPrototypeOf({}));
  };

  var typedArrayTypes = new Set(["Int8Array"
  /* Int8Array */
  , "Uint8Array"
  /* Uint8Array */
  , "Uint8ClampedArray"
  /* Uint8ClampedArray */
  , "Int16Array"
  /* Int16Array */
  , "Uint16Array"
  /* Uint16Array */
  , "Int32Array"
  /* Int32Array */
  , "Uint32Array"
  /* Uint32Array */
  , "Float32Array"
  /* Float32Array */
  , "Float64Array"
  /* Float64Array */
  ]);

  is.typedArray = function (value) {
    var objectType = getObjectType(value);

    if (objectType === null) {
      return false;
    }

    return typedArrayTypes.has(objectType);
  };

  var isValidLength = function isValidLength(value) {
    return is.safeInteger(value) && value > -1;
  };

  is.arrayLike = function (value) {
    return !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);
  };

  is.inRange = function (value, range) {
    if (is.number(range)) {
      return value >= Math.min(0, range) && value <= Math.max(range, 0);
    }

    if (is.array(range) && range.length === 2) {
      return value >= Math.min.apply(Math, _toConsumableArray(range)) && value <= Math.max.apply(Math, _toConsumableArray(range));
    }

    throw new TypeError("Invalid range: ".concat(JSON.stringify(range)));
  };

  var NODE_TYPE_ELEMENT = 1;
  var DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];

  is.domElement = function (value) {
    return is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(function (property) {
      return property in value;
    });
  };

  is.observable = function (value) {
    if (!value) {
      return false;
    }

    if (value[Symbol.observable] && value === value[Symbol.observable]()) {
      return true;
    }

    if (value['@@observable'] && value === value['@@observable']()) {
      return true;
    }

    return false;
  };

  is.nodeStream = function (value) {
    return !is.nullOrUndefined(value) && isObject(value) && is.function_(value.pipe) && !is.observable(value);
  };

  is.infinite = function (value) {
    return value === Infinity || value === -Infinity;
  };

  var isAbsoluteMod2 = function isAbsoluteMod2(rem) {
    return function (value) {
      return is.integer(value) && Math.abs(value % 2) === rem;
    };
  };

  is.even = isAbsoluteMod2(0);
  is.odd = isAbsoluteMod2(1);

  var isWhiteSpaceString = function isWhiteSpaceString(value) {
    return is.string(value) && /\S/.test(value) === false;
  };

  is.emptyArray = function (value) {
    return is.array(value) && value.length === 0;
  };

  is.nonEmptyArray = function (value) {
    return is.array(value) && value.length > 0;
  };

  is.emptyString = function (value) {
    return is.string(value) && value.length === 0;
  };

  is.nonEmptyString = function (value) {
    return is.string(value) && value.length > 0;
  };

  is.emptyStringOrWhitespace = function (value) {
    return is.emptyString(value) || isWhiteSpaceString(value);
  };

  is.emptyObject = function (value) {
    return is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;
  };

  is.nonEmptyObject = function (value) {
    return is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;
  };

  is.emptySet = function (value) {
    return is.set(value) && value.size === 0;
  };

  is.nonEmptySet = function (value) {
    return is.set(value) && value.size > 0;
  };

  is.emptyMap = function (value) {
    return is.map(value) && value.size === 0;
  };

  is.nonEmptyMap = function (value) {
    return is.map(value) && value.size > 0;
  };

  var predicateOnArray = function predicateOnArray(method, predicate, values) {
    if (is.function_(predicate) === false) {
      throw new TypeError("Invalid predicate: ".concat(JSON.stringify(predicate)));
    }

    if (values.length === 0) {
      throw new TypeError('Invalid number of values');
    }

    return method.call(values, predicate);
  }; // tslint:disable variable-name


  is.any = function (predicate) {
    for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }

    return predicateOnArray(Array.prototype.some, predicate, values);
  };

  is.all = function (predicate) {
    for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      values[_key2 - 1] = arguments[_key2];
    }

    return predicateOnArray(Array.prototype.every, predicate, values);
  }; // tslint:enable variable-name

})(is || (is = {})); // Some few keywords are reserved, but we'll populate them for Node.js users
// See https://github.com/Microsoft/TypeScript/issues/2536


Object.defineProperties(is, {
  "class": {
    value: is.class_
  },
  "function": {
    value: is.function_
  },
  "null": {
    value: is.null_
  }
});
exports["default"] = is; // For CommonJS default export support

module.exports = is;
module.exports["default"] = is;