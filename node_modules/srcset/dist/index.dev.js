'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var integerRegex = /^-?\d+$/;

function deepUnique(array) {
  return array.sort().filter(function (element, index) {
    return JSON.stringify(element) !== JSON.stringify(array[index - 1]);
  });
}

exports.parse = function (string) {
  return deepUnique(string.split(/,\s+/).map(function (part) {
    var result = {};
    part.trim().split(/\s+/).forEach(function (element, index) {
      if (index === 0) {
        result.url = element;
        return;
      }

      var value = element.slice(0, -1);
      var postfix = element[element.length - 1];
      var integerValue = Number.parseInt(value, 10);
      var floatValue = Number.parseFloat(value);

      if (postfix === 'w' && integerRegex.test(value)) {
        if (integerValue <= 0) {
          throw new Error('Width descriptor must be greater than zero');
        }

        result.width = integerValue;
      } else if (postfix === 'x' && !Number.isNaN(floatValue)) {
        if (floatValue <= 0) {
          throw new Error('Pixel density descriptor must be greater than zero');
        }

        result.density = floatValue;
      } else {
        throw new Error("Invalid srcset descriptor: ".concat(element));
      }

      if (result.width && result.density) {
        throw new Error('Image candidate string cannot have both width descriptor and pixel density descriptor');
      }
    });
    return result;
  }));
};

exports.stringify = function (array) {
  return _toConsumableArray(new Set(array.map(function (element) {
    if (!element.url) {
      throw new Error('URL is required');
    }

    var result = [element.url];

    if (element.width) {
      result.push("".concat(element.width, "w"));
    }

    if (element.density) {
      result.push("".concat(element.density, "x"));
    }

    return result.join(' ');
  }))).join(', ');
};