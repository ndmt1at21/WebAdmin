"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var assert = _interopRequireWildcard(require("assert"));

var Immutable = _interopRequireWildcard(require("immutable"));

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ObjectID = require('bson').ObjectID;

describe(__filename + '#', function () {
  var topic = Immutable.List([1, 2, 3, 4, 5, 6, 6, 4, 3]);
  var persons = Immutable.fromJS([{
    person: {
      age: 3
    }
  }, {
    person: {
      age: 5
    }
  }, {
    person: {
      age: 8
    }
  }]);
  it('works with Immutable.Map in a Immutable.List', function () {
    assert.equal((0, _["default"])({
      'person.age': {
        $gt: 4
      }
    }, persons).size, 2);
    assert.equal(persons.filter((0, _["default"])({
      'person.age': {
        $gt: 4
      }
    })).size, 2);
  });
});